// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rf_phreaker.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rf_phreaker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rf_phreaker {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* rp_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_update_reflection_ = NULL;
struct rp_updateOneofInstance {
  const ::rf_phreaker::protobuf::rp_log* log_;
  const ::rf_phreaker::protobuf::rp_message* msg_;
  const ::rf_phreaker::protobuf::rp_device_info* device_;
  const ::rf_phreaker::protobuf::rp_gps* gps_;
  const ::rf_phreaker::protobuf::rp_gsm_update* gsm_full_scan_;
  const ::rf_phreaker::protobuf::rp_gsm_update* gsm_sweep_;
  const ::rf_phreaker::protobuf::rp_wcdma_update* wcdma_full_scan_;
  const ::rf_phreaker::protobuf::rp_wcdma_update* wcdma_sweep_;
  const ::rf_phreaker::protobuf::rp_lte_update* lte_full_scan_;
  const ::rf_phreaker::protobuf::rp_lte_update* lte_sweep_;
  const ::rf_phreaker::protobuf::rp_power_spectrum* power_spectrum_;
  const ::rf_phreaker::protobuf::rp_iq_data* iq_data_;
}* rp_update_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* rp_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_message_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_frequency_path_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_frequency_path_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_device_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_device_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_satellite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_satellite_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_gps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_gps_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_base_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_plmn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_plmn_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_raw_layer_3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_raw_layer_3_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_gsm_utran_neighbor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_gsm_utran_neighbor_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_pcid_group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_pcid_group_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_gsm_eutran_neighbor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_gsm_eutran_neighbor_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_gsm_si1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_gsm_si1_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_gsm_si2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_gsm_si2_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_gsm_si2_bis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_gsm_si2_bis_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_gsm_si2_ter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_gsm_si2_ter_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_gsm_si2_quater_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_gsm_si2_quater_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_gsm_selection_parameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_gsm_selection_parameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_gsm_si3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_gsm_si3_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_gsm_si4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_gsm_si4_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_gsm_layer_3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_gsm_layer_3_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_gsm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_gsm_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_gsm_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_gsm_update_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_wcdma_utran_neighbor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_wcdma_utran_neighbor_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_wcdma_gsm_neighbor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_wcdma_gsm_neighbor_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_wcdma_mib_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_wcdma_mib_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_wcdma_sib1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_wcdma_sib1_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_wcdma_sib3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_wcdma_sib3_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_wcdma_sib4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_wcdma_sib4_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_wcdma_sib11_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_wcdma_sib11_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_wcdma_sib11_bis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_wcdma_sib11_bis_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_wcdma_layer_3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_wcdma_layer_3_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_wcdma_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_wcdma_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_wcdma_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_wcdma_update_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_scheduling_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_scheduling_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_sib1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_sib1_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_cell_reselection_serving_freq_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_cell_reselection_serving_freq_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_s_search_v920_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_s_search_v920_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_sib3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_sib3_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_physical_cellid_range_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_physical_cellid_range_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_neighbor_cell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_neighbor_cell_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_sib4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_sib4_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_inter_freq_carrier_freq_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_inter_freq_carrier_freq_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_sib5_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_sib5_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_carrier_freq_utra_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_carrier_freq_utra_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_sib6_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_sib6_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_carrier_freqs_geran_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_carrier_freqs_geran_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_geran_common_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_geran_common_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_carrier_freqs_info_geran_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_carrier_freqs_info_geran_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_sib7_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_sib7_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_neighbor_cells_per_band_class_cdma_2000_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_neighbor_cells_per_band_class_cdma_2000_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_neighbor_cell_cdma_2000_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_neighbor_cell_cdma_2000_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_cell_reselection_parameters_cmda_2000_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_cell_reselection_parameters_cmda_2000_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_sib8_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_sib8_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_layer_3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_layer_3_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_lte_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_lte_update_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_power_spectrum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_power_spectrum_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_power_adjustment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_power_adjustment_reflection_ = NULL;
const ::google::protobuf::Descriptor* rp_iq_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rp_iq_data_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* rp_status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* rp_operating_band_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* rp_device_communication_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* rp_band_indicator_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* rp_duplex_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* rp_utran_bandwidth_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* rp_eutran_bandwidth_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* rp_lte_sib_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* rp_lte_band_class_cdma_2000_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rf_5fphreaker_2eproto() {
  protobuf_AddDesc_rf_5fphreaker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rf_phreaker.proto");
  GOOGLE_CHECK(file != NULL);
  rp_update_descriptor_ = file->message_type(0);
  static const int rp_update_offsets_[13] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(rp_update_default_oneof_instance_, log_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(rp_update_default_oneof_instance_, msg_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(rp_update_default_oneof_instance_, device_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(rp_update_default_oneof_instance_, gps_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(rp_update_default_oneof_instance_, gsm_full_scan_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(rp_update_default_oneof_instance_, gsm_sweep_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(rp_update_default_oneof_instance_, wcdma_full_scan_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(rp_update_default_oneof_instance_, wcdma_sweep_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(rp_update_default_oneof_instance_, lte_full_scan_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(rp_update_default_oneof_instance_, lte_sweep_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(rp_update_default_oneof_instance_, power_spectrum_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(rp_update_default_oneof_instance_, iq_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_update, update_),
  };
  rp_update_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_update_descriptor_,
      rp_update::default_instance_,
      rp_update_offsets_,
      -1,
      -1,
      -1,
      rp_update_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_update, _oneof_case_[0]),
      sizeof(rp_update),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_update, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_update, _is_default_instance_));
  rp_log_descriptor_ = file->message_type(1);
  static const int rp_log_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_log, msg_),
  };
  rp_log_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_log_descriptor_,
      rp_log::default_instance_,
      rp_log_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_log),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_log, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_log, _is_default_instance_));
  rp_message_descriptor_ = file->message_type(2);
  static const int rp_message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_message, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_message, msg_),
  };
  rp_message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_message_descriptor_,
      rp_message::default_instance_,
      rp_message_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_message, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_message, _is_default_instance_));
  rp_frequency_path_descriptor_ = file->message_type(3);
  static const int rp_frequency_path_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_frequency_path, low_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_frequency_path, high_freq_),
  };
  rp_frequency_path_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_frequency_path_descriptor_,
      rp_frequency_path::default_instance_,
      rp_frequency_path_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_frequency_path),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_frequency_path, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_frequency_path, _is_default_instance_));
  rp_device_info_descriptor_ = file->message_type(4);
  static const int rp_device_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_device_info, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_device_info, device_communication_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_device_info, frequency_correction_calibration_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_device_info, rf_calibration_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_device_info, frequency_paths_),
  };
  rp_device_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_device_info_descriptor_,
      rp_device_info::default_instance_,
      rp_device_info_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_device_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_device_info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_device_info, _is_default_instance_));
  rp_satellite_descriptor_ = file->message_type(5);
  static const int rp_satellite_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_satellite, prn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_satellite, snr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_satellite, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_satellite, azimuth_),
  };
  rp_satellite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_satellite_descriptor_,
      rp_satellite::default_instance_,
      rp_satellite_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_satellite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_satellite, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_satellite, _is_default_instance_));
  rp_gps_descriptor_ = file->message_type(6);
  static const int rp_gps_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, coordinated_universal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, visible_satellites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, tracking_satellites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, dilution_of_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, horizontal_accuracy_meters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, vertical_accuracy_meters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, raw_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, satellites_),
  };
  rp_gps_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_gps_descriptor_,
      rp_gps::default_instance_,
      rp_gps_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_gps),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gps, _is_default_instance_));
  rp_base_descriptor_ = file->message_type(7);
  static const int rp_base_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_base, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_base, collection_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_base, measurement_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_base, measurement_bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_base, measurement_signal_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_base, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_base, status_flags_),
  };
  rp_base_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_base_descriptor_,
      rp_base::default_instance_,
      rp_base_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_base),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_base, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_base, _is_default_instance_));
  rp_plmn_descriptor_ = file->message_type(8);
  static const int rp_plmn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_plmn, mcc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_plmn, mnc_),
  };
  rp_plmn_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_plmn_descriptor_,
      rp_plmn::default_instance_,
      rp_plmn_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_plmn),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_plmn, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_plmn, _is_default_instance_));
  rp_raw_layer_3_descriptor_ = file->message_type(9);
  static const int rp_raw_layer_3_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_raw_layer_3, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_raw_layer_3, unused_bits_),
  };
  rp_raw_layer_3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_raw_layer_3_descriptor_,
      rp_raw_layer_3::default_instance_,
      rp_raw_layer_3_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_raw_layer_3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_raw_layer_3, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_raw_layer_3, _is_default_instance_));
  rp_gsm_utran_neighbor_descriptor_ = file->message_type(10);
  static const int rp_gsm_utran_neighbor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_utran_neighbor, duplexing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_utran_neighbor, arfcn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_utran_neighbor, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_utran_neighbor, scrambling_codes_),
  };
  rp_gsm_utran_neighbor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_gsm_utran_neighbor_descriptor_,
      rp_gsm_utran_neighbor::default_instance_,
      rp_gsm_utran_neighbor_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_gsm_utran_neighbor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_utran_neighbor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_utran_neighbor, _is_default_instance_));
  rp_pcid_group_descriptor_ = file->message_type(11);
  static const int rp_pcid_group_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_pcid_group, pcids_),
  };
  rp_pcid_group_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_pcid_group_descriptor_,
      rp_pcid_group::default_instance_,
      rp_pcid_group_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_pcid_group),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_pcid_group, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_pcid_group, _is_default_instance_));
  rp_gsm_eutran_neighbor_descriptor_ = file->message_type(12);
  static const int rp_gsm_eutran_neighbor_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_eutran_neighbor, earfcn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_eutran_neighbor, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_eutran_neighbor, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_eutran_neighbor, threshold_high_db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_eutran_neighbor, threshold_low_db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_eutran_neighbor, qrxlevmin_db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_eutran_neighbor, pcids_allowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_eutran_neighbor, pcids_not_allowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_eutran_neighbor, pcids_same_tracking_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_eutran_neighbor, pcids_different_tracking_area_),
  };
  rp_gsm_eutran_neighbor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_gsm_eutran_neighbor_descriptor_,
      rp_gsm_eutran_neighbor::default_instance_,
      rp_gsm_eutran_neighbor_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_gsm_eutran_neighbor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_eutran_neighbor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_eutran_neighbor, _is_default_instance_));
  rp_gsm_si1_descriptor_ = file->message_type(13);
  static const int rp_gsm_si1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si1, band_indicator_),
  };
  rp_gsm_si1_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_gsm_si1_descriptor_,
      rp_gsm_si1::default_instance_,
      rp_gsm_si1_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_gsm_si1),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si1, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si1, _is_default_instance_));
  rp_gsm_si2_descriptor_ = file->message_type(14);
  static const int rp_gsm_si2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2, bcch_neighbors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2, extension_indication_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2, bcch_allocation_indication_),
  };
  rp_gsm_si2_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_gsm_si2_descriptor_,
      rp_gsm_si2::default_instance_,
      rp_gsm_si2_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_gsm_si2),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2, _is_default_instance_));
  rp_gsm_si2_bis_descriptor_ = file->message_type(15);
  static const int rp_gsm_si2_bis_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_bis, extended_bcch_neighbors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_bis, extension_indication_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_bis, bcch_allocation_indication_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_bis, rest_octet_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_bis, rest_octet_count_),
  };
  rp_gsm_si2_bis_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_gsm_si2_bis_descriptor_,
      rp_gsm_si2_bis::default_instance_,
      rp_gsm_si2_bis_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_gsm_si2_bis),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_bis, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_bis, _is_default_instance_));
  rp_gsm_si2_ter_descriptor_ = file->message_type(16);
  static const int rp_gsm_si2_ter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_ter, extended_bcch_neighbors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_ter, gsm_bcch_allocation_indication_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_ter, bcch_neighbors_multiband_reporting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_ter, utran_neighbors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_ter, rest_octet_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_ter, rest_octet_count_),
  };
  rp_gsm_si2_ter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_gsm_si2_ter_descriptor_,
      rp_gsm_si2_ter::default_instance_,
      rp_gsm_si2_ter_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_gsm_si2_ter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_ter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_ter, _is_default_instance_));
  rp_gsm_si2_quater_descriptor_ = file->message_type(17);
  static const int rp_gsm_si2_quater_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_quater, gsm_bcch_allocation_indication_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_quater, p3g_bcch_allocation_indication_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_quater, utran_neighbor_cell_index_start_3g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_quater, utran_neighbor_cell_absolute_index_start_emr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_quater, utran_neighbors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_quater, eutran_neighbors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_quater, rest_octet_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_quater, rest_octet_count_),
  };
  rp_gsm_si2_quater_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_gsm_si2_quater_descriptor_,
      rp_gsm_si2_quater::default_instance_,
      rp_gsm_si2_quater_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_gsm_si2_quater),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_quater, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si2_quater, _is_default_instance_));
  rp_gsm_selection_parameters_descriptor_ = file->message_type(18);
  static const int rp_gsm_selection_parameters_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_selection_parameters, cbq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_selection_parameters, cell_reselect_offset_db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_selection_parameters, temporary_offset_db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_selection_parameters, penalty_time_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_selection_parameters, subtract_reselect_cell_offset_ignore_temp_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_selection_parameters, apply_infinity_offset_),
  };
  rp_gsm_selection_parameters_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_gsm_selection_parameters_descriptor_,
      rp_gsm_selection_parameters::default_instance_,
      rp_gsm_selection_parameters_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_gsm_selection_parameters),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_selection_parameters, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_selection_parameters, _is_default_instance_));
  rp_gsm_si3_descriptor_ = file->message_type(19);
  static const int rp_gsm_si3_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si3, plmn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si3, location_area_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si3, cell_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si3, cell_reselect_hysteresis_db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si3, selection_parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si3, bs_ag_blks_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si3, is_2ter_present_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si3, is_2quater_present_),
  };
  rp_gsm_si3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_gsm_si3_descriptor_,
      rp_gsm_si3::default_instance_,
      rp_gsm_si3_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_gsm_si3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si3, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si3, _is_default_instance_));
  rp_gsm_si4_descriptor_ = file->message_type(20);
  static const int rp_gsm_si4_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si4, plmn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si4, location_area_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si4, cell_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si4, cell_reselect_hysteresis_db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si4, selection_parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si4, is_cbch_present_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si4, have_additional_param_in_si7_si8_),
  };
  rp_gsm_si4_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_gsm_si4_descriptor_,
      rp_gsm_si4::default_instance_,
      rp_gsm_si4_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_gsm_si4),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si4, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_si4, _is_default_instance_));
  rp_gsm_layer_3_descriptor_ = file->message_type(21);
  static const int rp_gsm_layer_3_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_layer_3, raw_layer_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_layer_3, si1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_layer_3, si2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_layer_3, si2_bis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_layer_3, si2_ter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_layer_3, si2_quater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_layer_3, si3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_layer_3, si4_),
  };
  rp_gsm_layer_3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_gsm_layer_3_descriptor_,
      rp_gsm_layer_3::default_instance_,
      rp_gsm_layer_3_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_gsm_layer_3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_layer_3, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_layer_3, _is_default_instance_));
  rp_gsm_descriptor_ = file->message_type(22);
  static const int rp_gsm_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm, arfcn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm, operating_band_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm, bsic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm, tdma_frame_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm, bcch_signal_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm, ctoi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm, layer_3_),
  };
  rp_gsm_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_gsm_descriptor_,
      rp_gsm::default_instance_,
      rp_gsm_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_gsm),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm, _is_default_instance_));
  rp_gsm_update_descriptor_ = file->message_type(23);
  static const int rp_gsm_update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_update, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_update, gsm_),
  };
  rp_gsm_update_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_gsm_update_descriptor_,
      rp_gsm_update::default_instance_,
      rp_gsm_update_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_gsm_update),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_update, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_gsm_update, _is_default_instance_));
  rp_wcdma_utran_neighbor_descriptor_ = file->message_type(24);
  static const int rp_wcdma_utran_neighbor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_utran_neighbor, uarfcn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_utran_neighbor, cpich_),
  };
  rp_wcdma_utran_neighbor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_wcdma_utran_neighbor_descriptor_,
      rp_wcdma_utran_neighbor::default_instance_,
      rp_wcdma_utran_neighbor_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_wcdma_utran_neighbor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_utran_neighbor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_utran_neighbor, _is_default_instance_));
  rp_wcdma_gsm_neighbor_descriptor_ = file->message_type(25);
  static const int rp_wcdma_gsm_neighbor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_gsm_neighbor, bsic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_gsm_neighbor, band_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_gsm_neighbor, arfcn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_gsm_neighbor, qrx_lev_min_),
  };
  rp_wcdma_gsm_neighbor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_wcdma_gsm_neighbor_descriptor_,
      rp_wcdma_gsm_neighbor::default_instance_,
      rp_wcdma_gsm_neighbor_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_wcdma_gsm_neighbor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_gsm_neighbor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_gsm_neighbor, _is_default_instance_));
  rp_wcdma_mib_descriptor_ = file->message_type(26);
  static const int rp_wcdma_mib_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_mib, plmn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_mib, multiple_plmns_),
  };
  rp_wcdma_mib_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_wcdma_mib_descriptor_,
      rp_wcdma_mib::default_instance_,
      rp_wcdma_mib_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_wcdma_mib),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_mib, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_mib, _is_default_instance_));
  rp_wcdma_sib1_descriptor_ = file->message_type(27);
  static const int rp_wcdma_sib1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib1, lac_),
  };
  rp_wcdma_sib1_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_wcdma_sib1_descriptor_,
      rp_wcdma_sib1::default_instance_,
      rp_wcdma_sib1_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_wcdma_sib1),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib1, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib1, _is_default_instance_));
  rp_wcdma_sib3_descriptor_ = file->message_type(28);
  static const int rp_wcdma_sib3_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib3, cid_),
  };
  rp_wcdma_sib3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_wcdma_sib3_descriptor_,
      rp_wcdma_sib3::default_instance_,
      rp_wcdma_sib3_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_wcdma_sib3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib3, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib3, _is_default_instance_));
  rp_wcdma_sib4_descriptor_ = file->message_type(29);
  static const int rp_wcdma_sib4_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib4, cid_),
  };
  rp_wcdma_sib4_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_wcdma_sib4_descriptor_,
      rp_wcdma_sib4::default_instance_,
      rp_wcdma_sib4_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_wcdma_sib4),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib4, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib4, _is_default_instance_));
  rp_wcdma_sib11_descriptor_ = file->message_type(30);
  static const int rp_wcdma_sib11_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib11, utran_intra_neighbor_cpichs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib11, utran_inter_neighbors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib11, gsm_inter_neighbors_),
  };
  rp_wcdma_sib11_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_wcdma_sib11_descriptor_,
      rp_wcdma_sib11::default_instance_,
      rp_wcdma_sib11_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_wcdma_sib11),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib11, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib11, _is_default_instance_));
  rp_wcdma_sib11_bis_descriptor_ = file->message_type(31);
  static const int rp_wcdma_sib11_bis_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib11_bis, utran_intra_neighbor_cpichs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib11_bis, utran_inter_neighbors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib11_bis, gsm_inter_neighbors_),
  };
  rp_wcdma_sib11_bis_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_wcdma_sib11_bis_descriptor_,
      rp_wcdma_sib11_bis::default_instance_,
      rp_wcdma_sib11_bis_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_wcdma_sib11_bis),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib11_bis, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_sib11_bis, _is_default_instance_));
  rp_wcdma_layer_3_descriptor_ = file->message_type(32);
  static const int rp_wcdma_layer_3_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_layer_3, raw_layer_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_layer_3, mib_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_layer_3, sib1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_layer_3, sib3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_layer_3, sib4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_layer_3, sib11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_layer_3, sib11_bis_),
  };
  rp_wcdma_layer_3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_wcdma_layer_3_descriptor_,
      rp_wcdma_layer_3::default_instance_,
      rp_wcdma_layer_3_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_wcdma_layer_3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_layer_3, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_layer_3, _is_default_instance_));
  rp_wcdma_descriptor_ = file->message_type(33);
  static const int rp_wcdma_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma, uarfcn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma, operating_band_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma, cpich_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma, ecio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma, rscp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma, layer_3_),
  };
  rp_wcdma_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_wcdma_descriptor_,
      rp_wcdma::default_instance_,
      rp_wcdma_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_wcdma),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma, _is_default_instance_));
  rp_wcdma_update_descriptor_ = file->message_type(34);
  static const int rp_wcdma_update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_update, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_update, wcdma_),
  };
  rp_wcdma_update_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_wcdma_update_descriptor_,
      rp_wcdma_update::default_instance_,
      rp_wcdma_update_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_wcdma_update),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_update, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_wcdma_update, _is_default_instance_));
  rp_lte_scheduling_info_descriptor_ = file->message_type(35);
  static const int rp_lte_scheduling_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_scheduling_info, periodicity_in_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_scheduling_info, sibs_),
  };
  rp_lte_scheduling_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_scheduling_info_descriptor_,
      rp_lte_scheduling_info::default_instance_,
      rp_lte_scheduling_info_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_scheduling_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_scheduling_info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_scheduling_info, _is_default_instance_));
  rp_lte_sib1_descriptor_ = file->message_type(36);
  static const int rp_lte_sib1_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib1, multiple_plmns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib1, tac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib1, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib1, scheduling_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib1, si_window_length_ms_),
  };
  rp_lte_sib1_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_sib1_descriptor_,
      rp_lte_sib1::default_instance_,
      rp_lte_sib1_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_sib1),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib1, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib1, _is_default_instance_));
  rp_lte_cell_reselection_serving_freq_info_descriptor_ = file->message_type(37);
  static const int rp_lte_cell_reselection_serving_freq_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_cell_reselection_serving_freq_info, s_non_intra_search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_cell_reselection_serving_freq_info, threshold_serving_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_cell_reselection_serving_freq_info, cell_reselection_priority_),
  };
  rp_lte_cell_reselection_serving_freq_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_cell_reselection_serving_freq_info_descriptor_,
      rp_lte_cell_reselection_serving_freq_info::default_instance_,
      rp_lte_cell_reselection_serving_freq_info_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_cell_reselection_serving_freq_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_cell_reselection_serving_freq_info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_cell_reselection_serving_freq_info, _is_default_instance_));
  rp_lte_s_search_v920_descriptor_ = file->message_type(38);
  static const int rp_lte_s_search_v920_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_s_search_v920, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_s_search_v920, q_),
  };
  rp_lte_s_search_v920_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_s_search_v920_descriptor_,
      rp_lte_s_search_v920::default_instance_,
      rp_lte_s_search_v920_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_s_search_v920),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_s_search_v920, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_s_search_v920, _is_default_instance_));
  rp_lte_sib3_descriptor_ = file->message_type(39);
  static const int rp_lte_sib3_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib3, cell_reselection_serving_freq_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib3, intra_freq_cell_reselection_info_s_intra_search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib3, s_intra_search_v920_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib3, s_non_intra_search_v920_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib3, threshold_serving_low_q_),
  };
  rp_lte_sib3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_sib3_descriptor_,
      rp_lte_sib3::default_instance_,
      rp_lte_sib3_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_sib3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib3, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib3, _is_default_instance_));
  rp_lte_physical_cellid_range_descriptor_ = file->message_type(40);
  static const int rp_lte_physical_cellid_range_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_physical_cellid_range, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_physical_cellid_range, range_),
  };
  rp_lte_physical_cellid_range_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_physical_cellid_range_descriptor_,
      rp_lte_physical_cellid_range::default_instance_,
      rp_lte_physical_cellid_range_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_physical_cellid_range),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_physical_cellid_range, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_physical_cellid_range, _is_default_instance_));
  rp_lte_neighbor_cell_descriptor_ = file->message_type(41);
  static const int rp_lte_neighbor_cell_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_neighbor_cell, physical_cell_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_neighbor_cell, q_offset_cell_),
  };
  rp_lte_neighbor_cell_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_neighbor_cell_descriptor_,
      rp_lte_neighbor_cell::default_instance_,
      rp_lte_neighbor_cell_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_neighbor_cell),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_neighbor_cell, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_neighbor_cell, _is_default_instance_));
  rp_lte_sib4_descriptor_ = file->message_type(42);
  static const int rp_lte_sib4_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib4, intra_freq_neighbor_cell_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib4, intra_freq_black_cell_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib4, csg_physical_cellid_range_),
  };
  rp_lte_sib4_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_sib4_descriptor_,
      rp_lte_sib4::default_instance_,
      rp_lte_sib4_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_sib4),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib4, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib4, _is_default_instance_));
  rp_lte_inter_freq_carrier_freq_info_descriptor_ = file->message_type(43);
  static const int rp_lte_inter_freq_carrier_freq_info_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_inter_freq_carrier_freq_info, downlink_arfcn_value_eutra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_inter_freq_carrier_freq_info, q_rx_lev_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_inter_freq_carrier_freq_info, q_offset_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_inter_freq_carrier_freq_info, allowed_measurement_bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_inter_freq_carrier_freq_info, presence_antenna_port_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_inter_freq_carrier_freq_info, threshold_x_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_inter_freq_carrier_freq_info, threshold_x_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_inter_freq_carrier_freq_info, threshold_x_high_q_r9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_inter_freq_carrier_freq_info, threshold_x_low_q_r9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_inter_freq_carrier_freq_info, cell_reselection_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_inter_freq_carrier_freq_info, inter_freq_neighbor_cell_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_inter_freq_carrier_freq_info, inter_freq_black_cell_list_),
  };
  rp_lte_inter_freq_carrier_freq_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_inter_freq_carrier_freq_info_descriptor_,
      rp_lte_inter_freq_carrier_freq_info::default_instance_,
      rp_lte_inter_freq_carrier_freq_info_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_inter_freq_carrier_freq_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_inter_freq_carrier_freq_info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_inter_freq_carrier_freq_info, _is_default_instance_));
  rp_lte_sib5_descriptor_ = file->message_type(44);
  static const int rp_lte_sib5_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib5, inter_freq_carrier_info_list_),
  };
  rp_lte_sib5_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_sib5_descriptor_,
      rp_lte_sib5::default_instance_,
      rp_lte_sib5_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_sib5),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib5, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib5, _is_default_instance_));
  rp_lte_carrier_freq_utra_descriptor_ = file->message_type(45);
  static const int rp_lte_carrier_freq_utra_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_carrier_freq_utra, arfcn_value_utra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_carrier_freq_utra, threshold_x_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_carrier_freq_utra, threshold_x_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_carrier_freq_utra, threshold_x_low_q_r9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_carrier_freq_utra, threshold_x_high_q_r9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_carrier_freq_utra, cell_reselection_priority_),
  };
  rp_lte_carrier_freq_utra_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_carrier_freq_utra_descriptor_,
      rp_lte_carrier_freq_utra::default_instance_,
      rp_lte_carrier_freq_utra_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_carrier_freq_utra),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_carrier_freq_utra, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_carrier_freq_utra, _is_default_instance_));
  rp_lte_sib6_descriptor_ = file->message_type(46);
  static const int rp_lte_sib6_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib6, carrier_freq_list_utra_fdd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib6, carrier_freq_list_utra_tdd_),
  };
  rp_lte_sib6_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_sib6_descriptor_,
      rp_lte_sib6::default_instance_,
      rp_lte_sib6_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_sib6),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib6, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib6, _is_default_instance_));
  rp_lte_carrier_freqs_geran_descriptor_ = file->message_type(47);
  static const int rp_lte_carrier_freqs_geran_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_carrier_freqs_geran, band_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_carrier_freqs_geran, arfcns_),
  };
  rp_lte_carrier_freqs_geran_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_carrier_freqs_geran_descriptor_,
      rp_lte_carrier_freqs_geran::default_instance_,
      rp_lte_carrier_freqs_geran_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_carrier_freqs_geran),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_carrier_freqs_geran, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_carrier_freqs_geran, _is_default_instance_));
  rp_lte_geran_common_info_descriptor_ = file->message_type(48);
  static const int rp_lte_geran_common_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_geran_common_info, cell_reselection_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_geran_common_info, threshold_x_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_geran_common_info, threshold_x_low_),
  };
  rp_lte_geran_common_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_geran_common_info_descriptor_,
      rp_lte_geran_common_info::default_instance_,
      rp_lte_geran_common_info_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_geran_common_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_geran_common_info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_geran_common_info, _is_default_instance_));
  rp_lte_carrier_freqs_info_geran_descriptor_ = file->message_type(49);
  static const int rp_lte_carrier_freqs_info_geran_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_carrier_freqs_info_geran, carrier_freqs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_carrier_freqs_info_geran, common_info_),
  };
  rp_lte_carrier_freqs_info_geran_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_carrier_freqs_info_geran_descriptor_,
      rp_lte_carrier_freqs_info_geran::default_instance_,
      rp_lte_carrier_freqs_info_geran_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_carrier_freqs_info_geran),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_carrier_freqs_info_geran, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_carrier_freqs_info_geran, _is_default_instance_));
  rp_lte_sib7_descriptor_ = file->message_type(50);
  static const int rp_lte_sib7_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib7, carrier_freqs_info_list_geran_),
  };
  rp_lte_sib7_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_sib7_descriptor_,
      rp_lte_sib7::default_instance_,
      rp_lte_sib7_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_sib7),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib7, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib7, _is_default_instance_));
  rp_lte_neighbor_cells_per_band_class_cdma_2000_descriptor_ = file->message_type(51);
  static const int rp_lte_neighbor_cells_per_band_class_cdma_2000_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_neighbor_cells_per_band_class_cdma_2000, arfcn_value_cdma_2000_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_neighbor_cells_per_band_class_cdma_2000, physical_cell_ids_),
  };
  rp_lte_neighbor_cells_per_band_class_cdma_2000_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_neighbor_cells_per_band_class_cdma_2000_descriptor_,
      rp_lte_neighbor_cells_per_band_class_cdma_2000::default_instance_,
      rp_lte_neighbor_cells_per_band_class_cdma_2000_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_neighbor_cells_per_band_class_cdma_2000),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_neighbor_cells_per_band_class_cdma_2000, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_neighbor_cells_per_band_class_cdma_2000, _is_default_instance_));
  rp_lte_neighbor_cell_cdma_2000_descriptor_ = file->message_type(52);
  static const int rp_lte_neighbor_cell_cdma_2000_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_neighbor_cell_cdma_2000, band_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_neighbor_cell_cdma_2000, neighbor_cells_per_freq_list_),
  };
  rp_lte_neighbor_cell_cdma_2000_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_neighbor_cell_cdma_2000_descriptor_,
      rp_lte_neighbor_cell_cdma_2000::default_instance_,
      rp_lte_neighbor_cell_cdma_2000_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_neighbor_cell_cdma_2000),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_neighbor_cell_cdma_2000, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_neighbor_cell_cdma_2000, _is_default_instance_));
  rp_lte_cell_reselection_parameters_cmda_2000_descriptor_ = file->message_type(53);
  static const int rp_lte_cell_reselection_parameters_cmda_2000_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_cell_reselection_parameters_cmda_2000, neighbor_cell_list_),
  };
  rp_lte_cell_reselection_parameters_cmda_2000_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_cell_reselection_parameters_cmda_2000_descriptor_,
      rp_lte_cell_reselection_parameters_cmda_2000::default_instance_,
      rp_lte_cell_reselection_parameters_cmda_2000_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_cell_reselection_parameters_cmda_2000),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_cell_reselection_parameters_cmda_2000, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_cell_reselection_parameters_cmda_2000, _is_default_instance_));
  rp_lte_sib8_descriptor_ = file->message_type(54);
  static const int rp_lte_sib8_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib8, parameters_hrpd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib8, parameters_1xrtt_),
  };
  rp_lte_sib8_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_sib8_descriptor_,
      rp_lte_sib8::default_instance_,
      rp_lte_sib8_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_sib8),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib8, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_sib8, _is_default_instance_));
  rp_lte_layer_3_descriptor_ = file->message_type(55);
  static const int rp_lte_layer_3_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_layer_3, raw_layer_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_layer_3, sib1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_layer_3, sib3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_layer_3, sib4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_layer_3, sib5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_layer_3, sib6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_layer_3, sib7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_layer_3, sib8_),
  };
  rp_lte_layer_3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_layer_3_descriptor_,
      rp_lte_layer_3::default_instance_,
      rp_lte_layer_3_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_layer_3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_layer_3, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_layer_3, _is_default_instance_));
  rp_lte_descriptor_ = file->message_type(56);
  static const int rp_lte_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, earfcn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, operating_band_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, physical_cell_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, rsrp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, rsrq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, rssi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, psch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, psch_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, ssch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, ssch_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, sync_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, cyclic_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, num_antenna_ports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, downlink_bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, frame_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, layer_3_),
  };
  rp_lte_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_descriptor_,
      rp_lte::default_instance_,
      rp_lte_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte, _is_default_instance_));
  rp_lte_update_descriptor_ = file->message_type(57);
  static const int rp_lte_update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_update, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_update, lte_),
  };
  rp_lte_update_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_lte_update_descriptor_,
      rp_lte_update::default_instance_,
      rp_lte_update_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_lte_update),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_update, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_lte_update, _is_default_instance_));
  rp_power_spectrum_descriptor_ = file->message_type(58);
  static const int rp_power_spectrum_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_spectrum, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_spectrum, dwell_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_spectrum, sampling_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_spectrum, start_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_spectrum, end_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_spectrum, span_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_spectrum, window_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_spectrum, num_windows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_spectrum, bin_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_spectrum, step_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_spectrum, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_spectrum, power_),
  };
  rp_power_spectrum_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_power_spectrum_descriptor_,
      rp_power_spectrum::default_instance_,
      rp_power_spectrum_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_power_spectrum),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_spectrum, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_spectrum, _is_default_instance_));
  rp_power_adjustment_descriptor_ = file->message_type(59);
  static const int rp_power_adjustment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_adjustment, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_adjustment, step_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_adjustment, power_),
  };
  rp_power_adjustment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_power_adjustment_descriptor_,
      rp_power_adjustment::default_instance_,
      rp_power_adjustment_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_power_adjustment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_adjustment, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_power_adjustment, _is_default_instance_));
  rp_iq_data_descriptor_ = file->message_type(60);
  static const int rp_iq_data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_iq_data, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_iq_data, power_adjustment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_iq_data, sampling_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_iq_data, dwell_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_iq_data, samples_),
  };
  rp_iq_data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rp_iq_data_descriptor_,
      rp_iq_data::default_instance_,
      rp_iq_data_offsets_,
      -1,
      -1,
      -1,
      sizeof(rp_iq_data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_iq_data, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rp_iq_data, _is_default_instance_));
  rp_status_descriptor_ = file->enum_type(0);
  rp_operating_band_descriptor_ = file->enum_type(1);
  rp_device_communication_descriptor_ = file->enum_type(2);
  rp_band_indicator_type_descriptor_ = file->enum_type(3);
  rp_duplex_type_descriptor_ = file->enum_type(4);
  rp_utran_bandwidth_type_descriptor_ = file->enum_type(5);
  rp_eutran_bandwidth_type_descriptor_ = file->enum_type(6);
  rp_lte_sib_type_descriptor_ = file->enum_type(7);
  rp_lte_band_class_cdma_2000_type_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rf_5fphreaker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_update_descriptor_, &rp_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_log_descriptor_, &rp_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_message_descriptor_, &rp_message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_frequency_path_descriptor_, &rp_frequency_path::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_device_info_descriptor_, &rp_device_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_satellite_descriptor_, &rp_satellite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_gps_descriptor_, &rp_gps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_base_descriptor_, &rp_base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_plmn_descriptor_, &rp_plmn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_raw_layer_3_descriptor_, &rp_raw_layer_3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_gsm_utran_neighbor_descriptor_, &rp_gsm_utran_neighbor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_pcid_group_descriptor_, &rp_pcid_group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_gsm_eutran_neighbor_descriptor_, &rp_gsm_eutran_neighbor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_gsm_si1_descriptor_, &rp_gsm_si1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_gsm_si2_descriptor_, &rp_gsm_si2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_gsm_si2_bis_descriptor_, &rp_gsm_si2_bis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_gsm_si2_ter_descriptor_, &rp_gsm_si2_ter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_gsm_si2_quater_descriptor_, &rp_gsm_si2_quater::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_gsm_selection_parameters_descriptor_, &rp_gsm_selection_parameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_gsm_si3_descriptor_, &rp_gsm_si3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_gsm_si4_descriptor_, &rp_gsm_si4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_gsm_layer_3_descriptor_, &rp_gsm_layer_3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_gsm_descriptor_, &rp_gsm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_gsm_update_descriptor_, &rp_gsm_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_wcdma_utran_neighbor_descriptor_, &rp_wcdma_utran_neighbor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_wcdma_gsm_neighbor_descriptor_, &rp_wcdma_gsm_neighbor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_wcdma_mib_descriptor_, &rp_wcdma_mib::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_wcdma_sib1_descriptor_, &rp_wcdma_sib1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_wcdma_sib3_descriptor_, &rp_wcdma_sib3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_wcdma_sib4_descriptor_, &rp_wcdma_sib4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_wcdma_sib11_descriptor_, &rp_wcdma_sib11::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_wcdma_sib11_bis_descriptor_, &rp_wcdma_sib11_bis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_wcdma_layer_3_descriptor_, &rp_wcdma_layer_3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_wcdma_descriptor_, &rp_wcdma::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_wcdma_update_descriptor_, &rp_wcdma_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_scheduling_info_descriptor_, &rp_lte_scheduling_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_sib1_descriptor_, &rp_lte_sib1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_cell_reselection_serving_freq_info_descriptor_, &rp_lte_cell_reselection_serving_freq_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_s_search_v920_descriptor_, &rp_lte_s_search_v920::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_sib3_descriptor_, &rp_lte_sib3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_physical_cellid_range_descriptor_, &rp_lte_physical_cellid_range::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_neighbor_cell_descriptor_, &rp_lte_neighbor_cell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_sib4_descriptor_, &rp_lte_sib4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_inter_freq_carrier_freq_info_descriptor_, &rp_lte_inter_freq_carrier_freq_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_sib5_descriptor_, &rp_lte_sib5::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_carrier_freq_utra_descriptor_, &rp_lte_carrier_freq_utra::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_sib6_descriptor_, &rp_lte_sib6::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_carrier_freqs_geran_descriptor_, &rp_lte_carrier_freqs_geran::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_geran_common_info_descriptor_, &rp_lte_geran_common_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_carrier_freqs_info_geran_descriptor_, &rp_lte_carrier_freqs_info_geran::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_sib7_descriptor_, &rp_lte_sib7::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_neighbor_cells_per_band_class_cdma_2000_descriptor_, &rp_lte_neighbor_cells_per_band_class_cdma_2000::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_neighbor_cell_cdma_2000_descriptor_, &rp_lte_neighbor_cell_cdma_2000::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_cell_reselection_parameters_cmda_2000_descriptor_, &rp_lte_cell_reselection_parameters_cmda_2000::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_sib8_descriptor_, &rp_lte_sib8::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_layer_3_descriptor_, &rp_lte_layer_3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_descriptor_, &rp_lte::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_lte_update_descriptor_, &rp_lte_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_power_spectrum_descriptor_, &rp_power_spectrum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_power_adjustment_descriptor_, &rp_power_adjustment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rp_iq_data_descriptor_, &rp_iq_data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rf_5fphreaker_2eproto() {
  delete rp_update::default_instance_;
  delete rp_update_default_oneof_instance_;
  delete rp_update_reflection_;
  delete rp_log::default_instance_;
  delete rp_log_reflection_;
  delete rp_message::default_instance_;
  delete rp_message_reflection_;
  delete rp_frequency_path::default_instance_;
  delete rp_frequency_path_reflection_;
  delete rp_device_info::default_instance_;
  delete rp_device_info_reflection_;
  delete rp_satellite::default_instance_;
  delete rp_satellite_reflection_;
  delete rp_gps::default_instance_;
  delete rp_gps_reflection_;
  delete rp_base::default_instance_;
  delete rp_base_reflection_;
  delete rp_plmn::default_instance_;
  delete rp_plmn_reflection_;
  delete rp_raw_layer_3::default_instance_;
  delete rp_raw_layer_3_reflection_;
  delete rp_gsm_utran_neighbor::default_instance_;
  delete rp_gsm_utran_neighbor_reflection_;
  delete rp_pcid_group::default_instance_;
  delete rp_pcid_group_reflection_;
  delete rp_gsm_eutran_neighbor::default_instance_;
  delete rp_gsm_eutran_neighbor_reflection_;
  delete rp_gsm_si1::default_instance_;
  delete rp_gsm_si1_reflection_;
  delete rp_gsm_si2::default_instance_;
  delete rp_gsm_si2_reflection_;
  delete rp_gsm_si2_bis::default_instance_;
  delete rp_gsm_si2_bis_reflection_;
  delete rp_gsm_si2_ter::default_instance_;
  delete rp_gsm_si2_ter_reflection_;
  delete rp_gsm_si2_quater::default_instance_;
  delete rp_gsm_si2_quater_reflection_;
  delete rp_gsm_selection_parameters::default_instance_;
  delete rp_gsm_selection_parameters_reflection_;
  delete rp_gsm_si3::default_instance_;
  delete rp_gsm_si3_reflection_;
  delete rp_gsm_si4::default_instance_;
  delete rp_gsm_si4_reflection_;
  delete rp_gsm_layer_3::default_instance_;
  delete rp_gsm_layer_3_reflection_;
  delete rp_gsm::default_instance_;
  delete rp_gsm_reflection_;
  delete rp_gsm_update::default_instance_;
  delete rp_gsm_update_reflection_;
  delete rp_wcdma_utran_neighbor::default_instance_;
  delete rp_wcdma_utran_neighbor_reflection_;
  delete rp_wcdma_gsm_neighbor::default_instance_;
  delete rp_wcdma_gsm_neighbor_reflection_;
  delete rp_wcdma_mib::default_instance_;
  delete rp_wcdma_mib_reflection_;
  delete rp_wcdma_sib1::default_instance_;
  delete rp_wcdma_sib1_reflection_;
  delete rp_wcdma_sib3::default_instance_;
  delete rp_wcdma_sib3_reflection_;
  delete rp_wcdma_sib4::default_instance_;
  delete rp_wcdma_sib4_reflection_;
  delete rp_wcdma_sib11::default_instance_;
  delete rp_wcdma_sib11_reflection_;
  delete rp_wcdma_sib11_bis::default_instance_;
  delete rp_wcdma_sib11_bis_reflection_;
  delete rp_wcdma_layer_3::default_instance_;
  delete rp_wcdma_layer_3_reflection_;
  delete rp_wcdma::default_instance_;
  delete rp_wcdma_reflection_;
  delete rp_wcdma_update::default_instance_;
  delete rp_wcdma_update_reflection_;
  delete rp_lte_scheduling_info::default_instance_;
  delete rp_lte_scheduling_info_reflection_;
  delete rp_lte_sib1::default_instance_;
  delete rp_lte_sib1_reflection_;
  delete rp_lte_cell_reselection_serving_freq_info::default_instance_;
  delete rp_lte_cell_reselection_serving_freq_info_reflection_;
  delete rp_lte_s_search_v920::default_instance_;
  delete rp_lte_s_search_v920_reflection_;
  delete rp_lte_sib3::default_instance_;
  delete rp_lte_sib3_reflection_;
  delete rp_lte_physical_cellid_range::default_instance_;
  delete rp_lte_physical_cellid_range_reflection_;
  delete rp_lte_neighbor_cell::default_instance_;
  delete rp_lte_neighbor_cell_reflection_;
  delete rp_lte_sib4::default_instance_;
  delete rp_lte_sib4_reflection_;
  delete rp_lte_inter_freq_carrier_freq_info::default_instance_;
  delete rp_lte_inter_freq_carrier_freq_info_reflection_;
  delete rp_lte_sib5::default_instance_;
  delete rp_lte_sib5_reflection_;
  delete rp_lte_carrier_freq_utra::default_instance_;
  delete rp_lte_carrier_freq_utra_reflection_;
  delete rp_lte_sib6::default_instance_;
  delete rp_lte_sib6_reflection_;
  delete rp_lte_carrier_freqs_geran::default_instance_;
  delete rp_lte_carrier_freqs_geran_reflection_;
  delete rp_lte_geran_common_info::default_instance_;
  delete rp_lte_geran_common_info_reflection_;
  delete rp_lte_carrier_freqs_info_geran::default_instance_;
  delete rp_lte_carrier_freqs_info_geran_reflection_;
  delete rp_lte_sib7::default_instance_;
  delete rp_lte_sib7_reflection_;
  delete rp_lte_neighbor_cells_per_band_class_cdma_2000::default_instance_;
  delete rp_lte_neighbor_cells_per_band_class_cdma_2000_reflection_;
  delete rp_lte_neighbor_cell_cdma_2000::default_instance_;
  delete rp_lte_neighbor_cell_cdma_2000_reflection_;
  delete rp_lte_cell_reselection_parameters_cmda_2000::default_instance_;
  delete rp_lte_cell_reselection_parameters_cmda_2000_reflection_;
  delete rp_lte_sib8::default_instance_;
  delete rp_lte_sib8_reflection_;
  delete rp_lte_layer_3::default_instance_;
  delete rp_lte_layer_3_reflection_;
  delete rp_lte::default_instance_;
  delete rp_lte_reflection_;
  delete rp_lte_update::default_instance_;
  delete rp_lte_update_reflection_;
  delete rp_power_spectrum::default_instance_;
  delete rp_power_spectrum_reflection_;
  delete rp_power_adjustment::default_instance_;
  delete rp_power_adjustment_reflection_;
  delete rp_iq_data::default_instance_;
  delete rp_iq_data_reflection_;
}

void protobuf_AddDesc_rf_5fphreaker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021rf_phreaker.proto\022\024rf_phreaker.protobu"
    "f\"\300\005\n\trp_update\022+\n\003log\030\001 \001(\0132\034.rf_phreak"
    "er.protobuf.rp_logH\000\022/\n\003msg\030\002 \001(\0132 .rf_p"
    "hreaker.protobuf.rp_messageH\000\0226\n\006device\030"
    "\003 \001(\0132$.rf_phreaker.protobuf.rp_device_i"
    "nfoH\000\022+\n\003gps\030\004 \001(\0132\034.rf_phreaker.protobu"
    "f.rp_gpsH\000\022<\n\rgsm_full_scan\030\005 \001(\0132#.rf_p"
    "hreaker.protobuf.rp_gsm_updateH\000\0228\n\tgsm_"
    "sweep\030\006 \001(\0132#.rf_phreaker.protobuf.rp_gs"
    "m_updateH\000\022@\n\017wcdma_full_scan\030\007 \001(\0132%.rf"
    "_phreaker.protobuf.rp_wcdma_updateH\000\022<\n\013"
    "wcdma_sweep\030\010 \001(\0132%.rf_phreaker.protobuf"
    ".rp_wcdma_updateH\000\022<\n\rlte_full_scan\030\t \001("
    "\0132#.rf_phreaker.protobuf.rp_lte_updateH\000"
    "\0228\n\tlte_sweep\030\n \001(\0132#.rf_phreaker.protob"
    "uf.rp_lte_updateH\000\022A\n\016power_spectrum\030\013 \001"
    "(\0132\'.rf_phreaker.protobuf.rp_power_spect"
    "rumH\000\0223\n\007iq_data\030\014 \001(\0132 .rf_phreaker.pro"
    "tobuf.rp_iq_dataH\000B\010\n\006update\"\025\n\006rp_log\022\013"
    "\n\003msg\030\001 \001(\t\"J\n\nrp_message\022/\n\006status\030\001 \001("
    "\0162\037.rf_phreaker.protobuf.rp_status\022\013\n\003ms"
    "g\030\002 \001(\t\"8\n\021rp_frequency_path\022\020\n\010low_freq"
    "\030\001 \001(\003\022\021\n\thigh_freq\030\002 \001(\003\"\373\001\n\016rp_device_"
    "info\022\016\n\006serial\030\001 \001(\t\022K\n\024device_communica"
    "tion\030\002 \001(\0162-.rf_phreaker.protobuf.rp_dev"
    "ice_communication\022-\n%frequency_correctio"
    "n_calibration_date\030\003 \001(\003\022\033\n\023rf_calibrati"
    "on_date\030\004 \001(\003\022@\n\017frequency_paths\030\005 \003(\0132\'"
    ".rf_phreaker.protobuf.rp_frequency_path\""
    "L\n\014rp_satellite\022\013\n\003prn\030\001 \001(\005\022\013\n\003snr\030\002 \001("
    "\001\022\021\n\televation\030\003 \001(\001\022\017\n\007azimuth\030\004 \001(\001\"\211\003"
    "\n\006rp_gps\022\016\n\006serial\030\001 \001(\t\022\014\n\004lock\030\002 \001(\010\022\""
    "\n\032coordinated_universal_time\030\003 \001(\003\022\032\n\022vi"
    "sible_satellites\030\004 \001(\005\022\033\n\023tracking_satel"
    "lites\030\005 \001(\005\022\020\n\010latitude\030\006 \001(\001\022\021\n\tlongitu"
    "de\030\007 \001(\001\022\020\n\010altitude\030\010 \001(\001\022\r\n\005angle\030\t \001("
    "\001\022\r\n\005speed\030\n \001(\001\022\035\n\025dilution_of_precisio"
    "n\030\013 \001(\001\022\"\n\032horizontal_accuracy_meters\030\014 "
    "\001(\001\022 \n\030vertical_accuracy_meters\030\r \001(\001\022\022\n"
    "\nraw_status\030\016 \001(\003\0226\n\nsatellites\030\017 \003(\0132\"."
    "rf_phreaker.protobuf.rp_satellite\"\267\001\n\007rp"
    "_base\022\016\n\006serial\030\001 \001(\t\022\030\n\020collection_roun"
    "d\030\002 \001(\003\022\035\n\025measurement_frequency\030\003 \001(\003\022\035"
    "\n\025measurement_bandwidth\030\004 \001(\005\022 \n\030measure"
    "ment_signal_level\030\005 \001(\001\022\014\n\004time\030\006 \001(\003\022\024\n"
    "\014status_flags\030\007 \001(\005\"#\n\007rp_plmn\022\013\n\003mcc\030\001 "
    "\001(\t\022\013\n\003mnc\030\002 \001(\t\"4\n\016rp_raw_layer_3\022\r\n\005by"
    "tes\030\001 \001(\014\022\023\n\013unused_bits\030\002 \001(\005\"\277\001\n\025rp_gs"
    "m_utran_neighbor\0227\n\tduplexing\030\001 \001(\0162$.rf"
    "_phreaker.protobuf.rp_duplex_type\022\r\n\005arf"
    "cn\030\002 \001(\005\022@\n\tbandwidth\030\003 \001(\0162-.rf_phreake"
    "r.protobuf.rp_utran_bandwidth_type\022\034\n\020sc"
    "rambling_codes\030\004 \003(\005B\002\020\001\"\"\n\rrp_pcid_grou"
    "p\022\021\n\005pcids\030\001 \003(\005B\002\020\001\"\327\003\n\026rp_gsm_eutran_n"
    "eighbor\022\016\n\006earfcn\030\001 \001(\005\022A\n\tbandwidth\030\002 \001"
    "(\0162..rf_phreaker.protobuf.rp_eutran_band"
    "width_type\022\020\n\010priority\030\003 \001(\005\022\031\n\021threshol"
    "d_high_db\030\004 \001(\005\022\030\n\020threshold_low_db\030\005 \001("
    "\005\022\024\n\014qrxlevmin_db\030\006 \001(\005\022:\n\rpcids_allowed"
    "\030\007 \001(\0132#.rf_phreaker.protobuf.rp_pcid_gr"
    "oup\022>\n\021pcids_not_allowed\030\010 \001(\0132#.rf_phre"
    "aker.protobuf.rp_pcid_group\022E\n\030pcids_sam"
    "e_tracking_area\030\t \003(\0132#.rf_phreaker.prot"
    "obuf.rp_pcid_group\022J\n\035pcids_different_tr"
    "acking_area\030\n \003(\0132#.rf_phreaker.protobuf"
    ".rp_pcid_group\"R\n\nrp_gsm_si1\022D\n\016band_ind"
    "icator\030\002 \001(\0162,.rf_phreaker.protobuf.rp_b"
    "and_indicator_type\"j\n\nrp_gsm_si2\022\032\n\016bcch"
    "_neighbors\030\002 \003(\005B\002\020\001\022\034\n\024extension_indica"
    "tion\030\003 \001(\010\022\"\n\032bcch_allocation_indication"
    "\030\004 \001(\005\"\253\001\n\016rp_gsm_si2_bis\022#\n\027extended_bc"
    "ch_neighbors\030\002 \003(\005B\002\020\001\022\034\n\024extension_indi"
    "cation\030\003 \001(\010\022\"\n\032bcch_allocation_indicati"
    "on\030\004 \001(\005\022\030\n\020rest_octet_index\030\005 \001(\005\022\030\n\020re"
    "st_octet_count\030\006 \001(\005\"\203\002\n\016rp_gsm_si2_ter\022"
    "#\n\027extended_bcch_neighbors\030\002 \003(\005B\002\020\001\022&\n\036"
    "gsm_bcch_allocation_indication\030\003 \001(\005\022*\n\""
    "bcch_neighbors_multiband_reporting\030\004 \001(\005"
    "\022D\n\017utran_neighbors\030\005 \003(\0132+.rf_phreaker."
    "protobuf.rp_gsm_utran_neighbor\022\030\n\020rest_o"
    "ctet_index\030\006 \001(\005\022\030\n\020rest_octet_count\030\007 \001"
    "(\005\"\207\003\n\021rp_gsm_si2_quater\022&\n\036gsm_bcch_all"
    "ocation_indication\030\002 \001(\005\022&\n\036p3g_bcch_all"
    "ocation_indication\030\003 \001(\005\022*\n\"utran_neighb"
    "or_cell_index_start_3g\030\004 \001(\005\0224\n,utran_ne"
    "ighbor_cell_absolute_index_start_emr\030\005 \001"
    "(\005\022D\n\017utran_neighbors\030\006 \003(\0132+.rf_phreake"
    "r.protobuf.rp_gsm_utran_neighbor\022F\n\020eutr"
    "an_neighbors\030\007 \003(\0132,.rf_phreaker.protobu"
    "f.rp_gsm_eutran_neighbor\022\030\n\020rest_octet_i"
    "ndex\030\010 \001(\005\022\030\n\020rest_octet_count\030\t \001(\005\"\337\001\n"
    "\033rp_gsm_selection_parameters\022\013\n\003cbq\030\001 \001("
    "\005\022\037\n\027cell_reselect_offset_db\030\002 \001(\005\022\033\n\023te"
    "mporary_offset_db\030\003 \001(\005\022\034\n\024penalty_time_"
    "seconds\030\004 \001(\005\0228\n0subtract_reselect_cell_"
    "offset_ignore_temp_offset\030\005 \001(\010\022\035\n\025apply"
    "_infinity_offset\030\006 \001(\010\"\251\002\n\nrp_gsm_si3\022+\n"
    "\004plmn\030\002 \001(\0132\035.rf_phreaker.protobuf.rp_pl"
    "mn\022\032\n\022location_area_code\030\003 \001(\005\022\017\n\007cell_i"
    "d\030\004 \001(\005\022#\n\033cell_reselect_hysteresis_db\030\005"
    " \001(\005\022O\n\024selection_parameters\030\006 \001(\01321.rf_"
    "phreaker.protobuf.rp_gsm_selection_param"
    "eters\022\026\n\016bs_ag_blks_res\030\007 \001(\005\022\027\n\017is_2ter"
    "_present\030\010 \001(\010\022\032\n\022is_2quater_present\030\t \001"
    "(\010\"\237\002\n\nrp_gsm_si4\022+\n\004plmn\030\002 \001(\0132\035.rf_phr"
    "eaker.protobuf.rp_plmn\022\032\n\022location_area_"
    "code\030\003 \001(\005\022\017\n\007cell_id\030\004 \001(\005\022#\n\033cell_rese"
    "lect_hysteresis_db\030\005 \001(\005\022O\n\024selection_pa"
    "rameters\030\006 \001(\01321.rf_phreaker.protobuf.rp"
    "_gsm_selection_parameters\022\027\n\017is_cbch_pre"
    "sent\030\007 \001(\010\022(\n have_additional_param_in_s"
    "i7_si8\030\010 \001(\010\"\262\003\n\016rp_gsm_layer_3\0229\n\013raw_l"
    "ayer_3\030\001 \003(\0132$.rf_phreaker.protobuf.rp_r"
    "aw_layer_3\022-\n\003si1\030\002 \001(\0132 .rf_phreaker.pr"
    "otobuf.rp_gsm_si1\022-\n\003si2\030\003 \001(\0132 .rf_phre"
    "aker.protobuf.rp_gsm_si2\0225\n\007si2_bis\030\004 \001("
    "\0132$.rf_phreaker.protobuf.rp_gsm_si2_bis\022"
    "5\n\007si2_ter\030\005 \001(\0132$.rf_phreaker.protobuf."
    "rp_gsm_si2_ter\022;\n\nsi2_quater\030\006 \001(\0132\'.rf_"
    "phreaker.protobuf.rp_gsm_si2_quater\022-\n\003s"
    "i3\030\007 \001(\0132 .rf_phreaker.protobuf.rp_gsm_s"
    "i3\022-\n\003si4\030\010 \001(\0132 .rf_phreaker.protobuf.r"
    "p_gsm_si4\"\216\002\n\006rp_gsm\022+\n\004base\030\001 \001(\0132\035.rf_"
    "phreaker.protobuf.rp_base\022\r\n\005arfcn\030\002 \001(\005"
    "\022\?\n\016operating_band\030\003 \001(\0162\'.rf_phreaker.p"
    "rotobuf.rp_operating_band\022\014\n\004bsic\030\004 \001(\005\022"
    "\031\n\021tdma_frame_number\030\005 \001(\005\022\031\n\021bcch_signa"
    "l_level\030\006 \001(\001\022\014\n\004ctoi\030\007 \001(\001\0225\n\007layer_3\030\010"
    " \001(\0132$.rf_phreaker.protobuf.rp_gsm_layer"
    "_3\"g\n\rrp_gsm_update\022+\n\004base\030\001 \001(\0132\035.rf_p"
    "hreaker.protobuf.rp_base\022)\n\003gsm\030\002 \003(\0132\034."
    "rf_phreaker.protobuf.rp_gsm\"8\n\027rp_wcdma_"
    "utran_neighbor\022\016\n\006uarfcn\030\001 \001(\005\022\r\n\005cpich\030"
    "\002 \001(\005\"\217\001\n\025rp_wcdma_gsm_neighbor\022\014\n\004bsic\030"
    "\001 \001(\005\022D\n\016band_indicator\030\002 \001(\0162,.rf_phrea"
    "ker.protobuf.rp_band_indicator_type\022\r\n\005a"
    "rfcn\030\003 \001(\005\022\023\n\013qrx_lev_min\030\004 \001(\005\"r\n\014rp_wc"
    "dma_mib\022+\n\004plmn\030\002 \001(\0132\035.rf_phreaker.prot"
    "obuf.rp_plmn\0225\n\016multiple_plmns\030\003 \003(\0132\035.r"
    "f_phreaker.protobuf.rp_plmn\"\034\n\rrp_wcdma_"
    "sib1\022\013\n\003lac\030\002 \001(\005\"\034\n\rrp_wcdma_sib3\022\013\n\003ci"
    "d\030\002 \001(\005\"\034\n\rrp_wcdma_sib4\022\013\n\003cid\030\002 \001(\005\"\321\001"
    "\n\016rp_wcdma_sib11\022\'\n\033utran_intra_neighbor"
    "_cpichs\030\002 \003(\005B\002\020\001\022L\n\025utran_inter_neighbo"
    "rs\030\003 \003(\0132-.rf_phreaker.protobuf.rp_wcdma"
    "_utran_neighbor\022H\n\023gsm_inter_neighbors\030\004"
    " \003(\0132+.rf_phreaker.protobuf.rp_wcdma_gsm"
    "_neighbor\"\325\001\n\022rp_wcdma_sib11_bis\022\'\n\033utra"
    "n_intra_neighbor_cpichs\030\002 \003(\005B\002\020\001\022L\n\025utr"
    "an_inter_neighbors\030\003 \003(\0132-.rf_phreaker.p"
    "rotobuf.rp_wcdma_utran_neighbor\022H\n\023gsm_i"
    "nter_neighbors\030\004 \003(\0132+.rf_phreaker.proto"
    "buf.rp_wcdma_gsm_neighbor\"\211\003\n\020rp_wcdma_l"
    "ayer_3\0229\n\013raw_layer_3\030\001 \003(\0132$.rf_phreake"
    "r.protobuf.rp_raw_layer_3\022/\n\003mib\030\002 \001(\0132\""
    ".rf_phreaker.protobuf.rp_wcdma_mib\0221\n\004si"
    "b1\030\003 \001(\0132#.rf_phreaker.protobuf.rp_wcdma"
    "_sib1\0221\n\004sib3\030\004 \001(\0132#.rf_phreaker.protob"
    "uf.rp_wcdma_sib3\0221\n\004sib4\030\005 \001(\0132#.rf_phre"
    "aker.protobuf.rp_wcdma_sib4\0223\n\005sib11\030\006 \001"
    "(\0132$.rf_phreaker.protobuf.rp_wcdma_sib11"
    "\022;\n\tsib11_bis\030\007 \001(\0132(.rf_phreaker.protob"
    "uf.rp_wcdma_sib11_bis\"\354\001\n\010rp_wcdma\022+\n\004ba"
    "se\030\001 \001(\0132\035.rf_phreaker.protobuf.rp_base\022"
    "\016\n\006uarfcn\030\002 \001(\005\022\?\n\016operating_band\030\003 \001(\0162"
    "\'.rf_phreaker.protobuf.rp_operating_band"
    "\022\r\n\005cpich\030\004 \001(\005\022\014\n\004ecio\030\005 \001(\001\022\014\n\004rscp\030\006 "
    "\001(\001\0227\n\007layer_3\030\007 \001(\0132&.rf_phreaker.proto"
    "buf.rp_wcdma_layer_3\"m\n\017rp_wcdma_update\022"
    "+\n\004base\030\001 \001(\0132\035.rf_phreaker.protobuf.rp_"
    "base\022-\n\005wcdma\030\002 \003(\0132\036.rf_phreaker.protob"
    "uf.rp_wcdma\"l\n\026rp_lte_scheduling_info\022\035\n"
    "\025periodicity_in_frames\030\001 \001(\005\0223\n\004sibs\030\003 \003"
    "(\0162%.rf_phreaker.protobuf.rp_lte_sib_typ"
    "e\"\302\001\n\013rp_lte_sib1\0225\n\016multiple_plmns\030\002 \003("
    "\0132\035.rf_phreaker.protobuf.rp_plmn\022\013\n\003tac\030"
    "\003 \001(\005\022\013\n\003cid\030\004 \001(\005\022E\n\017scheduling_info\030\005 "
    "\003(\0132,.rf_phreaker.protobuf.rp_lte_schedu"
    "ling_info\022\033\n\023si_window_length_ms\030\006 \001(\005\"\211"
    "\001\n)rp_lte_cell_reselection_serving_freq_"
    "info\022\032\n\022s_non_intra_search\030\001 \001(\005\022\035\n\025thre"
    "shold_serving_low\030\002 \001(\005\022!\n\031cell_reselect"
    "ion_priority\030\003 \001(\005\",\n\024rp_lte_s_search_v9"
    "20\022\t\n\001p\030\001 \001(\005\022\t\n\001q\030\002 \001(\005\"\352\002\n\013rp_lte_sib3"
    "\022k\n\"cell_reselection_serving_freq_info\030\002"
    " \001(\0132\?.rf_phreaker.protobuf.rp_lte_cell_"
    "reselection_serving_freq_info\0227\n/intra_f"
    "req_cell_reselection_info_s_intra_search"
    "\030\003 \001(\005\022G\n\023s_intra_search_v920\030\004 \001(\0132*.rf"
    "_phreaker.protobuf.rp_lte_s_search_v920\022"
    "K\n\027s_non_intra_search_v920\030\005 \001(\0132*.rf_ph"
    "reaker.protobuf.rp_lte_s_search_v920\022\037\n\027"
    "threshold_serving_low_q\030\006 \001(\005\"<\n\034rp_lte_"
    "physical_cellid_range\022\r\n\005start\030\001 \001(\005\022\r\n\005"
    "range\030\002 \001(\005\"G\n\024rp_lte_neighbor_cell\022\030\n\020p"
    "hysical_cell_id\030\001 \001(\005\022\025\n\rq_offset_cell\030\002"
    " \001(\005\"\217\002\n\013rp_lte_sib4\022Q\n\035intra_freq_neigh"
    "bor_cell_list\030\002 \003(\0132*.rf_phreaker.protob"
    "uf.rp_lte_neighbor_cell\022V\n\032intra_freq_bl"
    "ack_cell_list\030\003 \003(\01322.rf_phreaker.protob"
    "uf.rp_lte_physical_cellid_range\022U\n\031csg_p"
    "hysical_cellid_range\030\004 \001(\01322.rf_phreaker"
    ".protobuf.rp_lte_physical_cellid_range\"\374"
    "\003\n#rp_lte_inter_freq_carrier_freq_info\022\""
    "\n\032downlink_arfcn_value_eutra\030\001 \001(\005\022\024\n\014q_"
    "rx_lev_min\030\002 \001(\005\022\025\n\rq_offset_freq\030\003 \001(\005\022"
    "%\n\035allowed_measurement_bandwidth\030\004 \001(\005\022\037"
    "\n\027presence_antenna_port_1\030\005 \001(\010\022\030\n\020thres"
    "hold_x_high\030\006 \001(\005\022\027\n\017threshold_x_low\030\007 \001"
    "(\005\022\035\n\025threshold_x_high_q_r9\030\010 \001(\005\022\034\n\024thr"
    "eshold_x_low_q_r9\030\t \001(\005\022!\n\031cell_reselect"
    "ion_priority\030\n \001(\005\022Q\n\035inter_freq_neighbo"
    "r_cell_list\030\013 \003(\0132*.rf_phreaker.protobuf"
    ".rp_lte_neighbor_cell\022V\n\032inter_freq_blac"
    "k_cell_list\030\014 \003(\01322.rf_phreaker.protobuf"
    ".rp_lte_physical_cellid_range\"n\n\013rp_lte_"
    "sib5\022_\n\034inter_freq_carrier_info_list\030\002 \003"
    "(\01329.rf_phreaker.protobuf.rp_lte_inter_f"
    "req_carrier_freq_info\"\307\001\n\030rp_lte_carrier"
    "_freq_utra\022\030\n\020arfcn_value_utra\030\001 \001(\005\022\027\n\017"
    "threshold_x_low\030\002 \001(\005\022\030\n\020threshold_x_hig"
    "h\030\003 \001(\005\022\034\n\024threshold_x_low_q_r9\030\004 \001(\005\022\035\n"
    "\025threshold_x_high_q_r9\030\005 \001(\005\022!\n\031cell_res"
    "election_priority\030\006 \001(\005\"\265\001\n\013rp_lte_sib6\022"
    "R\n\032carrier_freq_list_utra_fdd\030\002 \003(\0132..rf"
    "_phreaker.protobuf.rp_lte_carrier_freq_u"
    "tra\022R\n\032carrier_freq_list_utra_tdd\030\003 \003(\0132"
    "..rf_phreaker.protobuf.rp_lte_carrier_fr"
    "eq_utra\"v\n\032rp_lte_carrier_freqs_geran\022D\n"
    "\016band_indicator\030\001 \001(\0162,.rf_phreaker.prot"
    "obuf.rp_band_indicator_type\022\022\n\006arfcns\030\002 "
    "\003(\005B\002\020\001\"p\n\030rp_lte_geran_common_info\022!\n\031c"
    "ell_reselection_priority\030\001 \001(\005\022\030\n\020thresh"
    "old_x_high\030\002 \001(\005\022\027\n\017threshold_x_low\030\003 \001("
    "\005\"\257\001\n\037rp_lte_carrier_freqs_info_geran\022G\n"
    "\rcarrier_freqs\030\001 \001(\01320.rf_phreaker.proto"
    "buf.rp_lte_carrier_freqs_geran\022C\n\013common"
    "_info\030\002 \001(\0132..rf_phreaker.protobuf.rp_lt"
    "e_geran_common_info\"k\n\013rp_lte_sib7\022\\\n\035ca"
    "rrier_freqs_info_list_geran\030\002 \003(\01325.rf_p"
    "hreaker.protobuf.rp_lte_carrier_freqs_in"
    "fo_geran\"n\n.rp_lte_neighbor_cells_per_ba"
    "nd_class_cdma_2000\022\035\n\025arfcn_value_cdma_2"
    "000\030\001 \001(\005\022\035\n\021physical_cell_ids\030\002 \003(\005B\002\020\001"
    "\"\322\001\n\036rp_lte_neighbor_cell_cdma_2000\022D\n\004b"
    "and\030\001 \001(\01626.rf_phreaker.protobuf.rp_lte_"
    "band_class_cdma_2000_type\022j\n\034neighbor_ce"
    "lls_per_freq_list\030\002 \003(\0132D.rf_phreaker.pr"
    "otobuf.rp_lte_neighbor_cells_per_band_cl"
    "ass_cdma_2000\"\200\001\n,rp_lte_cell_reselectio"
    "n_parameters_cmda_2000\022P\n\022neighbor_cell_"
    "list\030\001 \003(\01324.rf_phreaker.protobuf.rp_lte"
    "_neighbor_cell_cdma_2000\"\310\001\n\013rp_lte_sib8"
    "\022[\n\017parameters_hrpd\030\002 \001(\0132B.rf_phreaker."
    "protobuf.rp_lte_cell_reselection_paramet"
    "ers_cmda_2000\022\\\n\020parameters_1xrtt\030\003 \001(\0132"
    "B.rf_phreaker.protobuf.rp_lte_cell_resel"
    "ection_parameters_cmda_2000\"\242\003\n\016rp_lte_l"
    "ayer_3\0229\n\013raw_layer_3\030\001 \003(\0132$.rf_phreake"
    "r.protobuf.rp_raw_layer_3\022/\n\004sib1\030\002 \001(\0132"
    "!.rf_phreaker.protobuf.rp_lte_sib1\022/\n\004si"
    "b3\030\004 \001(\0132!.rf_phreaker.protobuf.rp_lte_s"
    "ib3\022/\n\004sib4\030\005 \001(\0132!.rf_phreaker.protobuf"
    ".rp_lte_sib4\022/\n\004sib5\030\006 \001(\0132!.rf_phreaker"
    ".protobuf.rp_lte_sib5\022/\n\004sib6\030\007 \001(\0132!.rf"
    "_phreaker.protobuf.rp_lte_sib6\022/\n\004sib7\030\010"
    " \001(\0132!.rf_phreaker.protobuf.rp_lte_sib7\022"
    "/\n\004sib8\030\t \001(\0132!.rf_phreaker.protobuf.rp_"
    "lte_sib8\"\311\003\n\006rp_lte\022+\n\004base\030\001 \001(\0132\035.rf_p"
    "hreaker.protobuf.rp_base\022\016\n\006earfcn\030\002 \001(\005"
    "\022\?\n\016operating_band\030\003 \001(\0162\'.rf_phreaker.p"
    "rotobuf.rp_operating_band\022\030\n\020physical_ce"
    "ll_id\030\004 \001(\005\022\014\n\004rsrp\030\005 \001(\001\022\014\n\004rsrq\030\006 \001(\001\022"
    "\014\n\004rssi\030\007 \001(\001\022\017\n\007psch_id\030\010 \001(\005\022\024\n\014psch_q"
    "uality\030\t \001(\001\022\017\n\007ssch_id\030\n \001(\005\022\024\n\014ssch_qu"
    "ality\030\013 \001(\001\022\024\n\014sync_quality\030\014 \001(\001\022\025\n\rcyc"
    "lic_prefix\030\r \001(\005\022\031\n\021num_antenna_ports\030\016 "
    "\001(\005\022\032\n\022downlink_bandwidth\030\017 \001(\005\022\024\n\014frame"
    "_number\030\020 \001(\005\0225\n\007layer_3\030\021 \001(\0132$.rf_phre"
    "aker.protobuf.rp_lte_layer_3\"g\n\rrp_lte_u"
    "pdate\022+\n\004base\030\001 \001(\0132\035.rf_phreaker.protob"
    "uf.rp_base\022)\n\003lte\030\002 \003(\0132\034.rf_phreaker.pr"
    "otobuf.rp_lte\"\241\002\n\021rp_power_spectrum\022+\n\004b"
    "ase\030\001 \001(\0132\035.rf_phreaker.protobuf.rp_base"
    "\022\022\n\ndwell_time\030\002 \001(\003\022\025\n\rsampling_rate\030\003 "
    "\001(\003\022\027\n\017start_frequency\030\004 \001(\003\022\025\n\rend_freq"
    "uency\030\005 \001(\003\022\014\n\004span\030\006 \001(\003\022\025\n\rwindow_leng"
    "th\030\007 \001(\005\022\023\n\013num_windows\030\010 \001(\005\022\020\n\010bin_siz"
    "e\030\t \001(\001\022\021\n\tstep_size\030\n \001(\001\022\022\n\nidentifier"
    "\030\013 \001(\003\022\021\n\005power\030\014 \003(\001B\002\020\001\"r\n\023rp_power_ad"
    "justment\0225\n\004path\030\001 \001(\0132\'.rf_phreaker.pro"
    "tobuf.rp_frequency_path\022\021\n\tstep_size\030\002 \001"
    "(\003\022\021\n\005power\030\003 \003(\001B\002\020\001\"\276\001\n\nrp_iq_data\022+\n\004"
    "base\030\001 \001(\0132\035.rf_phreaker.protobuf.rp_bas"
    "e\022C\n\020power_adjustment\030\002 \001(\0132).rf_phreake"
    "r.protobuf.rp_power_adjustment\022\025\n\rsampli"
    "ng_rate\030\003 \001(\003\022\022\n\ndwell_time\030\004 \001(\003\022\023\n\007sam"
    "ples\030\005 \003(\002B\002\020\001*\334\004\n\trp_status\022\020\n\014RP_STATU"
    "S_OK\020\000\022\035\n\031RP_STATUS_NOT_INITIALIZED\020\001\022\037\n"
    "\033RP_STATUS_INVALID_PARAMETER\020\002\022!\n\035RP_STA"
    "TUS_COMMUNICATION_ERROR\020\003\022 \n\034RP_STATUS_S"
    "CANNER_INIT_ERROR\020\004\022!\n\035RP_STATUS_HARDWAR"
    "E_INFO_ERROR\020\005\022\030\n\024RP_STATUS_MISC_ERROR\020\006"
    "\022\033\n\027RP_STATUS_FILE_IO_ERROR\020\007\022\034\n\030RP_STAT"
    "US_BLADE_RF_ERROR\020\010\022\027\n\023RP_STATUS_IPP_ERR"
    "OR\020\t\022\032\n\026RP_STATUS_FILTER_ERROR\020\n\022 \n\034RP_S"
    "TATUS_GSM_ANALYSIS_ERROR\020\013\022!\n\035RP_STATUS_"
    "UMTS_ANALYSIS_ERROR\020\014\022 \n\034RP_STATUS_LTE_A"
    "NALYSIS_ERROR\020\r\022\036\n\032RP_STATUS_PROCESSING_"
    "ERROR\020\016\022%\n!RP_STATUS_GPS_COMMUNICATION_E"
    "RROR\020\017\022#\n\037RP_STATUS_RF_PHREAKER_API_ERRO"
    "R\020\020\022\033\n\027RP_STATUS_GENERIC_ERROR\020\021\022\033\n\027RP_S"
    "TATUS_UNKNOWN_ERROR\020\022*\232\020\n\021rp_operating_b"
    "and\022\032\n\026OPERATING_BAND_UNKNOWN\020\000\022\r\n\tGSM_T"
    "_380\020\000\022\r\n\tGSM_T_410\020\001\022\013\n\007GSM_450\020\002\022\013\n\007GS"
    "M_480\020\003\022\013\n\007GSM_710\020\004\022\013\n\007GSM_750\020\005\022\r\n\tGSM"
    "_T_810\020\006\022\013\n\007GSM_850\020\007\022\r\n\tGSM_P_900\020\010\022\r\n\t"
    "GSM_E_900\020\t\022\r\n\tGSM_R_900\020\n\022\016\n\nGSM_ER_900"
    "\020\013\022\r\n\tGSM_T_900\020\014\022\020\n\014GSM_DCS_1800\020\r\022\020\n\014G"
    "SM_PCS_1900\020\016\022\031\n\025UMTS_OPERATING_BAND_1\020\017"
    "\022\031\n\025UMTS_OPERATING_BAND_2\020\020\022\031\n\025UMTS_OPER"
    "ATING_BAND_3\020\021\022\031\n\025UMTS_OPERATING_BAND_4\020"
    "\022\022\031\n\025UMTS_OPERATING_BAND_5\020\023\022\031\n\025UMTS_OPE"
    "RATING_BAND_6\020\024\022\031\n\025UMTS_OPERATING_BAND_7"
    "\020\025\022\031\n\025UMTS_OPERATING_BAND_8\020\026\022\031\n\025UMTS_OP"
    "ERATING_BAND_9\020\027\022\032\n\026UMTS_OPERATING_BAND_"
    "10\020\030\022\032\n\026UMTS_OPERATING_BAND_11\020\031\022\032\n\026UMTS"
    "_OPERATING_BAND_12\020\032\022\032\n\026UMTS_OPERATING_B"
    "AND_13\020\033\022\032\n\026UMTS_OPERATING_BAND_14\020\034\022\032\n\026"
    "UMTS_OPERATING_BAND_19\020\035\022\032\n\026UMTS_OPERATI"
    "NG_BAND_20\020\036\022\032\n\026UMTS_OPERATING_BAND_21\020\037"
    "\022\032\n\026UMTS_OPERATING_BAND_22\020 \022\032\n\026UMTS_OPE"
    "RATING_BAND_25\020!\022\032\n\026UMTS_OPERATING_BAND_"
    "26\020\"\022\030\n\024LTE_OPERATING_BAND_1\020#\022\030\n\024LTE_OP"
    "ERATING_BAND_2\020$\022\030\n\024LTE_OPERATING_BAND_3"
    "\020%\022\030\n\024LTE_OPERATING_BAND_4\020&\022\030\n\024LTE_OPER"
    "ATING_BAND_5\020\'\022\030\n\024LTE_OPERATING_BAND_6\020("
    "\022\030\n\024LTE_OPERATING_BAND_7\020)\022\030\n\024LTE_OPERAT"
    "ING_BAND_8\020*\022\030\n\024LTE_OPERATING_BAND_9\020+\022\031"
    "\n\025LTE_OPERATING_BAND_10\020,\022\031\n\025LTE_OPERATI"
    "NG_BAND_11\020-\022\031\n\025LTE_OPERATING_BAND_12\020.\022"
    "\031\n\025LTE_OPERATING_BAND_13\020/\022\031\n\025LTE_OPERAT"
    "ING_BAND_14\0200\022\031\n\025LTE_OPERATING_BAND_17\0201"
    "\022\031\n\025LTE_OPERATING_BAND_18\0202\022\031\n\025LTE_OPERA"
    "TING_BAND_19\0203\022\031\n\025LTE_OPERATING_BAND_20\020"
    "4\022\031\n\025LTE_OPERATING_BAND_21\0205\022\031\n\025LTE_OPER"
    "ATING_BAND_22\0206\022\031\n\025LTE_OPERATING_BAND_23"
    "\0207\022\031\n\025LTE_OPERATING_BAND_24\0208\022\031\n\025LTE_OPE"
    "RATING_BAND_25\0209\022\031\n\025LTE_OPERATING_BAND_2"
    "6\020:\022\031\n\025LTE_OPERATING_BAND_27\020;\022\031\n\025LTE_OP"
    "ERATING_BAND_28\020<\022\031\n\025LTE_OPERATING_BAND_"
    "29\020=\022\031\n\025LTE_OPERATING_BAND_30\020>\022\031\n\025LTE_O"
    "PERATING_BAND_33\020\?\022\031\n\025LTE_OPERATING_BAND"
    "_34\020@\022\031\n\025LTE_OPERATING_BAND_35\020A\022\031\n\025LTE_"
    "OPERATING_BAND_36\020B\022\031\n\025LTE_OPERATING_BAN"
    "D_37\020C\022\031\n\025LTE_OPERATING_BAND_38\020D\022\031\n\025LTE"
    "_OPERATING_BAND_39\020E\022\031\n\025LTE_OPERATING_BA"
    "ND_40\020F\022\031\n\025LTE_OPERATING_BAND_41\020G\022\031\n\025LT"
    "E_OPERATING_BAND_42\020H\022\031\n\025LTE_OPERATING_B"
    "AND_43\020I\022\031\n\025LTE_OPERATING_BAND_44\020J\022\034\n\030F"
    "IRST_GSM_OPERATING_BAND\020\000\022\033\n\027LAST_GSM_OP"
    "ERATING_BAND\020\016\022\035\n\031FIRST_UMTS_OPERATING_B"
    "AND\020\017\022\034\n\030LAST_UMTS_OPERATING_BAND\020\"\022\034\n\030F"
    "IRST_LTE_OPERATING_BAND\020#\022\033\n\027LAST_LTE_OP"
    "ERATING_BAND\020J\032\002\020\001*b\n\027rp_device_communic"
    "ation\022\020\n\014USB_HI_SPEED\020\000\022\023\n\017USB_SUPER_SPE"
    "ED\020\001\022 \n\034UNKNOWN_DEVICE_COMMUNICATION\020\002*a"
    "\n\026rp_band_indicator_type\022\025\n\021dcs_1800_was"
    "_used\020\000\022\025\n\021pcs_1900_was_used\020\001\022\031\n\025unknow"
    "n_band_was_used\020\002*\"\n\016rp_duplex_type\022\007\n\003f"
    "dd\020\000\022\007\n\003tdd\020\001*\313\001\n\027rp_utran_bandwidth_typ"
    "e\022\023\n\017utran_3_84_mcps\020\000\022\023\n\017utran_1_24_mcp"
    "s\020\001\022\020\n\014utran_2_mcps\020\002\022\020\n\014utran_3_mcps\020\003\022"
    "\020\n\014utran_4_mcps\020\004\022\020\n\014utran_5_mcps\020\005\022\020\n\014u"
    "tran_6_mcps\020\006\022\020\n\014utran_7_mcps\020\007\022\026\n\022utran"
    "_default_mcps\020\000\032\002\020\001*\302\001\n\030rp_eutran_bandwi"
    "dth_type\022\031\n\025num_resource_blocks_6\020\000\022\032\n\026n"
    "um_resource_blocks_15\020\001\022\032\n\026num_resource_"
    "blocks_25\020\002\022\032\n\026num_resource_blocks_50\020\003\022"
    "\032\n\026num_resource_blocks_75\020\004\022\033\n\027num_resou"
    "rce_blocks_100\020\005*\264\002\n\017rp_lte_sib_type\022\014\n\010"
    "LTE_SIB1\020\000\022\014\n\010LTE_SIB2\020\001\022\014\n\010LTE_SIB3\020\002\022\014"
    "\n\010LTE_SIB4\020\003\022\014\n\010LTE_SIB5\020\004\022\014\n\010LTE_SIB6\020\005"
    "\022\014\n\010LTE_SIB7\020\006\022\014\n\010LTE_SIB8\020\007\022\014\n\010LTE_SIB9"
    "\020\010\022\r\n\tLTE_SIB10\020\t\022\r\n\tLTE_SIB11\020\n\022\022\n\016LTE_"
    "SIB12_V920\020\013\022\022\n\016LTE_SIB13_V920\020\014\022\023\n\017LTE_"
    "SIB14_V1130\020\r\022\023\n\017LTE_SIB15_V1130\020\016\022\023\n\017LT"
    "E_SIB16_V1130\020\017\022\016\n\nLTE_SPARE2\020\020\022\016\n\nLTE_S"
    "PARE1\020\021*\201\003\n rp_lte_band_class_cdma_2000_"
    "type\022\007\n\003bc0\020\000\022\007\n\003bc1\020\001\022\007\n\003bc2\020\002\022\007\n\003bc3\020\003"
    "\022\007\n\003bc4\020\004\022\007\n\003bc5\020\005\022\007\n\003bc6\020\006\022\007\n\003bc7\020\007\022\007\n\003"
    "bc8\020\010\022\007\n\003bc9\020\t\022\010\n\004bc10\020\n\022\010\n\004bc11\020\013\022\010\n\004bc"
    "12\020\014\022\010\n\004bc13\020\r\022\010\n\004bc14\020\016\022\010\n\004bc15\020\017\022\010\n\004bc"
    "16\020\020\022\010\n\004bc17\020\021\022\r\n\tbc18_v9a0\020\022\022\r\n\tbc19_v9"
    "a0\020\023\022\r\n\tbc20_v9a0\020\024\022\r\n\tbc21_v9a0\020\025\022\013\n\007sp"
    "are10\020\026\022\n\n\006spare9\020\027\022\n\n\006spare8\020\030\022\n\n\006spare"
    "7\020\031\022\n\n\006spare6\020\032\022\n\n\006spare5\020\033\022\n\n\006spare4\020\034\022"
    "\n\n\006spare3\020\035\022\n\n\006spare2\020\036\022\n\n\006spare1\020\037b\006pro"
    "to3", 15923);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rf_phreaker.proto", &protobuf_RegisterTypes);
  rp_update::default_instance_ = new rp_update();
  rp_update_default_oneof_instance_ = new rp_updateOneofInstance();
  rp_log::default_instance_ = new rp_log();
  rp_message::default_instance_ = new rp_message();
  rp_frequency_path::default_instance_ = new rp_frequency_path();
  rp_device_info::default_instance_ = new rp_device_info();
  rp_satellite::default_instance_ = new rp_satellite();
  rp_gps::default_instance_ = new rp_gps();
  rp_base::default_instance_ = new rp_base();
  rp_plmn::default_instance_ = new rp_plmn();
  rp_raw_layer_3::default_instance_ = new rp_raw_layer_3();
  rp_gsm_utran_neighbor::default_instance_ = new rp_gsm_utran_neighbor();
  rp_pcid_group::default_instance_ = new rp_pcid_group();
  rp_gsm_eutran_neighbor::default_instance_ = new rp_gsm_eutran_neighbor();
  rp_gsm_si1::default_instance_ = new rp_gsm_si1();
  rp_gsm_si2::default_instance_ = new rp_gsm_si2();
  rp_gsm_si2_bis::default_instance_ = new rp_gsm_si2_bis();
  rp_gsm_si2_ter::default_instance_ = new rp_gsm_si2_ter();
  rp_gsm_si2_quater::default_instance_ = new rp_gsm_si2_quater();
  rp_gsm_selection_parameters::default_instance_ = new rp_gsm_selection_parameters();
  rp_gsm_si3::default_instance_ = new rp_gsm_si3();
  rp_gsm_si4::default_instance_ = new rp_gsm_si4();
  rp_gsm_layer_3::default_instance_ = new rp_gsm_layer_3();
  rp_gsm::default_instance_ = new rp_gsm();
  rp_gsm_update::default_instance_ = new rp_gsm_update();
  rp_wcdma_utran_neighbor::default_instance_ = new rp_wcdma_utran_neighbor();
  rp_wcdma_gsm_neighbor::default_instance_ = new rp_wcdma_gsm_neighbor();
  rp_wcdma_mib::default_instance_ = new rp_wcdma_mib();
  rp_wcdma_sib1::default_instance_ = new rp_wcdma_sib1();
  rp_wcdma_sib3::default_instance_ = new rp_wcdma_sib3();
  rp_wcdma_sib4::default_instance_ = new rp_wcdma_sib4();
  rp_wcdma_sib11::default_instance_ = new rp_wcdma_sib11();
  rp_wcdma_sib11_bis::default_instance_ = new rp_wcdma_sib11_bis();
  rp_wcdma_layer_3::default_instance_ = new rp_wcdma_layer_3();
  rp_wcdma::default_instance_ = new rp_wcdma();
  rp_wcdma_update::default_instance_ = new rp_wcdma_update();
  rp_lte_scheduling_info::default_instance_ = new rp_lte_scheduling_info();
  rp_lte_sib1::default_instance_ = new rp_lte_sib1();
  rp_lte_cell_reselection_serving_freq_info::default_instance_ = new rp_lte_cell_reselection_serving_freq_info();
  rp_lte_s_search_v920::default_instance_ = new rp_lte_s_search_v920();
  rp_lte_sib3::default_instance_ = new rp_lte_sib3();
  rp_lte_physical_cellid_range::default_instance_ = new rp_lte_physical_cellid_range();
  rp_lte_neighbor_cell::default_instance_ = new rp_lte_neighbor_cell();
  rp_lte_sib4::default_instance_ = new rp_lte_sib4();
  rp_lte_inter_freq_carrier_freq_info::default_instance_ = new rp_lte_inter_freq_carrier_freq_info();
  rp_lte_sib5::default_instance_ = new rp_lte_sib5();
  rp_lte_carrier_freq_utra::default_instance_ = new rp_lte_carrier_freq_utra();
  rp_lte_sib6::default_instance_ = new rp_lte_sib6();
  rp_lte_carrier_freqs_geran::default_instance_ = new rp_lte_carrier_freqs_geran();
  rp_lte_geran_common_info::default_instance_ = new rp_lte_geran_common_info();
  rp_lte_carrier_freqs_info_geran::default_instance_ = new rp_lte_carrier_freqs_info_geran();
  rp_lte_sib7::default_instance_ = new rp_lte_sib7();
  rp_lte_neighbor_cells_per_band_class_cdma_2000::default_instance_ = new rp_lte_neighbor_cells_per_band_class_cdma_2000();
  rp_lte_neighbor_cell_cdma_2000::default_instance_ = new rp_lte_neighbor_cell_cdma_2000();
  rp_lte_cell_reselection_parameters_cmda_2000::default_instance_ = new rp_lte_cell_reselection_parameters_cmda_2000();
  rp_lte_sib8::default_instance_ = new rp_lte_sib8();
  rp_lte_layer_3::default_instance_ = new rp_lte_layer_3();
  rp_lte::default_instance_ = new rp_lte();
  rp_lte_update::default_instance_ = new rp_lte_update();
  rp_power_spectrum::default_instance_ = new rp_power_spectrum();
  rp_power_adjustment::default_instance_ = new rp_power_adjustment();
  rp_iq_data::default_instance_ = new rp_iq_data();
  rp_update::default_instance_->InitAsDefaultInstance();
  rp_log::default_instance_->InitAsDefaultInstance();
  rp_message::default_instance_->InitAsDefaultInstance();
  rp_frequency_path::default_instance_->InitAsDefaultInstance();
  rp_device_info::default_instance_->InitAsDefaultInstance();
  rp_satellite::default_instance_->InitAsDefaultInstance();
  rp_gps::default_instance_->InitAsDefaultInstance();
  rp_base::default_instance_->InitAsDefaultInstance();
  rp_plmn::default_instance_->InitAsDefaultInstance();
  rp_raw_layer_3::default_instance_->InitAsDefaultInstance();
  rp_gsm_utran_neighbor::default_instance_->InitAsDefaultInstance();
  rp_pcid_group::default_instance_->InitAsDefaultInstance();
  rp_gsm_eutran_neighbor::default_instance_->InitAsDefaultInstance();
  rp_gsm_si1::default_instance_->InitAsDefaultInstance();
  rp_gsm_si2::default_instance_->InitAsDefaultInstance();
  rp_gsm_si2_bis::default_instance_->InitAsDefaultInstance();
  rp_gsm_si2_ter::default_instance_->InitAsDefaultInstance();
  rp_gsm_si2_quater::default_instance_->InitAsDefaultInstance();
  rp_gsm_selection_parameters::default_instance_->InitAsDefaultInstance();
  rp_gsm_si3::default_instance_->InitAsDefaultInstance();
  rp_gsm_si4::default_instance_->InitAsDefaultInstance();
  rp_gsm_layer_3::default_instance_->InitAsDefaultInstance();
  rp_gsm::default_instance_->InitAsDefaultInstance();
  rp_gsm_update::default_instance_->InitAsDefaultInstance();
  rp_wcdma_utran_neighbor::default_instance_->InitAsDefaultInstance();
  rp_wcdma_gsm_neighbor::default_instance_->InitAsDefaultInstance();
  rp_wcdma_mib::default_instance_->InitAsDefaultInstance();
  rp_wcdma_sib1::default_instance_->InitAsDefaultInstance();
  rp_wcdma_sib3::default_instance_->InitAsDefaultInstance();
  rp_wcdma_sib4::default_instance_->InitAsDefaultInstance();
  rp_wcdma_sib11::default_instance_->InitAsDefaultInstance();
  rp_wcdma_sib11_bis::default_instance_->InitAsDefaultInstance();
  rp_wcdma_layer_3::default_instance_->InitAsDefaultInstance();
  rp_wcdma::default_instance_->InitAsDefaultInstance();
  rp_wcdma_update::default_instance_->InitAsDefaultInstance();
  rp_lte_scheduling_info::default_instance_->InitAsDefaultInstance();
  rp_lte_sib1::default_instance_->InitAsDefaultInstance();
  rp_lte_cell_reselection_serving_freq_info::default_instance_->InitAsDefaultInstance();
  rp_lte_s_search_v920::default_instance_->InitAsDefaultInstance();
  rp_lte_sib3::default_instance_->InitAsDefaultInstance();
  rp_lte_physical_cellid_range::default_instance_->InitAsDefaultInstance();
  rp_lte_neighbor_cell::default_instance_->InitAsDefaultInstance();
  rp_lte_sib4::default_instance_->InitAsDefaultInstance();
  rp_lte_inter_freq_carrier_freq_info::default_instance_->InitAsDefaultInstance();
  rp_lte_sib5::default_instance_->InitAsDefaultInstance();
  rp_lte_carrier_freq_utra::default_instance_->InitAsDefaultInstance();
  rp_lte_sib6::default_instance_->InitAsDefaultInstance();
  rp_lte_carrier_freqs_geran::default_instance_->InitAsDefaultInstance();
  rp_lte_geran_common_info::default_instance_->InitAsDefaultInstance();
  rp_lte_carrier_freqs_info_geran::default_instance_->InitAsDefaultInstance();
  rp_lte_sib7::default_instance_->InitAsDefaultInstance();
  rp_lte_neighbor_cells_per_band_class_cdma_2000::default_instance_->InitAsDefaultInstance();
  rp_lte_neighbor_cell_cdma_2000::default_instance_->InitAsDefaultInstance();
  rp_lte_cell_reselection_parameters_cmda_2000::default_instance_->InitAsDefaultInstance();
  rp_lte_sib8::default_instance_->InitAsDefaultInstance();
  rp_lte_layer_3::default_instance_->InitAsDefaultInstance();
  rp_lte::default_instance_->InitAsDefaultInstance();
  rp_lte_update::default_instance_->InitAsDefaultInstance();
  rp_power_spectrum::default_instance_->InitAsDefaultInstance();
  rp_power_adjustment::default_instance_->InitAsDefaultInstance();
  rp_iq_data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rf_5fphreaker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rf_5fphreaker_2eproto {
  StaticDescriptorInitializer_rf_5fphreaker_2eproto() {
    protobuf_AddDesc_rf_5fphreaker_2eproto();
  }
} static_descriptor_initializer_rf_5fphreaker_2eproto_;
const ::google::protobuf::EnumDescriptor* rp_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_status_descriptor_;
}
bool rp_status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* rp_operating_band_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_operating_band_descriptor_;
}
bool rp_operating_band_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* rp_device_communication_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_device_communication_descriptor_;
}
bool rp_device_communication_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* rp_band_indicator_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_band_indicator_type_descriptor_;
}
bool rp_band_indicator_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* rp_duplex_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_duplex_type_descriptor_;
}
bool rp_duplex_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* rp_utran_bandwidth_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_utran_bandwidth_type_descriptor_;
}
bool rp_utran_bandwidth_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* rp_eutran_bandwidth_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_eutran_bandwidth_type_descriptor_;
}
bool rp_eutran_bandwidth_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* rp_lte_sib_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_sib_type_descriptor_;
}
bool rp_lte_sib_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* rp_lte_band_class_cdma_2000_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_band_class_cdma_2000_type_descriptor_;
}
bool rp_lte_band_class_cdma_2000_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_update::kLogFieldNumber;
const int rp_update::kMsgFieldNumber;
const int rp_update::kDeviceFieldNumber;
const int rp_update::kGpsFieldNumber;
const int rp_update::kGsmFullScanFieldNumber;
const int rp_update::kGsmSweepFieldNumber;
const int rp_update::kWcdmaFullScanFieldNumber;
const int rp_update::kWcdmaSweepFieldNumber;
const int rp_update::kLteFullScanFieldNumber;
const int rp_update::kLteSweepFieldNumber;
const int rp_update::kPowerSpectrumFieldNumber;
const int rp_update::kIqDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_update::rp_update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_update)
}

void rp_update::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rp_update_default_oneof_instance_->log_ = const_cast< ::rf_phreaker::protobuf::rp_log*>(&::rf_phreaker::protobuf::rp_log::default_instance());
  rp_update_default_oneof_instance_->msg_ = const_cast< ::rf_phreaker::protobuf::rp_message*>(&::rf_phreaker::protobuf::rp_message::default_instance());
  rp_update_default_oneof_instance_->device_ = const_cast< ::rf_phreaker::protobuf::rp_device_info*>(&::rf_phreaker::protobuf::rp_device_info::default_instance());
  rp_update_default_oneof_instance_->gps_ = const_cast< ::rf_phreaker::protobuf::rp_gps*>(&::rf_phreaker::protobuf::rp_gps::default_instance());
  rp_update_default_oneof_instance_->gsm_full_scan_ = const_cast< ::rf_phreaker::protobuf::rp_gsm_update*>(&::rf_phreaker::protobuf::rp_gsm_update::default_instance());
  rp_update_default_oneof_instance_->gsm_sweep_ = const_cast< ::rf_phreaker::protobuf::rp_gsm_update*>(&::rf_phreaker::protobuf::rp_gsm_update::default_instance());
  rp_update_default_oneof_instance_->wcdma_full_scan_ = const_cast< ::rf_phreaker::protobuf::rp_wcdma_update*>(&::rf_phreaker::protobuf::rp_wcdma_update::default_instance());
  rp_update_default_oneof_instance_->wcdma_sweep_ = const_cast< ::rf_phreaker::protobuf::rp_wcdma_update*>(&::rf_phreaker::protobuf::rp_wcdma_update::default_instance());
  rp_update_default_oneof_instance_->lte_full_scan_ = const_cast< ::rf_phreaker::protobuf::rp_lte_update*>(&::rf_phreaker::protobuf::rp_lte_update::default_instance());
  rp_update_default_oneof_instance_->lte_sweep_ = const_cast< ::rf_phreaker::protobuf::rp_lte_update*>(&::rf_phreaker::protobuf::rp_lte_update::default_instance());
  rp_update_default_oneof_instance_->power_spectrum_ = const_cast< ::rf_phreaker::protobuf::rp_power_spectrum*>(&::rf_phreaker::protobuf::rp_power_spectrum::default_instance());
  rp_update_default_oneof_instance_->iq_data_ = const_cast< ::rf_phreaker::protobuf::rp_iq_data*>(&::rf_phreaker::protobuf::rp_iq_data::default_instance());
}

rp_update::rp_update(const rp_update& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_update)
}

void rp_update::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_update();
}

rp_update::~rp_update() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_update)
  SharedDtor();
}

void rp_update::SharedDtor() {
  if (has_update()) {
    clear_update();
  }
  if (this != default_instance_) {
  }
}

void rp_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_update_descriptor_;
}

const rp_update& rp_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_update* rp_update::default_instance_ = NULL;

rp_update* rp_update::New(::google::protobuf::Arena* arena) const {
  rp_update* n = new rp_update;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_update::clear_update() {
  switch(update_case()) {
    case kLog: {
      delete update_.log_;
      break;
    }
    case kMsg: {
      delete update_.msg_;
      break;
    }
    case kDevice: {
      delete update_.device_;
      break;
    }
    case kGps: {
      delete update_.gps_;
      break;
    }
    case kGsmFullScan: {
      delete update_.gsm_full_scan_;
      break;
    }
    case kGsmSweep: {
      delete update_.gsm_sweep_;
      break;
    }
    case kWcdmaFullScan: {
      delete update_.wcdma_full_scan_;
      break;
    }
    case kWcdmaSweep: {
      delete update_.wcdma_sweep_;
      break;
    }
    case kLteFullScan: {
      delete update_.lte_full_scan_;
      break;
    }
    case kLteSweep: {
      delete update_.lte_sweep_;
      break;
    }
    case kPowerSpectrum: {
      delete update_.power_spectrum_;
      break;
    }
    case kIqData: {
      delete update_.iq_data_;
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPDATE_NOT_SET;
}


void rp_update::Clear() {
  clear_update();
}

bool rp_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_update)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_log log = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_message msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_device_info device = 3;
      case 3: {
        if (tag == 26) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gps;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_gps gps = 4;
      case 4: {
        if (tag == 34) {
         parse_gps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_gsm_full_scan;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_gsm_update gsm_full_scan = 5;
      case 5: {
        if (tag == 42) {
         parse_gsm_full_scan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gsm_full_scan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gsm_sweep;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_gsm_update gsm_sweep = 6;
      case 6: {
        if (tag == 50) {
         parse_gsm_sweep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gsm_sweep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_wcdma_full_scan;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_wcdma_update wcdma_full_scan = 7;
      case 7: {
        if (tag == 58) {
         parse_wcdma_full_scan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wcdma_full_scan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_wcdma_sweep;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_wcdma_update wcdma_sweep = 8;
      case 8: {
        if (tag == 66) {
         parse_wcdma_sweep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wcdma_sweep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_lte_full_scan;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_lte_update lte_full_scan = 9;
      case 9: {
        if (tag == 74) {
         parse_lte_full_scan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lte_full_scan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_lte_sweep;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_lte_update lte_sweep = 10;
      case 10: {
        if (tag == 82) {
         parse_lte_sweep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lte_sweep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_power_spectrum;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_power_spectrum power_spectrum = 11;
      case 11: {
        if (tag == 90) {
         parse_power_spectrum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_spectrum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_iq_data;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_iq_data iq_data = 12;
      case 12: {
        if (tag == 98) {
         parse_iq_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iq_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_update)
  return false;
#undef DO_
}

void rp_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_update)
  // optional .rf_phreaker.protobuf.rp_log log = 1;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *update_.log_, output);
  }

  // optional .rf_phreaker.protobuf.rp_message msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *update_.msg_, output);
  }

  // optional .rf_phreaker.protobuf.rp_device_info device = 3;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *update_.device_, output);
  }

  // optional .rf_phreaker.protobuf.rp_gps gps = 4;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *update_.gps_, output);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_update gsm_full_scan = 5;
  if (has_gsm_full_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *update_.gsm_full_scan_, output);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_update gsm_sweep = 6;
  if (has_gsm_sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *update_.gsm_sweep_, output);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_update wcdma_full_scan = 7;
  if (has_wcdma_full_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *update_.wcdma_full_scan_, output);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_update wcdma_sweep = 8;
  if (has_wcdma_sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *update_.wcdma_sweep_, output);
  }

  // optional .rf_phreaker.protobuf.rp_lte_update lte_full_scan = 9;
  if (has_lte_full_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *update_.lte_full_scan_, output);
  }

  // optional .rf_phreaker.protobuf.rp_lte_update lte_sweep = 10;
  if (has_lte_sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *update_.lte_sweep_, output);
  }

  // optional .rf_phreaker.protobuf.rp_power_spectrum power_spectrum = 11;
  if (has_power_spectrum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *update_.power_spectrum_, output);
  }

  // optional .rf_phreaker.protobuf.rp_iq_data iq_data = 12;
  if (has_iq_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *update_.iq_data_, output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_update)
}

::google::protobuf::uint8* rp_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_update)
  // optional .rf_phreaker.protobuf.rp_log log = 1;
  if (has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *update_.log_, target);
  }

  // optional .rf_phreaker.protobuf.rp_message msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *update_.msg_, target);
  }

  // optional .rf_phreaker.protobuf.rp_device_info device = 3;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *update_.device_, target);
  }

  // optional .rf_phreaker.protobuf.rp_gps gps = 4;
  if (has_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *update_.gps_, target);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_update gsm_full_scan = 5;
  if (has_gsm_full_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *update_.gsm_full_scan_, target);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_update gsm_sweep = 6;
  if (has_gsm_sweep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *update_.gsm_sweep_, target);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_update wcdma_full_scan = 7;
  if (has_wcdma_full_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *update_.wcdma_full_scan_, target);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_update wcdma_sweep = 8;
  if (has_wcdma_sweep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *update_.wcdma_sweep_, target);
  }

  // optional .rf_phreaker.protobuf.rp_lte_update lte_full_scan = 9;
  if (has_lte_full_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *update_.lte_full_scan_, target);
  }

  // optional .rf_phreaker.protobuf.rp_lte_update lte_sweep = 10;
  if (has_lte_sweep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *update_.lte_sweep_, target);
  }

  // optional .rf_phreaker.protobuf.rp_power_spectrum power_spectrum = 11;
  if (has_power_spectrum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *update_.power_spectrum_, target);
  }

  // optional .rf_phreaker.protobuf.rp_iq_data iq_data = 12;
  if (has_iq_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *update_.iq_data_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_update)
  return target;
}

int rp_update::ByteSize() const {
  int total_size = 0;

  switch (update_case()) {
    // optional .rf_phreaker.protobuf.rp_log log = 1;
    case kLog: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.log_);
      break;
    }
    // optional .rf_phreaker.protobuf.rp_message msg = 2;
    case kMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.msg_);
      break;
    }
    // optional .rf_phreaker.protobuf.rp_device_info device = 3;
    case kDevice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.device_);
      break;
    }
    // optional .rf_phreaker.protobuf.rp_gps gps = 4;
    case kGps: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.gps_);
      break;
    }
    // optional .rf_phreaker.protobuf.rp_gsm_update gsm_full_scan = 5;
    case kGsmFullScan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.gsm_full_scan_);
      break;
    }
    // optional .rf_phreaker.protobuf.rp_gsm_update gsm_sweep = 6;
    case kGsmSweep: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.gsm_sweep_);
      break;
    }
    // optional .rf_phreaker.protobuf.rp_wcdma_update wcdma_full_scan = 7;
    case kWcdmaFullScan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.wcdma_full_scan_);
      break;
    }
    // optional .rf_phreaker.protobuf.rp_wcdma_update wcdma_sweep = 8;
    case kWcdmaSweep: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.wcdma_sweep_);
      break;
    }
    // optional .rf_phreaker.protobuf.rp_lte_update lte_full_scan = 9;
    case kLteFullScan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.lte_full_scan_);
      break;
    }
    // optional .rf_phreaker.protobuf.rp_lte_update lte_sweep = 10;
    case kLteSweep: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.lte_sweep_);
      break;
    }
    // optional .rf_phreaker.protobuf.rp_power_spectrum power_spectrum = 11;
    case kPowerSpectrum: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.power_spectrum_);
      break;
    }
    // optional .rf_phreaker.protobuf.rp_iq_data iq_data = 12;
    case kIqData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.iq_data_);
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_update::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_update* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_update>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_update::MergeFrom(const rp_update& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.update_case()) {
    case kLog: {
      mutable_log()->::rf_phreaker::protobuf::rp_log::MergeFrom(from.log());
      break;
    }
    case kMsg: {
      mutable_msg()->::rf_phreaker::protobuf::rp_message::MergeFrom(from.msg());
      break;
    }
    case kDevice: {
      mutable_device()->::rf_phreaker::protobuf::rp_device_info::MergeFrom(from.device());
      break;
    }
    case kGps: {
      mutable_gps()->::rf_phreaker::protobuf::rp_gps::MergeFrom(from.gps());
      break;
    }
    case kGsmFullScan: {
      mutable_gsm_full_scan()->::rf_phreaker::protobuf::rp_gsm_update::MergeFrom(from.gsm_full_scan());
      break;
    }
    case kGsmSweep: {
      mutable_gsm_sweep()->::rf_phreaker::protobuf::rp_gsm_update::MergeFrom(from.gsm_sweep());
      break;
    }
    case kWcdmaFullScan: {
      mutable_wcdma_full_scan()->::rf_phreaker::protobuf::rp_wcdma_update::MergeFrom(from.wcdma_full_scan());
      break;
    }
    case kWcdmaSweep: {
      mutable_wcdma_sweep()->::rf_phreaker::protobuf::rp_wcdma_update::MergeFrom(from.wcdma_sweep());
      break;
    }
    case kLteFullScan: {
      mutable_lte_full_scan()->::rf_phreaker::protobuf::rp_lte_update::MergeFrom(from.lte_full_scan());
      break;
    }
    case kLteSweep: {
      mutable_lte_sweep()->::rf_phreaker::protobuf::rp_lte_update::MergeFrom(from.lte_sweep());
      break;
    }
    case kPowerSpectrum: {
      mutable_power_spectrum()->::rf_phreaker::protobuf::rp_power_spectrum::MergeFrom(from.power_spectrum());
      break;
    }
    case kIqData: {
      mutable_iq_data()->::rf_phreaker::protobuf::rp_iq_data::MergeFrom(from.iq_data());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
}

void rp_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_update::CopyFrom(const rp_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_update::IsInitialized() const {

  return true;
}

void rp_update::Swap(rp_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_update::InternalSwap(rp_update* other) {
  std::swap(update_, other->update_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_update_descriptor_;
  metadata.reflection = rp_update_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_update

// optional .rf_phreaker.protobuf.rp_log log = 1;
bool rp_update::has_log() const {
  return update_case() == kLog;
}
void rp_update::set_has_log() {
  _oneof_case_[0] = kLog;
}
void rp_update::clear_log() {
  if (has_log()) {
    delete update_.log_;
    clear_has_update();
  }
}
 const ::rf_phreaker::protobuf::rp_log& rp_update::log() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.log)
  return has_log()
      ? *update_.log_
      : ::rf_phreaker::protobuf::rp_log::default_instance();
}
::rf_phreaker::protobuf::rp_log* rp_update::mutable_log() {
  if (!has_log()) {
    clear_update();
    set_has_log();
    update_.log_ = new ::rf_phreaker::protobuf::rp_log;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.log)
  return update_.log_;
}
::rf_phreaker::protobuf::rp_log* rp_update::release_log() {
  if (has_log()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_log* temp = update_.log_;
    update_.log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void rp_update::set_allocated_log(::rf_phreaker::protobuf::rp_log* log) {
  clear_update();
  if (log) {
    set_has_log();
    update_.log_ = log;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.log)
}

// optional .rf_phreaker.protobuf.rp_message msg = 2;
bool rp_update::has_msg() const {
  return update_case() == kMsg;
}
void rp_update::set_has_msg() {
  _oneof_case_[0] = kMsg;
}
void rp_update::clear_msg() {
  if (has_msg()) {
    delete update_.msg_;
    clear_has_update();
  }
}
 const ::rf_phreaker::protobuf::rp_message& rp_update::msg() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.msg)
  return has_msg()
      ? *update_.msg_
      : ::rf_phreaker::protobuf::rp_message::default_instance();
}
::rf_phreaker::protobuf::rp_message* rp_update::mutable_msg() {
  if (!has_msg()) {
    clear_update();
    set_has_msg();
    update_.msg_ = new ::rf_phreaker::protobuf::rp_message;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.msg)
  return update_.msg_;
}
::rf_phreaker::protobuf::rp_message* rp_update::release_msg() {
  if (has_msg()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_message* temp = update_.msg_;
    update_.msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void rp_update::set_allocated_msg(::rf_phreaker::protobuf::rp_message* msg) {
  clear_update();
  if (msg) {
    set_has_msg();
    update_.msg_ = msg;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.msg)
}

// optional .rf_phreaker.protobuf.rp_device_info device = 3;
bool rp_update::has_device() const {
  return update_case() == kDevice;
}
void rp_update::set_has_device() {
  _oneof_case_[0] = kDevice;
}
void rp_update::clear_device() {
  if (has_device()) {
    delete update_.device_;
    clear_has_update();
  }
}
 const ::rf_phreaker::protobuf::rp_device_info& rp_update::device() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.device)
  return has_device()
      ? *update_.device_
      : ::rf_phreaker::protobuf::rp_device_info::default_instance();
}
::rf_phreaker::protobuf::rp_device_info* rp_update::mutable_device() {
  if (!has_device()) {
    clear_update();
    set_has_device();
    update_.device_ = new ::rf_phreaker::protobuf::rp_device_info;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.device)
  return update_.device_;
}
::rf_phreaker::protobuf::rp_device_info* rp_update::release_device() {
  if (has_device()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_device_info* temp = update_.device_;
    update_.device_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void rp_update::set_allocated_device(::rf_phreaker::protobuf::rp_device_info* device) {
  clear_update();
  if (device) {
    set_has_device();
    update_.device_ = device;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.device)
}

// optional .rf_phreaker.protobuf.rp_gps gps = 4;
bool rp_update::has_gps() const {
  return update_case() == kGps;
}
void rp_update::set_has_gps() {
  _oneof_case_[0] = kGps;
}
void rp_update::clear_gps() {
  if (has_gps()) {
    delete update_.gps_;
    clear_has_update();
  }
}
 const ::rf_phreaker::protobuf::rp_gps& rp_update::gps() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.gps)
  return has_gps()
      ? *update_.gps_
      : ::rf_phreaker::protobuf::rp_gps::default_instance();
}
::rf_phreaker::protobuf::rp_gps* rp_update::mutable_gps() {
  if (!has_gps()) {
    clear_update();
    set_has_gps();
    update_.gps_ = new ::rf_phreaker::protobuf::rp_gps;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.gps)
  return update_.gps_;
}
::rf_phreaker::protobuf::rp_gps* rp_update::release_gps() {
  if (has_gps()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_gps* temp = update_.gps_;
    update_.gps_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void rp_update::set_allocated_gps(::rf_phreaker::protobuf::rp_gps* gps) {
  clear_update();
  if (gps) {
    set_has_gps();
    update_.gps_ = gps;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.gps)
}

// optional .rf_phreaker.protobuf.rp_gsm_update gsm_full_scan = 5;
bool rp_update::has_gsm_full_scan() const {
  return update_case() == kGsmFullScan;
}
void rp_update::set_has_gsm_full_scan() {
  _oneof_case_[0] = kGsmFullScan;
}
void rp_update::clear_gsm_full_scan() {
  if (has_gsm_full_scan()) {
    delete update_.gsm_full_scan_;
    clear_has_update();
  }
}
 const ::rf_phreaker::protobuf::rp_gsm_update& rp_update::gsm_full_scan() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.gsm_full_scan)
  return has_gsm_full_scan()
      ? *update_.gsm_full_scan_
      : ::rf_phreaker::protobuf::rp_gsm_update::default_instance();
}
::rf_phreaker::protobuf::rp_gsm_update* rp_update::mutable_gsm_full_scan() {
  if (!has_gsm_full_scan()) {
    clear_update();
    set_has_gsm_full_scan();
    update_.gsm_full_scan_ = new ::rf_phreaker::protobuf::rp_gsm_update;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.gsm_full_scan)
  return update_.gsm_full_scan_;
}
::rf_phreaker::protobuf::rp_gsm_update* rp_update::release_gsm_full_scan() {
  if (has_gsm_full_scan()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_gsm_update* temp = update_.gsm_full_scan_;
    update_.gsm_full_scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void rp_update::set_allocated_gsm_full_scan(::rf_phreaker::protobuf::rp_gsm_update* gsm_full_scan) {
  clear_update();
  if (gsm_full_scan) {
    set_has_gsm_full_scan();
    update_.gsm_full_scan_ = gsm_full_scan;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.gsm_full_scan)
}

// optional .rf_phreaker.protobuf.rp_gsm_update gsm_sweep = 6;
bool rp_update::has_gsm_sweep() const {
  return update_case() == kGsmSweep;
}
void rp_update::set_has_gsm_sweep() {
  _oneof_case_[0] = kGsmSweep;
}
void rp_update::clear_gsm_sweep() {
  if (has_gsm_sweep()) {
    delete update_.gsm_sweep_;
    clear_has_update();
  }
}
 const ::rf_phreaker::protobuf::rp_gsm_update& rp_update::gsm_sweep() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.gsm_sweep)
  return has_gsm_sweep()
      ? *update_.gsm_sweep_
      : ::rf_phreaker::protobuf::rp_gsm_update::default_instance();
}
::rf_phreaker::protobuf::rp_gsm_update* rp_update::mutable_gsm_sweep() {
  if (!has_gsm_sweep()) {
    clear_update();
    set_has_gsm_sweep();
    update_.gsm_sweep_ = new ::rf_phreaker::protobuf::rp_gsm_update;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.gsm_sweep)
  return update_.gsm_sweep_;
}
::rf_phreaker::protobuf::rp_gsm_update* rp_update::release_gsm_sweep() {
  if (has_gsm_sweep()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_gsm_update* temp = update_.gsm_sweep_;
    update_.gsm_sweep_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void rp_update::set_allocated_gsm_sweep(::rf_phreaker::protobuf::rp_gsm_update* gsm_sweep) {
  clear_update();
  if (gsm_sweep) {
    set_has_gsm_sweep();
    update_.gsm_sweep_ = gsm_sweep;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.gsm_sweep)
}

// optional .rf_phreaker.protobuf.rp_wcdma_update wcdma_full_scan = 7;
bool rp_update::has_wcdma_full_scan() const {
  return update_case() == kWcdmaFullScan;
}
void rp_update::set_has_wcdma_full_scan() {
  _oneof_case_[0] = kWcdmaFullScan;
}
void rp_update::clear_wcdma_full_scan() {
  if (has_wcdma_full_scan()) {
    delete update_.wcdma_full_scan_;
    clear_has_update();
  }
}
 const ::rf_phreaker::protobuf::rp_wcdma_update& rp_update::wcdma_full_scan() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.wcdma_full_scan)
  return has_wcdma_full_scan()
      ? *update_.wcdma_full_scan_
      : ::rf_phreaker::protobuf::rp_wcdma_update::default_instance();
}
::rf_phreaker::protobuf::rp_wcdma_update* rp_update::mutable_wcdma_full_scan() {
  if (!has_wcdma_full_scan()) {
    clear_update();
    set_has_wcdma_full_scan();
    update_.wcdma_full_scan_ = new ::rf_phreaker::protobuf::rp_wcdma_update;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.wcdma_full_scan)
  return update_.wcdma_full_scan_;
}
::rf_phreaker::protobuf::rp_wcdma_update* rp_update::release_wcdma_full_scan() {
  if (has_wcdma_full_scan()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_wcdma_update* temp = update_.wcdma_full_scan_;
    update_.wcdma_full_scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void rp_update::set_allocated_wcdma_full_scan(::rf_phreaker::protobuf::rp_wcdma_update* wcdma_full_scan) {
  clear_update();
  if (wcdma_full_scan) {
    set_has_wcdma_full_scan();
    update_.wcdma_full_scan_ = wcdma_full_scan;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.wcdma_full_scan)
}

// optional .rf_phreaker.protobuf.rp_wcdma_update wcdma_sweep = 8;
bool rp_update::has_wcdma_sweep() const {
  return update_case() == kWcdmaSweep;
}
void rp_update::set_has_wcdma_sweep() {
  _oneof_case_[0] = kWcdmaSweep;
}
void rp_update::clear_wcdma_sweep() {
  if (has_wcdma_sweep()) {
    delete update_.wcdma_sweep_;
    clear_has_update();
  }
}
 const ::rf_phreaker::protobuf::rp_wcdma_update& rp_update::wcdma_sweep() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.wcdma_sweep)
  return has_wcdma_sweep()
      ? *update_.wcdma_sweep_
      : ::rf_phreaker::protobuf::rp_wcdma_update::default_instance();
}
::rf_phreaker::protobuf::rp_wcdma_update* rp_update::mutable_wcdma_sweep() {
  if (!has_wcdma_sweep()) {
    clear_update();
    set_has_wcdma_sweep();
    update_.wcdma_sweep_ = new ::rf_phreaker::protobuf::rp_wcdma_update;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.wcdma_sweep)
  return update_.wcdma_sweep_;
}
::rf_phreaker::protobuf::rp_wcdma_update* rp_update::release_wcdma_sweep() {
  if (has_wcdma_sweep()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_wcdma_update* temp = update_.wcdma_sweep_;
    update_.wcdma_sweep_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void rp_update::set_allocated_wcdma_sweep(::rf_phreaker::protobuf::rp_wcdma_update* wcdma_sweep) {
  clear_update();
  if (wcdma_sweep) {
    set_has_wcdma_sweep();
    update_.wcdma_sweep_ = wcdma_sweep;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.wcdma_sweep)
}

// optional .rf_phreaker.protobuf.rp_lte_update lte_full_scan = 9;
bool rp_update::has_lte_full_scan() const {
  return update_case() == kLteFullScan;
}
void rp_update::set_has_lte_full_scan() {
  _oneof_case_[0] = kLteFullScan;
}
void rp_update::clear_lte_full_scan() {
  if (has_lte_full_scan()) {
    delete update_.lte_full_scan_;
    clear_has_update();
  }
}
 const ::rf_phreaker::protobuf::rp_lte_update& rp_update::lte_full_scan() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.lte_full_scan)
  return has_lte_full_scan()
      ? *update_.lte_full_scan_
      : ::rf_phreaker::protobuf::rp_lte_update::default_instance();
}
::rf_phreaker::protobuf::rp_lte_update* rp_update::mutable_lte_full_scan() {
  if (!has_lte_full_scan()) {
    clear_update();
    set_has_lte_full_scan();
    update_.lte_full_scan_ = new ::rf_phreaker::protobuf::rp_lte_update;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.lte_full_scan)
  return update_.lte_full_scan_;
}
::rf_phreaker::protobuf::rp_lte_update* rp_update::release_lte_full_scan() {
  if (has_lte_full_scan()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_lte_update* temp = update_.lte_full_scan_;
    update_.lte_full_scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void rp_update::set_allocated_lte_full_scan(::rf_phreaker::protobuf::rp_lte_update* lte_full_scan) {
  clear_update();
  if (lte_full_scan) {
    set_has_lte_full_scan();
    update_.lte_full_scan_ = lte_full_scan;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.lte_full_scan)
}

// optional .rf_phreaker.protobuf.rp_lte_update lte_sweep = 10;
bool rp_update::has_lte_sweep() const {
  return update_case() == kLteSweep;
}
void rp_update::set_has_lte_sweep() {
  _oneof_case_[0] = kLteSweep;
}
void rp_update::clear_lte_sweep() {
  if (has_lte_sweep()) {
    delete update_.lte_sweep_;
    clear_has_update();
  }
}
 const ::rf_phreaker::protobuf::rp_lte_update& rp_update::lte_sweep() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.lte_sweep)
  return has_lte_sweep()
      ? *update_.lte_sweep_
      : ::rf_phreaker::protobuf::rp_lte_update::default_instance();
}
::rf_phreaker::protobuf::rp_lte_update* rp_update::mutable_lte_sweep() {
  if (!has_lte_sweep()) {
    clear_update();
    set_has_lte_sweep();
    update_.lte_sweep_ = new ::rf_phreaker::protobuf::rp_lte_update;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.lte_sweep)
  return update_.lte_sweep_;
}
::rf_phreaker::protobuf::rp_lte_update* rp_update::release_lte_sweep() {
  if (has_lte_sweep()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_lte_update* temp = update_.lte_sweep_;
    update_.lte_sweep_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void rp_update::set_allocated_lte_sweep(::rf_phreaker::protobuf::rp_lte_update* lte_sweep) {
  clear_update();
  if (lte_sweep) {
    set_has_lte_sweep();
    update_.lte_sweep_ = lte_sweep;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.lte_sweep)
}

// optional .rf_phreaker.protobuf.rp_power_spectrum power_spectrum = 11;
bool rp_update::has_power_spectrum() const {
  return update_case() == kPowerSpectrum;
}
void rp_update::set_has_power_spectrum() {
  _oneof_case_[0] = kPowerSpectrum;
}
void rp_update::clear_power_spectrum() {
  if (has_power_spectrum()) {
    delete update_.power_spectrum_;
    clear_has_update();
  }
}
 const ::rf_phreaker::protobuf::rp_power_spectrum& rp_update::power_spectrum() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.power_spectrum)
  return has_power_spectrum()
      ? *update_.power_spectrum_
      : ::rf_phreaker::protobuf::rp_power_spectrum::default_instance();
}
::rf_phreaker::protobuf::rp_power_spectrum* rp_update::mutable_power_spectrum() {
  if (!has_power_spectrum()) {
    clear_update();
    set_has_power_spectrum();
    update_.power_spectrum_ = new ::rf_phreaker::protobuf::rp_power_spectrum;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.power_spectrum)
  return update_.power_spectrum_;
}
::rf_phreaker::protobuf::rp_power_spectrum* rp_update::release_power_spectrum() {
  if (has_power_spectrum()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_power_spectrum* temp = update_.power_spectrum_;
    update_.power_spectrum_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void rp_update::set_allocated_power_spectrum(::rf_phreaker::protobuf::rp_power_spectrum* power_spectrum) {
  clear_update();
  if (power_spectrum) {
    set_has_power_spectrum();
    update_.power_spectrum_ = power_spectrum;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.power_spectrum)
}

// optional .rf_phreaker.protobuf.rp_iq_data iq_data = 12;
bool rp_update::has_iq_data() const {
  return update_case() == kIqData;
}
void rp_update::set_has_iq_data() {
  _oneof_case_[0] = kIqData;
}
void rp_update::clear_iq_data() {
  if (has_iq_data()) {
    delete update_.iq_data_;
    clear_has_update();
  }
}
 const ::rf_phreaker::protobuf::rp_iq_data& rp_update::iq_data() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.iq_data)
  return has_iq_data()
      ? *update_.iq_data_
      : ::rf_phreaker::protobuf::rp_iq_data::default_instance();
}
::rf_phreaker::protobuf::rp_iq_data* rp_update::mutable_iq_data() {
  if (!has_iq_data()) {
    clear_update();
    set_has_iq_data();
    update_.iq_data_ = new ::rf_phreaker::protobuf::rp_iq_data;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.iq_data)
  return update_.iq_data_;
}
::rf_phreaker::protobuf::rp_iq_data* rp_update::release_iq_data() {
  if (has_iq_data()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_iq_data* temp = update_.iq_data_;
    update_.iq_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void rp_update::set_allocated_iq_data(::rf_phreaker::protobuf::rp_iq_data* iq_data) {
  clear_update();
  if (iq_data) {
    set_has_iq_data();
    update_.iq_data_ = iq_data;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.iq_data)
}

bool rp_update::has_update() const {
  return update_case() != UPDATE_NOT_SET;
}
void rp_update::clear_has_update() {
  _oneof_case_[0] = UPDATE_NOT_SET;
}
rp_update::UpdateCase rp_update::update_case() const {
  return rp_update::UpdateCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_log::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_log::rp_log()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_log)
}

void rp_log::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_log::rp_log(const rp_log& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_log)
}

void rp_log::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

rp_log::~rp_log() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_log)
  SharedDtor();
}

void rp_log::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void rp_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_log_descriptor_;
}

const rp_log& rp_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_log* rp_log::default_instance_ = NULL;

rp_log* rp_log::New(::google::protobuf::Arena* arena) const {
  rp_log* n = new rp_log;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_log::Clear() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool rp_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_log)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rf_phreaker.protobuf.rp_log.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_log)
  return false;
#undef DO_
}

void rp_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_log)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rf_phreaker.protobuf.rp_log.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_log)
}

::google::protobuf::uint8* rp_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_log)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rf_phreaker.protobuf.rp_log.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_log)
  return target;
}

int rp_log::ByteSize() const {
  int total_size = 0;

  // optional string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_log::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_log* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_log>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_log::MergeFrom(const rp_log& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void rp_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_log::CopyFrom(const rp_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_log::IsInitialized() const {

  return true;
}

void rp_log::Swap(rp_log* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_log::InternalSwap(rp_log* other) {
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_log_descriptor_;
  metadata.reflection = rp_log_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_log

// optional string msg = 1;
void rp_log::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& rp_log::msg() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_log.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void rp_log::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_log.msg)
}
 void rp_log::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rf_phreaker.protobuf.rp_log.msg)
}
 void rp_log::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rf_phreaker.protobuf.rp_log.msg)
}
 ::std::string* rp_log::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_log.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* rp_log::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void rp_log::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_log.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_message::kStatusFieldNumber;
const int rp_message::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_message::rp_message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_message)
}

void rp_message::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_message::rp_message(const rp_message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_message)
}

void rp_message::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

rp_message::~rp_message() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_message)
  SharedDtor();
}

void rp_message::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void rp_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_message_descriptor_;
}

const rp_message& rp_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_message* rp_message::default_instance_ = NULL;

rp_message* rp_message::New(::google::protobuf::Arena* arena) const {
  rp_message* n = new rp_message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_message::Clear() {
  status_ = 0;
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool rp_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::rf_phreaker::protobuf::rp_status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rf_phreaker.protobuf.rp_message.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_message)
  return false;
#undef DO_
}

void rp_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_message)
  // optional .rf_phreaker.protobuf.rp_status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rf_phreaker.protobuf.rp_message.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_message)
}

::google::protobuf::uint8* rp_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_message)
  // optional .rf_phreaker.protobuf.rp_status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rf_phreaker.protobuf.rp_message.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_message)
  return target;
}

int rp_message::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_message::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_message>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_message::MergeFrom(const rp_message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void rp_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_message::CopyFrom(const rp_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_message::IsInitialized() const {

  return true;
}

void rp_message::Swap(rp_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_message::InternalSwap(rp_message* other) {
  std::swap(status_, other->status_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_message_descriptor_;
  metadata.reflection = rp_message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_message

// optional .rf_phreaker.protobuf.rp_status status = 1;
void rp_message::clear_status() {
  status_ = 0;
}
 ::rf_phreaker::protobuf::rp_status rp_message::status() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_message.status)
  return static_cast< ::rf_phreaker::protobuf::rp_status >(status_);
}
 void rp_message::set_status(::rf_phreaker::protobuf::rp_status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_message.status)
}

// optional string msg = 2;
void rp_message::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& rp_message::msg() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_message.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void rp_message::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_message.msg)
}
 void rp_message::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rf_phreaker.protobuf.rp_message.msg)
}
 void rp_message::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rf_phreaker.protobuf.rp_message.msg)
}
 ::std::string* rp_message::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_message.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* rp_message::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void rp_message::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_message.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_frequency_path::kLowFreqFieldNumber;
const int rp_frequency_path::kHighFreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_frequency_path::rp_frequency_path()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_frequency_path)
}

void rp_frequency_path::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_frequency_path::rp_frequency_path(const rp_frequency_path& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_frequency_path)
}

void rp_frequency_path::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  low_freq_ = GOOGLE_LONGLONG(0);
  high_freq_ = GOOGLE_LONGLONG(0);
}

rp_frequency_path::~rp_frequency_path() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_frequency_path)
  SharedDtor();
}

void rp_frequency_path::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_frequency_path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_frequency_path::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_frequency_path_descriptor_;
}

const rp_frequency_path& rp_frequency_path::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_frequency_path* rp_frequency_path::default_instance_ = NULL;

rp_frequency_path* rp_frequency_path::New(::google::protobuf::Arena* arena) const {
  rp_frequency_path* n = new rp_frequency_path;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_frequency_path::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_frequency_path*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(low_freq_, high_freq_);

#undef ZR_HELPER_
#undef ZR_

}

bool rp_frequency_path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_frequency_path)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 low_freq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &low_freq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_high_freq;
        break;
      }

      // optional int64 high_freq = 2;
      case 2: {
        if (tag == 16) {
         parse_high_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &high_freq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_frequency_path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_frequency_path)
  return false;
#undef DO_
}

void rp_frequency_path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_frequency_path)
  // optional int64 low_freq = 1;
  if (this->low_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->low_freq(), output);
  }

  // optional int64 high_freq = 2;
  if (this->high_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->high_freq(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_frequency_path)
}

::google::protobuf::uint8* rp_frequency_path::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_frequency_path)
  // optional int64 low_freq = 1;
  if (this->low_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->low_freq(), target);
  }

  // optional int64 high_freq = 2;
  if (this->high_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->high_freq(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_frequency_path)
  return target;
}

int rp_frequency_path::ByteSize() const {
  int total_size = 0;

  // optional int64 low_freq = 1;
  if (this->low_freq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->low_freq());
  }

  // optional int64 high_freq = 2;
  if (this->high_freq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->high_freq());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_frequency_path::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_frequency_path* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_frequency_path>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_frequency_path::MergeFrom(const rp_frequency_path& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.low_freq() != 0) {
    set_low_freq(from.low_freq());
  }
  if (from.high_freq() != 0) {
    set_high_freq(from.high_freq());
  }
}

void rp_frequency_path::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_frequency_path::CopyFrom(const rp_frequency_path& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_frequency_path::IsInitialized() const {

  return true;
}

void rp_frequency_path::Swap(rp_frequency_path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_frequency_path::InternalSwap(rp_frequency_path* other) {
  std::swap(low_freq_, other->low_freq_);
  std::swap(high_freq_, other->high_freq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_frequency_path::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_frequency_path_descriptor_;
  metadata.reflection = rp_frequency_path_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_frequency_path

// optional int64 low_freq = 1;
void rp_frequency_path::clear_low_freq() {
  low_freq_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_frequency_path::low_freq() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_frequency_path.low_freq)
  return low_freq_;
}
 void rp_frequency_path::set_low_freq(::google::protobuf::int64 value) {
  
  low_freq_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_frequency_path.low_freq)
}

// optional int64 high_freq = 2;
void rp_frequency_path::clear_high_freq() {
  high_freq_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_frequency_path::high_freq() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_frequency_path.high_freq)
  return high_freq_;
}
 void rp_frequency_path::set_high_freq(::google::protobuf::int64 value) {
  
  high_freq_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_frequency_path.high_freq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_device_info::kSerialFieldNumber;
const int rp_device_info::kDeviceCommunicationFieldNumber;
const int rp_device_info::kFrequencyCorrectionCalibrationDateFieldNumber;
const int rp_device_info::kRfCalibrationDateFieldNumber;
const int rp_device_info::kFrequencyPathsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_device_info::rp_device_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_device_info)
}

void rp_device_info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_device_info::rp_device_info(const rp_device_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_device_info)
}

void rp_device_info::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_communication_ = 0;
  frequency_correction_calibration_date_ = GOOGLE_LONGLONG(0);
  rf_calibration_date_ = GOOGLE_LONGLONG(0);
}

rp_device_info::~rp_device_info() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_device_info)
  SharedDtor();
}

void rp_device_info::SharedDtor() {
  serial_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void rp_device_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_device_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_device_info_descriptor_;
}

const rp_device_info& rp_device_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_device_info* rp_device_info::default_instance_ = NULL;

rp_device_info* rp_device_info::New(::google::protobuf::Arena* arena) const {
  rp_device_info* n = new rp_device_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_device_info::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_device_info*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(frequency_correction_calibration_date_, rf_calibration_date_);
  serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_communication_ = 0;

#undef ZR_HELPER_
#undef ZR_

  frequency_paths_.Clear();
}

bool rp_device_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_device_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial().data(), this->serial().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rf_phreaker.protobuf.rp_device_info.serial"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_communication;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_device_communication device_communication = 2;
      case 2: {
        if (tag == 16) {
         parse_device_communication:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_device_communication(static_cast< ::rf_phreaker::protobuf::rp_device_communication >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frequency_correction_calibration_date;
        break;
      }

      // optional int64 frequency_correction_calibration_date = 3;
      case 3: {
        if (tag == 24) {
         parse_frequency_correction_calibration_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frequency_correction_calibration_date_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rf_calibration_date;
        break;
      }

      // optional int64 rf_calibration_date = 4;
      case 4: {
        if (tag == 32) {
         parse_rf_calibration_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rf_calibration_date_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_frequency_paths;
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_frequency_path frequency_paths = 5;
      case 5: {
        if (tag == 42) {
         parse_frequency_paths:
          DO_(input->IncrementRecursionDepth());
         parse_loop_frequency_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_frequency_paths()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_frequency_paths;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_device_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_device_info)
  return false;
#undef DO_
}

void rp_device_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_device_info)
  // optional string serial = 1;
  if (this->serial().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial().data(), this->serial().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rf_phreaker.protobuf.rp_device_info.serial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial(), output);
  }

  // optional .rf_phreaker.protobuf.rp_device_communication device_communication = 2;
  if (this->device_communication() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->device_communication(), output);
  }

  // optional int64 frequency_correction_calibration_date = 3;
  if (this->frequency_correction_calibration_date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->frequency_correction_calibration_date(), output);
  }

  // optional int64 rf_calibration_date = 4;
  if (this->rf_calibration_date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->rf_calibration_date(), output);
  }

  // repeated .rf_phreaker.protobuf.rp_frequency_path frequency_paths = 5;
  for (unsigned int i = 0, n = this->frequency_paths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->frequency_paths(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_device_info)
}

::google::protobuf::uint8* rp_device_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_device_info)
  // optional string serial = 1;
  if (this->serial().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial().data(), this->serial().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rf_phreaker.protobuf.rp_device_info.serial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial(), target);
  }

  // optional .rf_phreaker.protobuf.rp_device_communication device_communication = 2;
  if (this->device_communication() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->device_communication(), target);
  }

  // optional int64 frequency_correction_calibration_date = 3;
  if (this->frequency_correction_calibration_date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->frequency_correction_calibration_date(), target);
  }

  // optional int64 rf_calibration_date = 4;
  if (this->rf_calibration_date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->rf_calibration_date(), target);
  }

  // repeated .rf_phreaker.protobuf.rp_frequency_path frequency_paths = 5;
  for (unsigned int i = 0, n = this->frequency_paths_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->frequency_paths(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_device_info)
  return target;
}

int rp_device_info::ByteSize() const {
  int total_size = 0;

  // optional string serial = 1;
  if (this->serial().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial());
  }

  // optional .rf_phreaker.protobuf.rp_device_communication device_communication = 2;
  if (this->device_communication() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_communication());
  }

  // optional int64 frequency_correction_calibration_date = 3;
  if (this->frequency_correction_calibration_date() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->frequency_correction_calibration_date());
  }

  // optional int64 rf_calibration_date = 4;
  if (this->rf_calibration_date() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rf_calibration_date());
  }

  // repeated .rf_phreaker.protobuf.rp_frequency_path frequency_paths = 5;
  total_size += 1 * this->frequency_paths_size();
  for (int i = 0; i < this->frequency_paths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frequency_paths(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_device_info::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_device_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_device_info>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_device_info::MergeFrom(const rp_device_info& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  frequency_paths_.MergeFrom(from.frequency_paths_);
  if (from.serial().size() > 0) {

    serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_);
  }
  if (from.device_communication() != 0) {
    set_device_communication(from.device_communication());
  }
  if (from.frequency_correction_calibration_date() != 0) {
    set_frequency_correction_calibration_date(from.frequency_correction_calibration_date());
  }
  if (from.rf_calibration_date() != 0) {
    set_rf_calibration_date(from.rf_calibration_date());
  }
}

void rp_device_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_device_info::CopyFrom(const rp_device_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_device_info::IsInitialized() const {

  return true;
}

void rp_device_info::Swap(rp_device_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_device_info::InternalSwap(rp_device_info* other) {
  serial_.Swap(&other->serial_);
  std::swap(device_communication_, other->device_communication_);
  std::swap(frequency_correction_calibration_date_, other->frequency_correction_calibration_date_);
  std::swap(rf_calibration_date_, other->rf_calibration_date_);
  frequency_paths_.UnsafeArenaSwap(&other->frequency_paths_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_device_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_device_info_descriptor_;
  metadata.reflection = rp_device_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_device_info

// optional string serial = 1;
void rp_device_info::clear_serial() {
  serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& rp_device_info::serial() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_device_info.serial)
  return serial_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void rp_device_info::set_serial(const ::std::string& value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_device_info.serial)
}
 void rp_device_info::set_serial(const char* value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rf_phreaker.protobuf.rp_device_info.serial)
}
 void rp_device_info::set_serial(const char* value, size_t size) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rf_phreaker.protobuf.rp_device_info.serial)
}
 ::std::string* rp_device_info::mutable_serial() {
  
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_device_info.serial)
  return serial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* rp_device_info::release_serial() {
  
  return serial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void rp_device_info::set_allocated_serial(::std::string* serial) {
  if (serial != NULL) {
    
  } else {
    
  }
  serial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial);
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_device_info.serial)
}

// optional .rf_phreaker.protobuf.rp_device_communication device_communication = 2;
void rp_device_info::clear_device_communication() {
  device_communication_ = 0;
}
 ::rf_phreaker::protobuf::rp_device_communication rp_device_info::device_communication() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_device_info.device_communication)
  return static_cast< ::rf_phreaker::protobuf::rp_device_communication >(device_communication_);
}
 void rp_device_info::set_device_communication(::rf_phreaker::protobuf::rp_device_communication value) {
  
  device_communication_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_device_info.device_communication)
}

// optional int64 frequency_correction_calibration_date = 3;
void rp_device_info::clear_frequency_correction_calibration_date() {
  frequency_correction_calibration_date_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_device_info::frequency_correction_calibration_date() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_device_info.frequency_correction_calibration_date)
  return frequency_correction_calibration_date_;
}
 void rp_device_info::set_frequency_correction_calibration_date(::google::protobuf::int64 value) {
  
  frequency_correction_calibration_date_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_device_info.frequency_correction_calibration_date)
}

// optional int64 rf_calibration_date = 4;
void rp_device_info::clear_rf_calibration_date() {
  rf_calibration_date_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_device_info::rf_calibration_date() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_device_info.rf_calibration_date)
  return rf_calibration_date_;
}
 void rp_device_info::set_rf_calibration_date(::google::protobuf::int64 value) {
  
  rf_calibration_date_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_device_info.rf_calibration_date)
}

// repeated .rf_phreaker.protobuf.rp_frequency_path frequency_paths = 5;
int rp_device_info::frequency_paths_size() const {
  return frequency_paths_.size();
}
void rp_device_info::clear_frequency_paths() {
  frequency_paths_.Clear();
}
const ::rf_phreaker::protobuf::rp_frequency_path& rp_device_info::frequency_paths(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_device_info.frequency_paths)
  return frequency_paths_.Get(index);
}
::rf_phreaker::protobuf::rp_frequency_path* rp_device_info::mutable_frequency_paths(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_device_info.frequency_paths)
  return frequency_paths_.Mutable(index);
}
::rf_phreaker::protobuf::rp_frequency_path* rp_device_info::add_frequency_paths() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_device_info.frequency_paths)
  return frequency_paths_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_frequency_path >*
rp_device_info::mutable_frequency_paths() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_device_info.frequency_paths)
  return &frequency_paths_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_frequency_path >&
rp_device_info::frequency_paths() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_device_info.frequency_paths)
  return frequency_paths_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_satellite::kPrnFieldNumber;
const int rp_satellite::kSnrFieldNumber;
const int rp_satellite::kElevationFieldNumber;
const int rp_satellite::kAzimuthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_satellite::rp_satellite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_satellite)
}

void rp_satellite::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_satellite::rp_satellite(const rp_satellite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_satellite)
}

void rp_satellite::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  prn_ = 0;
  snr_ = 0;
  elevation_ = 0;
  azimuth_ = 0;
}

rp_satellite::~rp_satellite() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_satellite)
  SharedDtor();
}

void rp_satellite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_satellite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_satellite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_satellite_descriptor_;
}

const rp_satellite& rp_satellite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_satellite* rp_satellite::default_instance_ = NULL;

rp_satellite* rp_satellite::New(::google::protobuf::Arena* arena) const {
  rp_satellite* n = new rp_satellite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_satellite::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_satellite*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(snr_, prn_);

#undef ZR_HELPER_
#undef ZR_

}

bool rp_satellite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_satellite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 prn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prn_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_snr;
        break;
      }

      // optional double snr = 2;
      case 2: {
        if (tag == 17) {
         parse_snr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snr_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_elevation;
        break;
      }

      // optional double elevation = 3;
      case 3: {
        if (tag == 25) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elevation_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_azimuth;
        break;
      }

      // optional double azimuth = 4;
      case 4: {
        if (tag == 33) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azimuth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_satellite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_satellite)
  return false;
#undef DO_
}

void rp_satellite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_satellite)
  // optional int32 prn = 1;
  if (this->prn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prn(), output);
  }

  // optional double snr = 2;
  if (this->snr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->snr(), output);
  }

  // optional double elevation = 3;
  if (this->elevation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->elevation(), output);
  }

  // optional double azimuth = 4;
  if (this->azimuth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->azimuth(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_satellite)
}

::google::protobuf::uint8* rp_satellite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_satellite)
  // optional int32 prn = 1;
  if (this->prn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prn(), target);
  }

  // optional double snr = 2;
  if (this->snr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->snr(), target);
  }

  // optional double elevation = 3;
  if (this->elevation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->elevation(), target);
  }

  // optional double azimuth = 4;
  if (this->azimuth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->azimuth(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_satellite)
  return target;
}

int rp_satellite::ByteSize() const {
  int total_size = 0;

  // optional int32 prn = 1;
  if (this->prn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prn());
  }

  // optional double snr = 2;
  if (this->snr() != 0) {
    total_size += 1 + 8;
  }

  // optional double elevation = 3;
  if (this->elevation() != 0) {
    total_size += 1 + 8;
  }

  // optional double azimuth = 4;
  if (this->azimuth() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_satellite::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_satellite* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_satellite>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_satellite::MergeFrom(const rp_satellite& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.prn() != 0) {
    set_prn(from.prn());
  }
  if (from.snr() != 0) {
    set_snr(from.snr());
  }
  if (from.elevation() != 0) {
    set_elevation(from.elevation());
  }
  if (from.azimuth() != 0) {
    set_azimuth(from.azimuth());
  }
}

void rp_satellite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_satellite::CopyFrom(const rp_satellite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_satellite::IsInitialized() const {

  return true;
}

void rp_satellite::Swap(rp_satellite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_satellite::InternalSwap(rp_satellite* other) {
  std::swap(prn_, other->prn_);
  std::swap(snr_, other->snr_);
  std::swap(elevation_, other->elevation_);
  std::swap(azimuth_, other->azimuth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_satellite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_satellite_descriptor_;
  metadata.reflection = rp_satellite_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_satellite

// optional int32 prn = 1;
void rp_satellite::clear_prn() {
  prn_ = 0;
}
 ::google::protobuf::int32 rp_satellite::prn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_satellite.prn)
  return prn_;
}
 void rp_satellite::set_prn(::google::protobuf::int32 value) {
  
  prn_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_satellite.prn)
}

// optional double snr = 2;
void rp_satellite::clear_snr() {
  snr_ = 0;
}
 double rp_satellite::snr() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_satellite.snr)
  return snr_;
}
 void rp_satellite::set_snr(double value) {
  
  snr_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_satellite.snr)
}

// optional double elevation = 3;
void rp_satellite::clear_elevation() {
  elevation_ = 0;
}
 double rp_satellite::elevation() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_satellite.elevation)
  return elevation_;
}
 void rp_satellite::set_elevation(double value) {
  
  elevation_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_satellite.elevation)
}

// optional double azimuth = 4;
void rp_satellite::clear_azimuth() {
  azimuth_ = 0;
}
 double rp_satellite::azimuth() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_satellite.azimuth)
  return azimuth_;
}
 void rp_satellite::set_azimuth(double value) {
  
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_satellite.azimuth)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_gps::kSerialFieldNumber;
const int rp_gps::kLockFieldNumber;
const int rp_gps::kCoordinatedUniversalTimeFieldNumber;
const int rp_gps::kVisibleSatellitesFieldNumber;
const int rp_gps::kTrackingSatellitesFieldNumber;
const int rp_gps::kLatitudeFieldNumber;
const int rp_gps::kLongitudeFieldNumber;
const int rp_gps::kAltitudeFieldNumber;
const int rp_gps::kAngleFieldNumber;
const int rp_gps::kSpeedFieldNumber;
const int rp_gps::kDilutionOfPrecisionFieldNumber;
const int rp_gps::kHorizontalAccuracyMetersFieldNumber;
const int rp_gps::kVerticalAccuracyMetersFieldNumber;
const int rp_gps::kRawStatusFieldNumber;
const int rp_gps::kSatellitesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_gps::rp_gps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_gps)
}

void rp_gps::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_gps::rp_gps(const rp_gps& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_gps)
}

void rp_gps::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_ = false;
  coordinated_universal_time_ = GOOGLE_LONGLONG(0);
  visible_satellites_ = 0;
  tracking_satellites_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  altitude_ = 0;
  angle_ = 0;
  speed_ = 0;
  dilution_of_precision_ = 0;
  horizontal_accuracy_meters_ = 0;
  vertical_accuracy_meters_ = 0;
  raw_status_ = GOOGLE_LONGLONG(0);
}

rp_gps::~rp_gps() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_gps)
  SharedDtor();
}

void rp_gps::SharedDtor() {
  serial_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void rp_gps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_gps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_gps_descriptor_;
}

const rp_gps& rp_gps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_gps* rp_gps::default_instance_ = NULL;

rp_gps* rp_gps::New(::google::protobuf::Arena* arena) const {
  rp_gps* n = new rp_gps;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_gps::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_gps*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(coordinated_universal_time_, altitude_);
  serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracking_satellites_ = 0;
  ZR_(angle_, raw_status_);

#undef ZR_HELPER_
#undef ZR_

  satellites_.Clear();
}

bool rp_gps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_gps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial().data(), this->serial().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rf_phreaker.protobuf.rp_gps.serial"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lock;
        break;
      }

      // optional bool lock = 2;
      case 2: {
        if (tag == 16) {
         parse_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coordinated_universal_time;
        break;
      }

      // optional int64 coordinated_universal_time = 3;
      case 3: {
        if (tag == 24) {
         parse_coordinated_universal_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coordinated_universal_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_visible_satellites;
        break;
      }

      // optional int32 visible_satellites = 4;
      case 4: {
        if (tag == 32) {
         parse_visible_satellites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visible_satellites_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tracking_satellites;
        break;
      }

      // optional int32 tracking_satellites = 5;
      case 5: {
        if (tag == 40) {
         parse_tracking_satellites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tracking_satellites_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_latitude;
        break;
      }

      // optional double latitude = 6;
      case 6: {
        if (tag == 49) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_longitude;
        break;
      }

      // optional double longitude = 7;
      case 7: {
        if (tag == 57) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_altitude;
        break;
      }

      // optional double altitude = 8;
      case 8: {
        if (tag == 65) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_angle;
        break;
      }

      // optional double angle = 9;
      case 9: {
        if (tag == 73) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_speed;
        break;
      }

      // optional double speed = 10;
      case 10: {
        if (tag == 81) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_dilution_of_precision;
        break;
      }

      // optional double dilution_of_precision = 11;
      case 11: {
        if (tag == 89) {
         parse_dilution_of_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dilution_of_precision_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_horizontal_accuracy_meters;
        break;
      }

      // optional double horizontal_accuracy_meters = 12;
      case 12: {
        if (tag == 97) {
         parse_horizontal_accuracy_meters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &horizontal_accuracy_meters_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_vertical_accuracy_meters;
        break;
      }

      // optional double vertical_accuracy_meters = 13;
      case 13: {
        if (tag == 105) {
         parse_vertical_accuracy_meters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_accuracy_meters_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_raw_status;
        break;
      }

      // optional int64 raw_status = 14;
      case 14: {
        if (tag == 112) {
         parse_raw_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &raw_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_satellites;
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_satellite satellites = 15;
      case 15: {
        if (tag == 122) {
         parse_satellites:
          DO_(input->IncrementRecursionDepth());
         parse_loop_satellites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_satellites()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_satellites;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_gps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_gps)
  return false;
#undef DO_
}

void rp_gps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_gps)
  // optional string serial = 1;
  if (this->serial().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial().data(), this->serial().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rf_phreaker.protobuf.rp_gps.serial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial(), output);
  }

  // optional bool lock = 2;
  if (this->lock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->lock(), output);
  }

  // optional int64 coordinated_universal_time = 3;
  if (this->coordinated_universal_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->coordinated_universal_time(), output);
  }

  // optional int32 visible_satellites = 4;
  if (this->visible_satellites() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->visible_satellites(), output);
  }

  // optional int32 tracking_satellites = 5;
  if (this->tracking_satellites() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tracking_satellites(), output);
  }

  // optional double latitude = 6;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->latitude(), output);
  }

  // optional double longitude = 7;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->longitude(), output);
  }

  // optional double altitude = 8;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->altitude(), output);
  }

  // optional double angle = 9;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->angle(), output);
  }

  // optional double speed = 10;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->speed(), output);
  }

  // optional double dilution_of_precision = 11;
  if (this->dilution_of_precision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->dilution_of_precision(), output);
  }

  // optional double horizontal_accuracy_meters = 12;
  if (this->horizontal_accuracy_meters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->horizontal_accuracy_meters(), output);
  }

  // optional double vertical_accuracy_meters = 13;
  if (this->vertical_accuracy_meters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->vertical_accuracy_meters(), output);
  }

  // optional int64 raw_status = 14;
  if (this->raw_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->raw_status(), output);
  }

  // repeated .rf_phreaker.protobuf.rp_satellite satellites = 15;
  for (unsigned int i = 0, n = this->satellites_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->satellites(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_gps)
}

::google::protobuf::uint8* rp_gps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_gps)
  // optional string serial = 1;
  if (this->serial().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial().data(), this->serial().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rf_phreaker.protobuf.rp_gps.serial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial(), target);
  }

  // optional bool lock = 2;
  if (this->lock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->lock(), target);
  }

  // optional int64 coordinated_universal_time = 3;
  if (this->coordinated_universal_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->coordinated_universal_time(), target);
  }

  // optional int32 visible_satellites = 4;
  if (this->visible_satellites() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->visible_satellites(), target);
  }

  // optional int32 tracking_satellites = 5;
  if (this->tracking_satellites() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tracking_satellites(), target);
  }

  // optional double latitude = 6;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->latitude(), target);
  }

  // optional double longitude = 7;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->longitude(), target);
  }

  // optional double altitude = 8;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->altitude(), target);
  }

  // optional double angle = 9;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->angle(), target);
  }

  // optional double speed = 10;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->speed(), target);
  }

  // optional double dilution_of_precision = 11;
  if (this->dilution_of_precision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->dilution_of_precision(), target);
  }

  // optional double horizontal_accuracy_meters = 12;
  if (this->horizontal_accuracy_meters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->horizontal_accuracy_meters(), target);
  }

  // optional double vertical_accuracy_meters = 13;
  if (this->vertical_accuracy_meters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->vertical_accuracy_meters(), target);
  }

  // optional int64 raw_status = 14;
  if (this->raw_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->raw_status(), target);
  }

  // repeated .rf_phreaker.protobuf.rp_satellite satellites = 15;
  for (unsigned int i = 0, n = this->satellites_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->satellites(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_gps)
  return target;
}

int rp_gps::ByteSize() const {
  int total_size = 0;

  // optional string serial = 1;
  if (this->serial().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial());
  }

  // optional bool lock = 2;
  if (this->lock() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 coordinated_universal_time = 3;
  if (this->coordinated_universal_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->coordinated_universal_time());
  }

  // optional int32 visible_satellites = 4;
  if (this->visible_satellites() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->visible_satellites());
  }

  // optional int32 tracking_satellites = 5;
  if (this->tracking_satellites() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tracking_satellites());
  }

  // optional double latitude = 6;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // optional double longitude = 7;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // optional double altitude = 8;
  if (this->altitude() != 0) {
    total_size += 1 + 8;
  }

  // optional double angle = 9;
  if (this->angle() != 0) {
    total_size += 1 + 8;
  }

  // optional double speed = 10;
  if (this->speed() != 0) {
    total_size += 1 + 8;
  }

  // optional double dilution_of_precision = 11;
  if (this->dilution_of_precision() != 0) {
    total_size += 1 + 8;
  }

  // optional double horizontal_accuracy_meters = 12;
  if (this->horizontal_accuracy_meters() != 0) {
    total_size += 1 + 8;
  }

  // optional double vertical_accuracy_meters = 13;
  if (this->vertical_accuracy_meters() != 0) {
    total_size += 1 + 8;
  }

  // optional int64 raw_status = 14;
  if (this->raw_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->raw_status());
  }

  // repeated .rf_phreaker.protobuf.rp_satellite satellites = 15;
  total_size += 1 * this->satellites_size();
  for (int i = 0; i < this->satellites_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->satellites(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_gps::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_gps* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_gps>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_gps::MergeFrom(const rp_gps& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  satellites_.MergeFrom(from.satellites_);
  if (from.serial().size() > 0) {

    serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_);
  }
  if (from.lock() != 0) {
    set_lock(from.lock());
  }
  if (from.coordinated_universal_time() != 0) {
    set_coordinated_universal_time(from.coordinated_universal_time());
  }
  if (from.visible_satellites() != 0) {
    set_visible_satellites(from.visible_satellites());
  }
  if (from.tracking_satellites() != 0) {
    set_tracking_satellites(from.tracking_satellites());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.dilution_of_precision() != 0) {
    set_dilution_of_precision(from.dilution_of_precision());
  }
  if (from.horizontal_accuracy_meters() != 0) {
    set_horizontal_accuracy_meters(from.horizontal_accuracy_meters());
  }
  if (from.vertical_accuracy_meters() != 0) {
    set_vertical_accuracy_meters(from.vertical_accuracy_meters());
  }
  if (from.raw_status() != 0) {
    set_raw_status(from.raw_status());
  }
}

void rp_gps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_gps::CopyFrom(const rp_gps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_gps::IsInitialized() const {

  return true;
}

void rp_gps::Swap(rp_gps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_gps::InternalSwap(rp_gps* other) {
  serial_.Swap(&other->serial_);
  std::swap(lock_, other->lock_);
  std::swap(coordinated_universal_time_, other->coordinated_universal_time_);
  std::swap(visible_satellites_, other->visible_satellites_);
  std::swap(tracking_satellites_, other->tracking_satellites_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(altitude_, other->altitude_);
  std::swap(angle_, other->angle_);
  std::swap(speed_, other->speed_);
  std::swap(dilution_of_precision_, other->dilution_of_precision_);
  std::swap(horizontal_accuracy_meters_, other->horizontal_accuracy_meters_);
  std::swap(vertical_accuracy_meters_, other->vertical_accuracy_meters_);
  std::swap(raw_status_, other->raw_status_);
  satellites_.UnsafeArenaSwap(&other->satellites_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_gps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_gps_descriptor_;
  metadata.reflection = rp_gps_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_gps

// optional string serial = 1;
void rp_gps::clear_serial() {
  serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& rp_gps::serial() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.serial)
  return serial_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void rp_gps::set_serial(const ::std::string& value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.serial)
}
 void rp_gps::set_serial(const char* value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rf_phreaker.protobuf.rp_gps.serial)
}
 void rp_gps::set_serial(const char* value, size_t size) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rf_phreaker.protobuf.rp_gps.serial)
}
 ::std::string* rp_gps::mutable_serial() {
  
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gps.serial)
  return serial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* rp_gps::release_serial() {
  
  return serial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void rp_gps::set_allocated_serial(::std::string* serial) {
  if (serial != NULL) {
    
  } else {
    
  }
  serial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial);
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gps.serial)
}

// optional bool lock = 2;
void rp_gps::clear_lock() {
  lock_ = false;
}
 bool rp_gps::lock() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.lock)
  return lock_;
}
 void rp_gps::set_lock(bool value) {
  
  lock_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.lock)
}

// optional int64 coordinated_universal_time = 3;
void rp_gps::clear_coordinated_universal_time() {
  coordinated_universal_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_gps::coordinated_universal_time() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.coordinated_universal_time)
  return coordinated_universal_time_;
}
 void rp_gps::set_coordinated_universal_time(::google::protobuf::int64 value) {
  
  coordinated_universal_time_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.coordinated_universal_time)
}

// optional int32 visible_satellites = 4;
void rp_gps::clear_visible_satellites() {
  visible_satellites_ = 0;
}
 ::google::protobuf::int32 rp_gps::visible_satellites() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.visible_satellites)
  return visible_satellites_;
}
 void rp_gps::set_visible_satellites(::google::protobuf::int32 value) {
  
  visible_satellites_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.visible_satellites)
}

// optional int32 tracking_satellites = 5;
void rp_gps::clear_tracking_satellites() {
  tracking_satellites_ = 0;
}
 ::google::protobuf::int32 rp_gps::tracking_satellites() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.tracking_satellites)
  return tracking_satellites_;
}
 void rp_gps::set_tracking_satellites(::google::protobuf::int32 value) {
  
  tracking_satellites_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.tracking_satellites)
}

// optional double latitude = 6;
void rp_gps::clear_latitude() {
  latitude_ = 0;
}
 double rp_gps::latitude() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.latitude)
  return latitude_;
}
 void rp_gps::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.latitude)
}

// optional double longitude = 7;
void rp_gps::clear_longitude() {
  longitude_ = 0;
}
 double rp_gps::longitude() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.longitude)
  return longitude_;
}
 void rp_gps::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.longitude)
}

// optional double altitude = 8;
void rp_gps::clear_altitude() {
  altitude_ = 0;
}
 double rp_gps::altitude() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.altitude)
  return altitude_;
}
 void rp_gps::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.altitude)
}

// optional double angle = 9;
void rp_gps::clear_angle() {
  angle_ = 0;
}
 double rp_gps::angle() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.angle)
  return angle_;
}
 void rp_gps::set_angle(double value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.angle)
}

// optional double speed = 10;
void rp_gps::clear_speed() {
  speed_ = 0;
}
 double rp_gps::speed() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.speed)
  return speed_;
}
 void rp_gps::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.speed)
}

// optional double dilution_of_precision = 11;
void rp_gps::clear_dilution_of_precision() {
  dilution_of_precision_ = 0;
}
 double rp_gps::dilution_of_precision() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.dilution_of_precision)
  return dilution_of_precision_;
}
 void rp_gps::set_dilution_of_precision(double value) {
  
  dilution_of_precision_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.dilution_of_precision)
}

// optional double horizontal_accuracy_meters = 12;
void rp_gps::clear_horizontal_accuracy_meters() {
  horizontal_accuracy_meters_ = 0;
}
 double rp_gps::horizontal_accuracy_meters() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.horizontal_accuracy_meters)
  return horizontal_accuracy_meters_;
}
 void rp_gps::set_horizontal_accuracy_meters(double value) {
  
  horizontal_accuracy_meters_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.horizontal_accuracy_meters)
}

// optional double vertical_accuracy_meters = 13;
void rp_gps::clear_vertical_accuracy_meters() {
  vertical_accuracy_meters_ = 0;
}
 double rp_gps::vertical_accuracy_meters() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.vertical_accuracy_meters)
  return vertical_accuracy_meters_;
}
 void rp_gps::set_vertical_accuracy_meters(double value) {
  
  vertical_accuracy_meters_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.vertical_accuracy_meters)
}

// optional int64 raw_status = 14;
void rp_gps::clear_raw_status() {
  raw_status_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_gps::raw_status() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.raw_status)
  return raw_status_;
}
 void rp_gps::set_raw_status(::google::protobuf::int64 value) {
  
  raw_status_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.raw_status)
}

// repeated .rf_phreaker.protobuf.rp_satellite satellites = 15;
int rp_gps::satellites_size() const {
  return satellites_.size();
}
void rp_gps::clear_satellites() {
  satellites_.Clear();
}
const ::rf_phreaker::protobuf::rp_satellite& rp_gps::satellites(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.satellites)
  return satellites_.Get(index);
}
::rf_phreaker::protobuf::rp_satellite* rp_gps::mutable_satellites(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gps.satellites)
  return satellites_.Mutable(index);
}
::rf_phreaker::protobuf::rp_satellite* rp_gps::add_satellites() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gps.satellites)
  return satellites_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_satellite >*
rp_gps::mutable_satellites() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gps.satellites)
  return &satellites_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_satellite >&
rp_gps::satellites() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gps.satellites)
  return satellites_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_base::kSerialFieldNumber;
const int rp_base::kCollectionRoundFieldNumber;
const int rp_base::kMeasurementFrequencyFieldNumber;
const int rp_base::kMeasurementBandwidthFieldNumber;
const int rp_base::kMeasurementSignalLevelFieldNumber;
const int rp_base::kTimeFieldNumber;
const int rp_base::kStatusFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_base::rp_base()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_base)
}

void rp_base::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_base::rp_base(const rp_base& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_base)
}

void rp_base::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_round_ = GOOGLE_LONGLONG(0);
  measurement_frequency_ = GOOGLE_LONGLONG(0);
  measurement_bandwidth_ = 0;
  measurement_signal_level_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  status_flags_ = 0;
}

rp_base::~rp_base() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_base)
  SharedDtor();
}

void rp_base::SharedDtor() {
  serial_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void rp_base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_base_descriptor_;
}

const rp_base& rp_base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_base* rp_base::default_instance_ = NULL;

rp_base* rp_base::New(::google::protobuf::Arena* arena) const {
  rp_base* n = new rp_base;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_base::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_base*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(collection_round_, time_);
  serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool rp_base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_base)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial().data(), this->serial().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rf_phreaker.protobuf.rp_base.serial"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_collection_round;
        break;
      }

      // optional int64 collection_round = 2;
      case 2: {
        if (tag == 16) {
         parse_collection_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &collection_round_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_measurement_frequency;
        break;
      }

      // optional int64 measurement_frequency = 3;
      case 3: {
        if (tag == 24) {
         parse_measurement_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &measurement_frequency_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_measurement_bandwidth;
        break;
      }

      // optional int32 measurement_bandwidth = 4;
      case 4: {
        if (tag == 32) {
         parse_measurement_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &measurement_bandwidth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_measurement_signal_level;
        break;
      }

      // optional double measurement_signal_level = 5;
      case 5: {
        if (tag == 41) {
         parse_measurement_signal_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_signal_level_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional int64 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status_flags;
        break;
      }

      // optional int32 status_flags = 7;
      case 7: {
        if (tag == 56) {
         parse_status_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_flags_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_base)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_base)
  return false;
#undef DO_
}

void rp_base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_base)
  // optional string serial = 1;
  if (this->serial().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial().data(), this->serial().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rf_phreaker.protobuf.rp_base.serial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial(), output);
  }

  // optional int64 collection_round = 2;
  if (this->collection_round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->collection_round(), output);
  }

  // optional int64 measurement_frequency = 3;
  if (this->measurement_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->measurement_frequency(), output);
  }

  // optional int32 measurement_bandwidth = 4;
  if (this->measurement_bandwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->measurement_bandwidth(), output);
  }

  // optional double measurement_signal_level = 5;
  if (this->measurement_signal_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->measurement_signal_level(), output);
  }

  // optional int64 time = 6;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->time(), output);
  }

  // optional int32 status_flags = 7;
  if (this->status_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status_flags(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_base)
}

::google::protobuf::uint8* rp_base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_base)
  // optional string serial = 1;
  if (this->serial().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial().data(), this->serial().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rf_phreaker.protobuf.rp_base.serial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial(), target);
  }

  // optional int64 collection_round = 2;
  if (this->collection_round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->collection_round(), target);
  }

  // optional int64 measurement_frequency = 3;
  if (this->measurement_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->measurement_frequency(), target);
  }

  // optional int32 measurement_bandwidth = 4;
  if (this->measurement_bandwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->measurement_bandwidth(), target);
  }

  // optional double measurement_signal_level = 5;
  if (this->measurement_signal_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->measurement_signal_level(), target);
  }

  // optional int64 time = 6;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->time(), target);
  }

  // optional int32 status_flags = 7;
  if (this->status_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->status_flags(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_base)
  return target;
}

int rp_base::ByteSize() const {
  int total_size = 0;

  // optional string serial = 1;
  if (this->serial().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial());
  }

  // optional int64 collection_round = 2;
  if (this->collection_round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->collection_round());
  }

  // optional int64 measurement_frequency = 3;
  if (this->measurement_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->measurement_frequency());
  }

  // optional int32 measurement_bandwidth = 4;
  if (this->measurement_bandwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->measurement_bandwidth());
  }

  // optional double measurement_signal_level = 5;
  if (this->measurement_signal_level() != 0) {
    total_size += 1 + 8;
  }

  // optional int64 time = 6;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // optional int32 status_flags = 7;
  if (this->status_flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status_flags());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_base::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_base* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_base>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_base::MergeFrom(const rp_base& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.serial().size() > 0) {

    serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_);
  }
  if (from.collection_round() != 0) {
    set_collection_round(from.collection_round());
  }
  if (from.measurement_frequency() != 0) {
    set_measurement_frequency(from.measurement_frequency());
  }
  if (from.measurement_bandwidth() != 0) {
    set_measurement_bandwidth(from.measurement_bandwidth());
  }
  if (from.measurement_signal_level() != 0) {
    set_measurement_signal_level(from.measurement_signal_level());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.status_flags() != 0) {
    set_status_flags(from.status_flags());
  }
}

void rp_base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_base::CopyFrom(const rp_base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_base::IsInitialized() const {

  return true;
}

void rp_base::Swap(rp_base* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_base::InternalSwap(rp_base* other) {
  serial_.Swap(&other->serial_);
  std::swap(collection_round_, other->collection_round_);
  std::swap(measurement_frequency_, other->measurement_frequency_);
  std::swap(measurement_bandwidth_, other->measurement_bandwidth_);
  std::swap(measurement_signal_level_, other->measurement_signal_level_);
  std::swap(time_, other->time_);
  std::swap(status_flags_, other->status_flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_base_descriptor_;
  metadata.reflection = rp_base_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_base

// optional string serial = 1;
void rp_base::clear_serial() {
  serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& rp_base::serial() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_base.serial)
  return serial_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void rp_base::set_serial(const ::std::string& value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_base.serial)
}
 void rp_base::set_serial(const char* value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rf_phreaker.protobuf.rp_base.serial)
}
 void rp_base::set_serial(const char* value, size_t size) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rf_phreaker.protobuf.rp_base.serial)
}
 ::std::string* rp_base::mutable_serial() {
  
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_base.serial)
  return serial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* rp_base::release_serial() {
  
  return serial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void rp_base::set_allocated_serial(::std::string* serial) {
  if (serial != NULL) {
    
  } else {
    
  }
  serial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial);
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_base.serial)
}

// optional int64 collection_round = 2;
void rp_base::clear_collection_round() {
  collection_round_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_base::collection_round() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_base.collection_round)
  return collection_round_;
}
 void rp_base::set_collection_round(::google::protobuf::int64 value) {
  
  collection_round_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_base.collection_round)
}

// optional int64 measurement_frequency = 3;
void rp_base::clear_measurement_frequency() {
  measurement_frequency_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_base::measurement_frequency() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_base.measurement_frequency)
  return measurement_frequency_;
}
 void rp_base::set_measurement_frequency(::google::protobuf::int64 value) {
  
  measurement_frequency_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_base.measurement_frequency)
}

// optional int32 measurement_bandwidth = 4;
void rp_base::clear_measurement_bandwidth() {
  measurement_bandwidth_ = 0;
}
 ::google::protobuf::int32 rp_base::measurement_bandwidth() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_base.measurement_bandwidth)
  return measurement_bandwidth_;
}
 void rp_base::set_measurement_bandwidth(::google::protobuf::int32 value) {
  
  measurement_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_base.measurement_bandwidth)
}

// optional double measurement_signal_level = 5;
void rp_base::clear_measurement_signal_level() {
  measurement_signal_level_ = 0;
}
 double rp_base::measurement_signal_level() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_base.measurement_signal_level)
  return measurement_signal_level_;
}
 void rp_base::set_measurement_signal_level(double value) {
  
  measurement_signal_level_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_base.measurement_signal_level)
}

// optional int64 time = 6;
void rp_base::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_base::time() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_base.time)
  return time_;
}
 void rp_base::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_base.time)
}

// optional int32 status_flags = 7;
void rp_base::clear_status_flags() {
  status_flags_ = 0;
}
 ::google::protobuf::int32 rp_base::status_flags() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_base.status_flags)
  return status_flags_;
}
 void rp_base::set_status_flags(::google::protobuf::int32 value) {
  
  status_flags_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_base.status_flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_plmn::kMccFieldNumber;
const int rp_plmn::kMncFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_plmn::rp_plmn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_plmn)
}

void rp_plmn::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_plmn::rp_plmn(const rp_plmn& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_plmn)
}

void rp_plmn::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mcc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mnc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

rp_plmn::~rp_plmn() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_plmn)
  SharedDtor();
}

void rp_plmn::SharedDtor() {
  mcc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mnc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void rp_plmn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_plmn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_plmn_descriptor_;
}

const rp_plmn& rp_plmn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_plmn* rp_plmn::default_instance_ = NULL;

rp_plmn* rp_plmn::New(::google::protobuf::Arena* arena) const {
  rp_plmn* n = new rp_plmn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_plmn::Clear() {
  mcc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mnc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool rp_plmn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_plmn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mcc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mcc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mcc().data(), this->mcc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rf_phreaker.protobuf.rp_plmn.mcc"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mnc;
        break;
      }

      // optional string mnc = 2;
      case 2: {
        if (tag == 18) {
         parse_mnc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mnc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mnc().data(), this->mnc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rf_phreaker.protobuf.rp_plmn.mnc"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_plmn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_plmn)
  return false;
#undef DO_
}

void rp_plmn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_plmn)
  // optional string mcc = 1;
  if (this->mcc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mcc().data(), this->mcc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rf_phreaker.protobuf.rp_plmn.mcc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mcc(), output);
  }

  // optional string mnc = 2;
  if (this->mnc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mnc().data(), this->mnc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rf_phreaker.protobuf.rp_plmn.mnc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mnc(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_plmn)
}

::google::protobuf::uint8* rp_plmn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_plmn)
  // optional string mcc = 1;
  if (this->mcc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mcc().data(), this->mcc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rf_phreaker.protobuf.rp_plmn.mcc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mcc(), target);
  }

  // optional string mnc = 2;
  if (this->mnc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mnc().data(), this->mnc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rf_phreaker.protobuf.rp_plmn.mnc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mnc(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_plmn)
  return target;
}

int rp_plmn::ByteSize() const {
  int total_size = 0;

  // optional string mcc = 1;
  if (this->mcc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mcc());
  }

  // optional string mnc = 2;
  if (this->mnc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mnc());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_plmn::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_plmn* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_plmn>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_plmn::MergeFrom(const rp_plmn& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mcc().size() > 0) {

    mcc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mcc_);
  }
  if (from.mnc().size() > 0) {

    mnc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mnc_);
  }
}

void rp_plmn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_plmn::CopyFrom(const rp_plmn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_plmn::IsInitialized() const {

  return true;
}

void rp_plmn::Swap(rp_plmn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_plmn::InternalSwap(rp_plmn* other) {
  mcc_.Swap(&other->mcc_);
  mnc_.Swap(&other->mnc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_plmn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_plmn_descriptor_;
  metadata.reflection = rp_plmn_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_plmn

// optional string mcc = 1;
void rp_plmn::clear_mcc() {
  mcc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& rp_plmn::mcc() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_plmn.mcc)
  return mcc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void rp_plmn::set_mcc(const ::std::string& value) {
  
  mcc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_plmn.mcc)
}
 void rp_plmn::set_mcc(const char* value) {
  
  mcc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rf_phreaker.protobuf.rp_plmn.mcc)
}
 void rp_plmn::set_mcc(const char* value, size_t size) {
  
  mcc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rf_phreaker.protobuf.rp_plmn.mcc)
}
 ::std::string* rp_plmn::mutable_mcc() {
  
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_plmn.mcc)
  return mcc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* rp_plmn::release_mcc() {
  
  return mcc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void rp_plmn::set_allocated_mcc(::std::string* mcc) {
  if (mcc != NULL) {
    
  } else {
    
  }
  mcc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mcc);
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_plmn.mcc)
}

// optional string mnc = 2;
void rp_plmn::clear_mnc() {
  mnc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& rp_plmn::mnc() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_plmn.mnc)
  return mnc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void rp_plmn::set_mnc(const ::std::string& value) {
  
  mnc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_plmn.mnc)
}
 void rp_plmn::set_mnc(const char* value) {
  
  mnc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rf_phreaker.protobuf.rp_plmn.mnc)
}
 void rp_plmn::set_mnc(const char* value, size_t size) {
  
  mnc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rf_phreaker.protobuf.rp_plmn.mnc)
}
 ::std::string* rp_plmn::mutable_mnc() {
  
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_plmn.mnc)
  return mnc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* rp_plmn::release_mnc() {
  
  return mnc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void rp_plmn::set_allocated_mnc(::std::string* mnc) {
  if (mnc != NULL) {
    
  } else {
    
  }
  mnc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mnc);
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_plmn.mnc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_raw_layer_3::kBytesFieldNumber;
const int rp_raw_layer_3::kUnusedBitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_raw_layer_3::rp_raw_layer_3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_raw_layer_3)
}

void rp_raw_layer_3::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_raw_layer_3::rp_raw_layer_3(const rp_raw_layer_3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_raw_layer_3)
}

void rp_raw_layer_3::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unused_bits_ = 0;
}

rp_raw_layer_3::~rp_raw_layer_3() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_raw_layer_3)
  SharedDtor();
}

void rp_raw_layer_3::SharedDtor() {
  bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void rp_raw_layer_3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_raw_layer_3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_raw_layer_3_descriptor_;
}

const rp_raw_layer_3& rp_raw_layer_3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_raw_layer_3* rp_raw_layer_3::default_instance_ = NULL;

rp_raw_layer_3* rp_raw_layer_3::New(::google::protobuf::Arena* arena) const {
  rp_raw_layer_3* n = new rp_raw_layer_3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_raw_layer_3::Clear() {
  bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unused_bits_ = 0;
}

bool rp_raw_layer_3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_raw_layer_3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes bytes = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unused_bits;
        break;
      }

      // optional int32 unused_bits = 2;
      case 2: {
        if (tag == 16) {
         parse_unused_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unused_bits_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_raw_layer_3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_raw_layer_3)
  return false;
#undef DO_
}

void rp_raw_layer_3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_raw_layer_3)
  // optional bytes bytes = 1;
  if (this->bytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bytes(), output);
  }

  // optional int32 unused_bits = 2;
  if (this->unused_bits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unused_bits(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_raw_layer_3)
}

::google::protobuf::uint8* rp_raw_layer_3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_raw_layer_3)
  // optional bytes bytes = 1;
  if (this->bytes().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bytes(), target);
  }

  // optional int32 unused_bits = 2;
  if (this->unused_bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unused_bits(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_raw_layer_3)
  return target;
}

int rp_raw_layer_3::ByteSize() const {
  int total_size = 0;

  // optional bytes bytes = 1;
  if (this->bytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bytes());
  }

  // optional int32 unused_bits = 2;
  if (this->unused_bits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unused_bits());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_raw_layer_3::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_raw_layer_3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_raw_layer_3>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_raw_layer_3::MergeFrom(const rp_raw_layer_3& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.bytes().size() > 0) {

    bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bytes_);
  }
  if (from.unused_bits() != 0) {
    set_unused_bits(from.unused_bits());
  }
}

void rp_raw_layer_3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_raw_layer_3::CopyFrom(const rp_raw_layer_3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_raw_layer_3::IsInitialized() const {

  return true;
}

void rp_raw_layer_3::Swap(rp_raw_layer_3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_raw_layer_3::InternalSwap(rp_raw_layer_3* other) {
  bytes_.Swap(&other->bytes_);
  std::swap(unused_bits_, other->unused_bits_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_raw_layer_3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_raw_layer_3_descriptor_;
  metadata.reflection = rp_raw_layer_3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_raw_layer_3

// optional bytes bytes = 1;
void rp_raw_layer_3::clear_bytes() {
  bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& rp_raw_layer_3::bytes() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_raw_layer_3.bytes)
  return bytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void rp_raw_layer_3::set_bytes(const ::std::string& value) {
  
  bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_raw_layer_3.bytes)
}
 void rp_raw_layer_3::set_bytes(const char* value) {
  
  bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rf_phreaker.protobuf.rp_raw_layer_3.bytes)
}
 void rp_raw_layer_3::set_bytes(const void* value, size_t size) {
  
  bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rf_phreaker.protobuf.rp_raw_layer_3.bytes)
}
 ::std::string* rp_raw_layer_3::mutable_bytes() {
  
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_raw_layer_3.bytes)
  return bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* rp_raw_layer_3::release_bytes() {
  
  return bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void rp_raw_layer_3::set_allocated_bytes(::std::string* bytes) {
  if (bytes != NULL) {
    
  } else {
    
  }
  bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes);
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_raw_layer_3.bytes)
}

// optional int32 unused_bits = 2;
void rp_raw_layer_3::clear_unused_bits() {
  unused_bits_ = 0;
}
 ::google::protobuf::int32 rp_raw_layer_3::unused_bits() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_raw_layer_3.unused_bits)
  return unused_bits_;
}
 void rp_raw_layer_3::set_unused_bits(::google::protobuf::int32 value) {
  
  unused_bits_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_raw_layer_3.unused_bits)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_gsm_utran_neighbor::kDuplexingFieldNumber;
const int rp_gsm_utran_neighbor::kArfcnFieldNumber;
const int rp_gsm_utran_neighbor::kBandwidthFieldNumber;
const int rp_gsm_utran_neighbor::kScramblingCodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_gsm_utran_neighbor::rp_gsm_utran_neighbor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_gsm_utran_neighbor)
}

void rp_gsm_utran_neighbor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_gsm_utran_neighbor::rp_gsm_utran_neighbor(const rp_gsm_utran_neighbor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_gsm_utran_neighbor)
}

void rp_gsm_utran_neighbor::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  duplexing_ = 0;
  arfcn_ = 0;
  bandwidth_ = 0;
}

rp_gsm_utran_neighbor::~rp_gsm_utran_neighbor() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_gsm_utran_neighbor)
  SharedDtor();
}

void rp_gsm_utran_neighbor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_gsm_utran_neighbor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_gsm_utran_neighbor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_gsm_utran_neighbor_descriptor_;
}

const rp_gsm_utran_neighbor& rp_gsm_utran_neighbor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_gsm_utran_neighbor* rp_gsm_utran_neighbor::default_instance_ = NULL;

rp_gsm_utran_neighbor* rp_gsm_utran_neighbor::New(::google::protobuf::Arena* arena) const {
  rp_gsm_utran_neighbor* n = new rp_gsm_utran_neighbor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_gsm_utran_neighbor::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_gsm_utran_neighbor*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(duplexing_, arfcn_);
  bandwidth_ = 0;

#undef ZR_HELPER_
#undef ZR_

  scrambling_codes_.Clear();
}

bool rp_gsm_utran_neighbor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_gsm_utran_neighbor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_duplex_type duplexing = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_duplexing(static_cast< ::rf_phreaker::protobuf::rp_duplex_type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_arfcn;
        break;
      }

      // optional int32 arfcn = 2;
      case 2: {
        if (tag == 16) {
         parse_arfcn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arfcn_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bandwidth;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_utran_bandwidth_type bandwidth = 3;
      case 3: {
        if (tag == 24) {
         parse_bandwidth:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bandwidth(static_cast< ::rf_phreaker::protobuf::rp_utran_bandwidth_type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_scrambling_codes;
        break;
      }

      // repeated int32 scrambling_codes = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_scrambling_codes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_scrambling_codes())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_scrambling_codes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_gsm_utran_neighbor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_gsm_utran_neighbor)
  return false;
#undef DO_
}

void rp_gsm_utran_neighbor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_gsm_utran_neighbor)
  // optional .rf_phreaker.protobuf.rp_duplex_type duplexing = 1;
  if (this->duplexing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->duplexing(), output);
  }

  // optional int32 arfcn = 2;
  if (this->arfcn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->arfcn(), output);
  }

  // optional .rf_phreaker.protobuf.rp_utran_bandwidth_type bandwidth = 3;
  if (this->bandwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->bandwidth(), output);
  }

  // repeated int32 scrambling_codes = 4 [packed = true];
  if (this->scrambling_codes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_scrambling_codes_cached_byte_size_);
  }
  for (int i = 0; i < this->scrambling_codes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->scrambling_codes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_gsm_utran_neighbor)
}

::google::protobuf::uint8* rp_gsm_utran_neighbor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_gsm_utran_neighbor)
  // optional .rf_phreaker.protobuf.rp_duplex_type duplexing = 1;
  if (this->duplexing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->duplexing(), target);
  }

  // optional int32 arfcn = 2;
  if (this->arfcn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->arfcn(), target);
  }

  // optional .rf_phreaker.protobuf.rp_utran_bandwidth_type bandwidth = 3;
  if (this->bandwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->bandwidth(), target);
  }

  // repeated int32 scrambling_codes = 4 [packed = true];
  if (this->scrambling_codes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _scrambling_codes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->scrambling_codes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->scrambling_codes(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_gsm_utran_neighbor)
  return target;
}

int rp_gsm_utran_neighbor::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_duplex_type duplexing = 1;
  if (this->duplexing() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->duplexing());
  }

  // optional int32 arfcn = 2;
  if (this->arfcn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->arfcn());
  }

  // optional .rf_phreaker.protobuf.rp_utran_bandwidth_type bandwidth = 3;
  if (this->bandwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bandwidth());
  }

  // repeated int32 scrambling_codes = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->scrambling_codes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->scrambling_codes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _scrambling_codes_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_gsm_utran_neighbor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_gsm_utran_neighbor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_gsm_utran_neighbor>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_gsm_utran_neighbor::MergeFrom(const rp_gsm_utran_neighbor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  scrambling_codes_.MergeFrom(from.scrambling_codes_);
  if (from.duplexing() != 0) {
    set_duplexing(from.duplexing());
  }
  if (from.arfcn() != 0) {
    set_arfcn(from.arfcn());
  }
  if (from.bandwidth() != 0) {
    set_bandwidth(from.bandwidth());
  }
}

void rp_gsm_utran_neighbor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_gsm_utran_neighbor::CopyFrom(const rp_gsm_utran_neighbor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_gsm_utran_neighbor::IsInitialized() const {

  return true;
}

void rp_gsm_utran_neighbor::Swap(rp_gsm_utran_neighbor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_gsm_utran_neighbor::InternalSwap(rp_gsm_utran_neighbor* other) {
  std::swap(duplexing_, other->duplexing_);
  std::swap(arfcn_, other->arfcn_);
  std::swap(bandwidth_, other->bandwidth_);
  scrambling_codes_.UnsafeArenaSwap(&other->scrambling_codes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_gsm_utran_neighbor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_gsm_utran_neighbor_descriptor_;
  metadata.reflection = rp_gsm_utran_neighbor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_gsm_utran_neighbor

// optional .rf_phreaker.protobuf.rp_duplex_type duplexing = 1;
void rp_gsm_utran_neighbor::clear_duplexing() {
  duplexing_ = 0;
}
 ::rf_phreaker::protobuf::rp_duplex_type rp_gsm_utran_neighbor::duplexing() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_utran_neighbor.duplexing)
  return static_cast< ::rf_phreaker::protobuf::rp_duplex_type >(duplexing_);
}
 void rp_gsm_utran_neighbor::set_duplexing(::rf_phreaker::protobuf::rp_duplex_type value) {
  
  duplexing_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_utran_neighbor.duplexing)
}

// optional int32 arfcn = 2;
void rp_gsm_utran_neighbor::clear_arfcn() {
  arfcn_ = 0;
}
 ::google::protobuf::int32 rp_gsm_utran_neighbor::arfcn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_utran_neighbor.arfcn)
  return arfcn_;
}
 void rp_gsm_utran_neighbor::set_arfcn(::google::protobuf::int32 value) {
  
  arfcn_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_utran_neighbor.arfcn)
}

// optional .rf_phreaker.protobuf.rp_utran_bandwidth_type bandwidth = 3;
void rp_gsm_utran_neighbor::clear_bandwidth() {
  bandwidth_ = 0;
}
 ::rf_phreaker::protobuf::rp_utran_bandwidth_type rp_gsm_utran_neighbor::bandwidth() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_utran_neighbor.bandwidth)
  return static_cast< ::rf_phreaker::protobuf::rp_utran_bandwidth_type >(bandwidth_);
}
 void rp_gsm_utran_neighbor::set_bandwidth(::rf_phreaker::protobuf::rp_utran_bandwidth_type value) {
  
  bandwidth_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_utran_neighbor.bandwidth)
}

// repeated int32 scrambling_codes = 4 [packed = true];
int rp_gsm_utran_neighbor::scrambling_codes_size() const {
  return scrambling_codes_.size();
}
void rp_gsm_utran_neighbor::clear_scrambling_codes() {
  scrambling_codes_.Clear();
}
 ::google::protobuf::int32 rp_gsm_utran_neighbor::scrambling_codes(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_utran_neighbor.scrambling_codes)
  return scrambling_codes_.Get(index);
}
 void rp_gsm_utran_neighbor::set_scrambling_codes(int index, ::google::protobuf::int32 value) {
  scrambling_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_utran_neighbor.scrambling_codes)
}
 void rp_gsm_utran_neighbor::add_scrambling_codes(::google::protobuf::int32 value) {
  scrambling_codes_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_utran_neighbor.scrambling_codes)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_gsm_utran_neighbor::scrambling_codes() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_utran_neighbor.scrambling_codes)
  return scrambling_codes_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_gsm_utran_neighbor::mutable_scrambling_codes() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_utran_neighbor.scrambling_codes)
  return &scrambling_codes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_pcid_group::kPcidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_pcid_group::rp_pcid_group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_pcid_group)
}

void rp_pcid_group::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_pcid_group::rp_pcid_group(const rp_pcid_group& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_pcid_group)
}

void rp_pcid_group::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

rp_pcid_group::~rp_pcid_group() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_pcid_group)
  SharedDtor();
}

void rp_pcid_group::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_pcid_group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_pcid_group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_pcid_group_descriptor_;
}

const rp_pcid_group& rp_pcid_group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_pcid_group* rp_pcid_group::default_instance_ = NULL;

rp_pcid_group* rp_pcid_group::New(::google::protobuf::Arena* arena) const {
  rp_pcid_group* n = new rp_pcid_group;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_pcid_group::Clear() {
  pcids_.Clear();
}

bool rp_pcid_group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_pcid_group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 pcids = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pcids())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_pcids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_pcid_group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_pcid_group)
  return false;
#undef DO_
}

void rp_pcid_group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_pcid_group)
  // repeated int32 pcids = 1 [packed = true];
  if (this->pcids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pcids_cached_byte_size_);
  }
  for (int i = 0; i < this->pcids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->pcids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_pcid_group)
}

::google::protobuf::uint8* rp_pcid_group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_pcid_group)
  // repeated int32 pcids = 1 [packed = true];
  if (this->pcids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pcids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pcids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->pcids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_pcid_group)
  return target;
}

int rp_pcid_group::ByteSize() const {
  int total_size = 0;

  // repeated int32 pcids = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->pcids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pcids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pcids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_pcid_group::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_pcid_group* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_pcid_group>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_pcid_group::MergeFrom(const rp_pcid_group& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  pcids_.MergeFrom(from.pcids_);
}

void rp_pcid_group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_pcid_group::CopyFrom(const rp_pcid_group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_pcid_group::IsInitialized() const {

  return true;
}

void rp_pcid_group::Swap(rp_pcid_group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_pcid_group::InternalSwap(rp_pcid_group* other) {
  pcids_.UnsafeArenaSwap(&other->pcids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_pcid_group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_pcid_group_descriptor_;
  metadata.reflection = rp_pcid_group_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_pcid_group

// repeated int32 pcids = 1 [packed = true];
int rp_pcid_group::pcids_size() const {
  return pcids_.size();
}
void rp_pcid_group::clear_pcids() {
  pcids_.Clear();
}
 ::google::protobuf::int32 rp_pcid_group::pcids(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_pcid_group.pcids)
  return pcids_.Get(index);
}
 void rp_pcid_group::set_pcids(int index, ::google::protobuf::int32 value) {
  pcids_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_pcid_group.pcids)
}
 void rp_pcid_group::add_pcids(::google::protobuf::int32 value) {
  pcids_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_pcid_group.pcids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_pcid_group::pcids() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_pcid_group.pcids)
  return pcids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_pcid_group::mutable_pcids() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_pcid_group.pcids)
  return &pcids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_gsm_eutran_neighbor::kEarfcnFieldNumber;
const int rp_gsm_eutran_neighbor::kBandwidthFieldNumber;
const int rp_gsm_eutran_neighbor::kPriorityFieldNumber;
const int rp_gsm_eutran_neighbor::kThresholdHighDbFieldNumber;
const int rp_gsm_eutran_neighbor::kThresholdLowDbFieldNumber;
const int rp_gsm_eutran_neighbor::kQrxlevminDbFieldNumber;
const int rp_gsm_eutran_neighbor::kPcidsAllowedFieldNumber;
const int rp_gsm_eutran_neighbor::kPcidsNotAllowedFieldNumber;
const int rp_gsm_eutran_neighbor::kPcidsSameTrackingAreaFieldNumber;
const int rp_gsm_eutran_neighbor::kPcidsDifferentTrackingAreaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_gsm_eutran_neighbor::rp_gsm_eutran_neighbor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_gsm_eutran_neighbor)
}

void rp_gsm_eutran_neighbor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pcids_allowed_ = const_cast< ::rf_phreaker::protobuf::rp_pcid_group*>(&::rf_phreaker::protobuf::rp_pcid_group::default_instance());
  pcids_not_allowed_ = const_cast< ::rf_phreaker::protobuf::rp_pcid_group*>(&::rf_phreaker::protobuf::rp_pcid_group::default_instance());
}

rp_gsm_eutran_neighbor::rp_gsm_eutran_neighbor(const rp_gsm_eutran_neighbor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_gsm_eutran_neighbor)
}

void rp_gsm_eutran_neighbor::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  earfcn_ = 0;
  bandwidth_ = 0;
  priority_ = 0;
  threshold_high_db_ = 0;
  threshold_low_db_ = 0;
  qrxlevmin_db_ = 0;
  pcids_allowed_ = NULL;
  pcids_not_allowed_ = NULL;
}

rp_gsm_eutran_neighbor::~rp_gsm_eutran_neighbor() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_gsm_eutran_neighbor)
  SharedDtor();
}

void rp_gsm_eutran_neighbor::SharedDtor() {
  if (this != default_instance_) {
    delete pcids_allowed_;
    delete pcids_not_allowed_;
  }
}

void rp_gsm_eutran_neighbor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_gsm_eutran_neighbor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_gsm_eutran_neighbor_descriptor_;
}

const rp_gsm_eutran_neighbor& rp_gsm_eutran_neighbor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_gsm_eutran_neighbor* rp_gsm_eutran_neighbor::default_instance_ = NULL;

rp_gsm_eutran_neighbor* rp_gsm_eutran_neighbor::New(::google::protobuf::Arena* arena) const {
  rp_gsm_eutran_neighbor* n = new rp_gsm_eutran_neighbor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_gsm_eutran_neighbor::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_gsm_eutran_neighbor*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(earfcn_, qrxlevmin_db_);
  if (GetArenaNoVirtual() == NULL && pcids_allowed_ != NULL) delete pcids_allowed_;
  pcids_allowed_ = NULL;
  if (GetArenaNoVirtual() == NULL && pcids_not_allowed_ != NULL) delete pcids_not_allowed_;
  pcids_not_allowed_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  pcids_same_tracking_area_.Clear();
  pcids_different_tracking_area_.Clear();
}

bool rp_gsm_eutran_neighbor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_gsm_eutran_neighbor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 earfcn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &earfcn_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bandwidth;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_eutran_bandwidth_type bandwidth = 2;
      case 2: {
        if (tag == 16) {
         parse_bandwidth:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bandwidth(static_cast< ::rf_phreaker::protobuf::rp_eutran_bandwidth_type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_priority;
        break;
      }

      // optional int32 priority = 3;
      case 3: {
        if (tag == 24) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_threshold_high_db;
        break;
      }

      // optional int32 threshold_high_db = 4;
      case 4: {
        if (tag == 32) {
         parse_threshold_high_db:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_high_db_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_threshold_low_db;
        break;
      }

      // optional int32 threshold_low_db = 5;
      case 5: {
        if (tag == 40) {
         parse_threshold_low_db:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_low_db_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_qrxlevmin_db;
        break;
      }

      // optional int32 qrxlevmin_db = 6;
      case 6: {
        if (tag == 48) {
         parse_qrxlevmin_db:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qrxlevmin_db_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pcids_allowed;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_pcid_group pcids_allowed = 7;
      case 7: {
        if (tag == 58) {
         parse_pcids_allowed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pcids_allowed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_pcids_not_allowed;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_pcid_group pcids_not_allowed = 8;
      case 8: {
        if (tag == 66) {
         parse_pcids_not_allowed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pcids_not_allowed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_pcids_same_tracking_area;
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_pcid_group pcids_same_tracking_area = 9;
      case 9: {
        if (tag == 74) {
         parse_pcids_same_tracking_area:
          DO_(input->IncrementRecursionDepth());
         parse_loop_pcids_same_tracking_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pcids_same_tracking_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_pcids_same_tracking_area;
        if (input->ExpectTag(82)) goto parse_loop_pcids_different_tracking_area;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_pcid_group pcids_different_tracking_area = 10;
      case 10: {
        if (tag == 82) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pcids_different_tracking_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pcids_different_tracking_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_pcids_different_tracking_area;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_gsm_eutran_neighbor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_gsm_eutran_neighbor)
  return false;
#undef DO_
}

void rp_gsm_eutran_neighbor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_gsm_eutran_neighbor)
  // optional int32 earfcn = 1;
  if (this->earfcn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->earfcn(), output);
  }

  // optional .rf_phreaker.protobuf.rp_eutran_bandwidth_type bandwidth = 2;
  if (this->bandwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->bandwidth(), output);
  }

  // optional int32 priority = 3;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  // optional int32 threshold_high_db = 4;
  if (this->threshold_high_db() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->threshold_high_db(), output);
  }

  // optional int32 threshold_low_db = 5;
  if (this->threshold_low_db() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->threshold_low_db(), output);
  }

  // optional int32 qrxlevmin_db = 6;
  if (this->qrxlevmin_db() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->qrxlevmin_db(), output);
  }

  // optional .rf_phreaker.protobuf.rp_pcid_group pcids_allowed = 7;
  if (this->has_pcids_allowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->pcids_allowed_, output);
  }

  // optional .rf_phreaker.protobuf.rp_pcid_group pcids_not_allowed = 8;
  if (this->has_pcids_not_allowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->pcids_not_allowed_, output);
  }

  // repeated .rf_phreaker.protobuf.rp_pcid_group pcids_same_tracking_area = 9;
  for (unsigned int i = 0, n = this->pcids_same_tracking_area_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pcids_same_tracking_area(i), output);
  }

  // repeated .rf_phreaker.protobuf.rp_pcid_group pcids_different_tracking_area = 10;
  for (unsigned int i = 0, n = this->pcids_different_tracking_area_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->pcids_different_tracking_area(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_gsm_eutran_neighbor)
}

::google::protobuf::uint8* rp_gsm_eutran_neighbor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_gsm_eutran_neighbor)
  // optional int32 earfcn = 1;
  if (this->earfcn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->earfcn(), target);
  }

  // optional .rf_phreaker.protobuf.rp_eutran_bandwidth_type bandwidth = 2;
  if (this->bandwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->bandwidth(), target);
  }

  // optional int32 priority = 3;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->priority(), target);
  }

  // optional int32 threshold_high_db = 4;
  if (this->threshold_high_db() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->threshold_high_db(), target);
  }

  // optional int32 threshold_low_db = 5;
  if (this->threshold_low_db() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->threshold_low_db(), target);
  }

  // optional int32 qrxlevmin_db = 6;
  if (this->qrxlevmin_db() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->qrxlevmin_db(), target);
  }

  // optional .rf_phreaker.protobuf.rp_pcid_group pcids_allowed = 7;
  if (this->has_pcids_allowed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->pcids_allowed_, target);
  }

  // optional .rf_phreaker.protobuf.rp_pcid_group pcids_not_allowed = 8;
  if (this->has_pcids_not_allowed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->pcids_not_allowed_, target);
  }

  // repeated .rf_phreaker.protobuf.rp_pcid_group pcids_same_tracking_area = 9;
  for (unsigned int i = 0, n = this->pcids_same_tracking_area_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pcids_same_tracking_area(i), target);
  }

  // repeated .rf_phreaker.protobuf.rp_pcid_group pcids_different_tracking_area = 10;
  for (unsigned int i = 0, n = this->pcids_different_tracking_area_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->pcids_different_tracking_area(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_gsm_eutran_neighbor)
  return target;
}

int rp_gsm_eutran_neighbor::ByteSize() const {
  int total_size = 0;

  // optional int32 earfcn = 1;
  if (this->earfcn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->earfcn());
  }

  // optional .rf_phreaker.protobuf.rp_eutran_bandwidth_type bandwidth = 2;
  if (this->bandwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bandwidth());
  }

  // optional int32 priority = 3;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  // optional int32 threshold_high_db = 4;
  if (this->threshold_high_db() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshold_high_db());
  }

  // optional int32 threshold_low_db = 5;
  if (this->threshold_low_db() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshold_low_db());
  }

  // optional int32 qrxlevmin_db = 6;
  if (this->qrxlevmin_db() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->qrxlevmin_db());
  }

  // optional .rf_phreaker.protobuf.rp_pcid_group pcids_allowed = 7;
  if (this->has_pcids_allowed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pcids_allowed_);
  }

  // optional .rf_phreaker.protobuf.rp_pcid_group pcids_not_allowed = 8;
  if (this->has_pcids_not_allowed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pcids_not_allowed_);
  }

  // repeated .rf_phreaker.protobuf.rp_pcid_group pcids_same_tracking_area = 9;
  total_size += 1 * this->pcids_same_tracking_area_size();
  for (int i = 0; i < this->pcids_same_tracking_area_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pcids_same_tracking_area(i));
  }

  // repeated .rf_phreaker.protobuf.rp_pcid_group pcids_different_tracking_area = 10;
  total_size += 1 * this->pcids_different_tracking_area_size();
  for (int i = 0; i < this->pcids_different_tracking_area_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pcids_different_tracking_area(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_gsm_eutran_neighbor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_gsm_eutran_neighbor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_gsm_eutran_neighbor>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_gsm_eutran_neighbor::MergeFrom(const rp_gsm_eutran_neighbor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  pcids_same_tracking_area_.MergeFrom(from.pcids_same_tracking_area_);
  pcids_different_tracking_area_.MergeFrom(from.pcids_different_tracking_area_);
  if (from.earfcn() != 0) {
    set_earfcn(from.earfcn());
  }
  if (from.bandwidth() != 0) {
    set_bandwidth(from.bandwidth());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.threshold_high_db() != 0) {
    set_threshold_high_db(from.threshold_high_db());
  }
  if (from.threshold_low_db() != 0) {
    set_threshold_low_db(from.threshold_low_db());
  }
  if (from.qrxlevmin_db() != 0) {
    set_qrxlevmin_db(from.qrxlevmin_db());
  }
  if (from.has_pcids_allowed()) {
    mutable_pcids_allowed()->::rf_phreaker::protobuf::rp_pcid_group::MergeFrom(from.pcids_allowed());
  }
  if (from.has_pcids_not_allowed()) {
    mutable_pcids_not_allowed()->::rf_phreaker::protobuf::rp_pcid_group::MergeFrom(from.pcids_not_allowed());
  }
}

void rp_gsm_eutran_neighbor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_gsm_eutran_neighbor::CopyFrom(const rp_gsm_eutran_neighbor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_gsm_eutran_neighbor::IsInitialized() const {

  return true;
}

void rp_gsm_eutran_neighbor::Swap(rp_gsm_eutran_neighbor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_gsm_eutran_neighbor::InternalSwap(rp_gsm_eutran_neighbor* other) {
  std::swap(earfcn_, other->earfcn_);
  std::swap(bandwidth_, other->bandwidth_);
  std::swap(priority_, other->priority_);
  std::swap(threshold_high_db_, other->threshold_high_db_);
  std::swap(threshold_low_db_, other->threshold_low_db_);
  std::swap(qrxlevmin_db_, other->qrxlevmin_db_);
  std::swap(pcids_allowed_, other->pcids_allowed_);
  std::swap(pcids_not_allowed_, other->pcids_not_allowed_);
  pcids_same_tracking_area_.UnsafeArenaSwap(&other->pcids_same_tracking_area_);
  pcids_different_tracking_area_.UnsafeArenaSwap(&other->pcids_different_tracking_area_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_gsm_eutran_neighbor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_gsm_eutran_neighbor_descriptor_;
  metadata.reflection = rp_gsm_eutran_neighbor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_gsm_eutran_neighbor

// optional int32 earfcn = 1;
void rp_gsm_eutran_neighbor::clear_earfcn() {
  earfcn_ = 0;
}
 ::google::protobuf::int32 rp_gsm_eutran_neighbor::earfcn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.earfcn)
  return earfcn_;
}
 void rp_gsm_eutran_neighbor::set_earfcn(::google::protobuf::int32 value) {
  
  earfcn_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.earfcn)
}

// optional .rf_phreaker.protobuf.rp_eutran_bandwidth_type bandwidth = 2;
void rp_gsm_eutran_neighbor::clear_bandwidth() {
  bandwidth_ = 0;
}
 ::rf_phreaker::protobuf::rp_eutran_bandwidth_type rp_gsm_eutran_neighbor::bandwidth() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.bandwidth)
  return static_cast< ::rf_phreaker::protobuf::rp_eutran_bandwidth_type >(bandwidth_);
}
 void rp_gsm_eutran_neighbor::set_bandwidth(::rf_phreaker::protobuf::rp_eutran_bandwidth_type value) {
  
  bandwidth_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.bandwidth)
}

// optional int32 priority = 3;
void rp_gsm_eutran_neighbor::clear_priority() {
  priority_ = 0;
}
 ::google::protobuf::int32 rp_gsm_eutran_neighbor::priority() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.priority)
  return priority_;
}
 void rp_gsm_eutran_neighbor::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.priority)
}

// optional int32 threshold_high_db = 4;
void rp_gsm_eutran_neighbor::clear_threshold_high_db() {
  threshold_high_db_ = 0;
}
 ::google::protobuf::int32 rp_gsm_eutran_neighbor::threshold_high_db() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.threshold_high_db)
  return threshold_high_db_;
}
 void rp_gsm_eutran_neighbor::set_threshold_high_db(::google::protobuf::int32 value) {
  
  threshold_high_db_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.threshold_high_db)
}

// optional int32 threshold_low_db = 5;
void rp_gsm_eutran_neighbor::clear_threshold_low_db() {
  threshold_low_db_ = 0;
}
 ::google::protobuf::int32 rp_gsm_eutran_neighbor::threshold_low_db() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.threshold_low_db)
  return threshold_low_db_;
}
 void rp_gsm_eutran_neighbor::set_threshold_low_db(::google::protobuf::int32 value) {
  
  threshold_low_db_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.threshold_low_db)
}

// optional int32 qrxlevmin_db = 6;
void rp_gsm_eutran_neighbor::clear_qrxlevmin_db() {
  qrxlevmin_db_ = 0;
}
 ::google::protobuf::int32 rp_gsm_eutran_neighbor::qrxlevmin_db() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.qrxlevmin_db)
  return qrxlevmin_db_;
}
 void rp_gsm_eutran_neighbor::set_qrxlevmin_db(::google::protobuf::int32 value) {
  
  qrxlevmin_db_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.qrxlevmin_db)
}

// optional .rf_phreaker.protobuf.rp_pcid_group pcids_allowed = 7;
bool rp_gsm_eutran_neighbor::has_pcids_allowed() const {
  return !_is_default_instance_ && pcids_allowed_ != NULL;
}
void rp_gsm_eutran_neighbor::clear_pcids_allowed() {
  if (GetArenaNoVirtual() == NULL && pcids_allowed_ != NULL) delete pcids_allowed_;
  pcids_allowed_ = NULL;
}
const ::rf_phreaker::protobuf::rp_pcid_group& rp_gsm_eutran_neighbor::pcids_allowed() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_allowed)
  return pcids_allowed_ != NULL ? *pcids_allowed_ : *default_instance_->pcids_allowed_;
}
::rf_phreaker::protobuf::rp_pcid_group* rp_gsm_eutran_neighbor::mutable_pcids_allowed() {
  
  if (pcids_allowed_ == NULL) {
    pcids_allowed_ = new ::rf_phreaker::protobuf::rp_pcid_group;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_allowed)
  return pcids_allowed_;
}
::rf_phreaker::protobuf::rp_pcid_group* rp_gsm_eutran_neighbor::release_pcids_allowed() {
  
  ::rf_phreaker::protobuf::rp_pcid_group* temp = pcids_allowed_;
  pcids_allowed_ = NULL;
  return temp;
}
void rp_gsm_eutran_neighbor::set_allocated_pcids_allowed(::rf_phreaker::protobuf::rp_pcid_group* pcids_allowed) {
  delete pcids_allowed_;
  pcids_allowed_ = pcids_allowed;
  if (pcids_allowed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_allowed)
}

// optional .rf_phreaker.protobuf.rp_pcid_group pcids_not_allowed = 8;
bool rp_gsm_eutran_neighbor::has_pcids_not_allowed() const {
  return !_is_default_instance_ && pcids_not_allowed_ != NULL;
}
void rp_gsm_eutran_neighbor::clear_pcids_not_allowed() {
  if (GetArenaNoVirtual() == NULL && pcids_not_allowed_ != NULL) delete pcids_not_allowed_;
  pcids_not_allowed_ = NULL;
}
const ::rf_phreaker::protobuf::rp_pcid_group& rp_gsm_eutran_neighbor::pcids_not_allowed() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_not_allowed)
  return pcids_not_allowed_ != NULL ? *pcids_not_allowed_ : *default_instance_->pcids_not_allowed_;
}
::rf_phreaker::protobuf::rp_pcid_group* rp_gsm_eutran_neighbor::mutable_pcids_not_allowed() {
  
  if (pcids_not_allowed_ == NULL) {
    pcids_not_allowed_ = new ::rf_phreaker::protobuf::rp_pcid_group;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_not_allowed)
  return pcids_not_allowed_;
}
::rf_phreaker::protobuf::rp_pcid_group* rp_gsm_eutran_neighbor::release_pcids_not_allowed() {
  
  ::rf_phreaker::protobuf::rp_pcid_group* temp = pcids_not_allowed_;
  pcids_not_allowed_ = NULL;
  return temp;
}
void rp_gsm_eutran_neighbor::set_allocated_pcids_not_allowed(::rf_phreaker::protobuf::rp_pcid_group* pcids_not_allowed) {
  delete pcids_not_allowed_;
  pcids_not_allowed_ = pcids_not_allowed;
  if (pcids_not_allowed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_not_allowed)
}

// repeated .rf_phreaker.protobuf.rp_pcid_group pcids_same_tracking_area = 9;
int rp_gsm_eutran_neighbor::pcids_same_tracking_area_size() const {
  return pcids_same_tracking_area_.size();
}
void rp_gsm_eutran_neighbor::clear_pcids_same_tracking_area() {
  pcids_same_tracking_area_.Clear();
}
const ::rf_phreaker::protobuf::rp_pcid_group& rp_gsm_eutran_neighbor::pcids_same_tracking_area(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_same_tracking_area)
  return pcids_same_tracking_area_.Get(index);
}
::rf_phreaker::protobuf::rp_pcid_group* rp_gsm_eutran_neighbor::mutable_pcids_same_tracking_area(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_same_tracking_area)
  return pcids_same_tracking_area_.Mutable(index);
}
::rf_phreaker::protobuf::rp_pcid_group* rp_gsm_eutran_neighbor::add_pcids_same_tracking_area() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_same_tracking_area)
  return pcids_same_tracking_area_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_pcid_group >*
rp_gsm_eutran_neighbor::mutable_pcids_same_tracking_area() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_same_tracking_area)
  return &pcids_same_tracking_area_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_pcid_group >&
rp_gsm_eutran_neighbor::pcids_same_tracking_area() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_same_tracking_area)
  return pcids_same_tracking_area_;
}

// repeated .rf_phreaker.protobuf.rp_pcid_group pcids_different_tracking_area = 10;
int rp_gsm_eutran_neighbor::pcids_different_tracking_area_size() const {
  return pcids_different_tracking_area_.size();
}
void rp_gsm_eutran_neighbor::clear_pcids_different_tracking_area() {
  pcids_different_tracking_area_.Clear();
}
const ::rf_phreaker::protobuf::rp_pcid_group& rp_gsm_eutran_neighbor::pcids_different_tracking_area(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_different_tracking_area)
  return pcids_different_tracking_area_.Get(index);
}
::rf_phreaker::protobuf::rp_pcid_group* rp_gsm_eutran_neighbor::mutable_pcids_different_tracking_area(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_different_tracking_area)
  return pcids_different_tracking_area_.Mutable(index);
}
::rf_phreaker::protobuf::rp_pcid_group* rp_gsm_eutran_neighbor::add_pcids_different_tracking_area() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_different_tracking_area)
  return pcids_different_tracking_area_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_pcid_group >*
rp_gsm_eutran_neighbor::mutable_pcids_different_tracking_area() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_different_tracking_area)
  return &pcids_different_tracking_area_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_pcid_group >&
rp_gsm_eutran_neighbor::pcids_different_tracking_area() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_different_tracking_area)
  return pcids_different_tracking_area_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_gsm_si1::kBandIndicatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_gsm_si1::rp_gsm_si1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_gsm_si1)
}

void rp_gsm_si1::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_gsm_si1::rp_gsm_si1(const rp_gsm_si1& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_gsm_si1)
}

void rp_gsm_si1::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  band_indicator_ = 0;
}

rp_gsm_si1::~rp_gsm_si1() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_gsm_si1)
  SharedDtor();
}

void rp_gsm_si1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_gsm_si1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_gsm_si1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_gsm_si1_descriptor_;
}

const rp_gsm_si1& rp_gsm_si1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_gsm_si1* rp_gsm_si1::default_instance_ = NULL;

rp_gsm_si1* rp_gsm_si1::New(::google::protobuf::Arena* arena) const {
  rp_gsm_si1* n = new rp_gsm_si1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_gsm_si1::Clear() {
  band_indicator_ = 0;
}

bool rp_gsm_si1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_gsm_si1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 2;
      case 2: {
        if (tag == 16) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_band_indicator(static_cast< ::rf_phreaker::protobuf::rp_band_indicator_type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_gsm_si1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_gsm_si1)
  return false;
#undef DO_
}

void rp_gsm_si1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_gsm_si1)
  // optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 2;
  if (this->band_indicator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->band_indicator(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_gsm_si1)
}

::google::protobuf::uint8* rp_gsm_si1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_gsm_si1)
  // optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 2;
  if (this->band_indicator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->band_indicator(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_gsm_si1)
  return target;
}

int rp_gsm_si1::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 2;
  if (this->band_indicator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->band_indicator());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_gsm_si1::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_gsm_si1* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_gsm_si1>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_gsm_si1::MergeFrom(const rp_gsm_si1& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.band_indicator() != 0) {
    set_band_indicator(from.band_indicator());
  }
}

void rp_gsm_si1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_gsm_si1::CopyFrom(const rp_gsm_si1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_gsm_si1::IsInitialized() const {

  return true;
}

void rp_gsm_si1::Swap(rp_gsm_si1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_gsm_si1::InternalSwap(rp_gsm_si1* other) {
  std::swap(band_indicator_, other->band_indicator_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_gsm_si1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_gsm_si1_descriptor_;
  metadata.reflection = rp_gsm_si1_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_gsm_si1

// optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 2;
void rp_gsm_si1::clear_band_indicator() {
  band_indicator_ = 0;
}
 ::rf_phreaker::protobuf::rp_band_indicator_type rp_gsm_si1::band_indicator() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si1.band_indicator)
  return static_cast< ::rf_phreaker::protobuf::rp_band_indicator_type >(band_indicator_);
}
 void rp_gsm_si1::set_band_indicator(::rf_phreaker::protobuf::rp_band_indicator_type value) {
  
  band_indicator_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si1.band_indicator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_gsm_si2::kBcchNeighborsFieldNumber;
const int rp_gsm_si2::kExtensionIndicationFieldNumber;
const int rp_gsm_si2::kBcchAllocationIndicationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_gsm_si2::rp_gsm_si2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_gsm_si2)
}

void rp_gsm_si2::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_gsm_si2::rp_gsm_si2(const rp_gsm_si2& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_gsm_si2)
}

void rp_gsm_si2::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  extension_indication_ = false;
  bcch_allocation_indication_ = 0;
}

rp_gsm_si2::~rp_gsm_si2() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_gsm_si2)
  SharedDtor();
}

void rp_gsm_si2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_gsm_si2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_gsm_si2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_gsm_si2_descriptor_;
}

const rp_gsm_si2& rp_gsm_si2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_gsm_si2* rp_gsm_si2::default_instance_ = NULL;

rp_gsm_si2* rp_gsm_si2::New(::google::protobuf::Arena* arena) const {
  rp_gsm_si2* n = new rp_gsm_si2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_gsm_si2::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_gsm_si2*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(extension_indication_, bcch_allocation_indication_);

#undef ZR_HELPER_
#undef ZR_

  bcch_neighbors_.Clear();
}

bool rp_gsm_si2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_gsm_si2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 bcch_neighbors = 2 [packed = true];
      case 2: {
        if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bcch_neighbors())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_bcch_neighbors())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_extension_indication;
        break;
      }

      // optional bool extension_indication = 3;
      case 3: {
        if (tag == 24) {
         parse_extension_indication:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extension_indication_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bcch_allocation_indication;
        break;
      }

      // optional int32 bcch_allocation_indication = 4;
      case 4: {
        if (tag == 32) {
         parse_bcch_allocation_indication:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bcch_allocation_indication_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_gsm_si2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_gsm_si2)
  return false;
#undef DO_
}

void rp_gsm_si2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_gsm_si2)
  // repeated int32 bcch_neighbors = 2 [packed = true];
  if (this->bcch_neighbors_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bcch_neighbors_cached_byte_size_);
  }
  for (int i = 0; i < this->bcch_neighbors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->bcch_neighbors(i), output);
  }

  // optional bool extension_indication = 3;
  if (this->extension_indication() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->extension_indication(), output);
  }

  // optional int32 bcch_allocation_indication = 4;
  if (this->bcch_allocation_indication() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bcch_allocation_indication(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_gsm_si2)
}

::google::protobuf::uint8* rp_gsm_si2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_gsm_si2)
  // repeated int32 bcch_neighbors = 2 [packed = true];
  if (this->bcch_neighbors_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _bcch_neighbors_cached_byte_size_, target);
  }
  for (int i = 0; i < this->bcch_neighbors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->bcch_neighbors(i), target);
  }

  // optional bool extension_indication = 3;
  if (this->extension_indication() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->extension_indication(), target);
  }

  // optional int32 bcch_allocation_indication = 4;
  if (this->bcch_allocation_indication() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bcch_allocation_indication(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_gsm_si2)
  return target;
}

int rp_gsm_si2::ByteSize() const {
  int total_size = 0;

  // optional bool extension_indication = 3;
  if (this->extension_indication() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 bcch_allocation_indication = 4;
  if (this->bcch_allocation_indication() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bcch_allocation_indication());
  }

  // repeated int32 bcch_neighbors = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->bcch_neighbors_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bcch_neighbors(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bcch_neighbors_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_gsm_si2::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_gsm_si2* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_gsm_si2>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_gsm_si2::MergeFrom(const rp_gsm_si2& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  bcch_neighbors_.MergeFrom(from.bcch_neighbors_);
  if (from.extension_indication() != 0) {
    set_extension_indication(from.extension_indication());
  }
  if (from.bcch_allocation_indication() != 0) {
    set_bcch_allocation_indication(from.bcch_allocation_indication());
  }
}

void rp_gsm_si2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_gsm_si2::CopyFrom(const rp_gsm_si2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_gsm_si2::IsInitialized() const {

  return true;
}

void rp_gsm_si2::Swap(rp_gsm_si2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_gsm_si2::InternalSwap(rp_gsm_si2* other) {
  bcch_neighbors_.UnsafeArenaSwap(&other->bcch_neighbors_);
  std::swap(extension_indication_, other->extension_indication_);
  std::swap(bcch_allocation_indication_, other->bcch_allocation_indication_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_gsm_si2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_gsm_si2_descriptor_;
  metadata.reflection = rp_gsm_si2_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_gsm_si2

// repeated int32 bcch_neighbors = 2 [packed = true];
int rp_gsm_si2::bcch_neighbors_size() const {
  return bcch_neighbors_.size();
}
void rp_gsm_si2::clear_bcch_neighbors() {
  bcch_neighbors_.Clear();
}
 ::google::protobuf::int32 rp_gsm_si2::bcch_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2.bcch_neighbors)
  return bcch_neighbors_.Get(index);
}
 void rp_gsm_si2::set_bcch_neighbors(int index, ::google::protobuf::int32 value) {
  bcch_neighbors_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2.bcch_neighbors)
}
 void rp_gsm_si2::add_bcch_neighbors(::google::protobuf::int32 value) {
  bcch_neighbors_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_si2.bcch_neighbors)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_gsm_si2::bcch_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_si2.bcch_neighbors)
  return bcch_neighbors_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_gsm_si2::mutable_bcch_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_si2.bcch_neighbors)
  return &bcch_neighbors_;
}

// optional bool extension_indication = 3;
void rp_gsm_si2::clear_extension_indication() {
  extension_indication_ = false;
}
 bool rp_gsm_si2::extension_indication() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2.extension_indication)
  return extension_indication_;
}
 void rp_gsm_si2::set_extension_indication(bool value) {
  
  extension_indication_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2.extension_indication)
}

// optional int32 bcch_allocation_indication = 4;
void rp_gsm_si2::clear_bcch_allocation_indication() {
  bcch_allocation_indication_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si2::bcch_allocation_indication() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2.bcch_allocation_indication)
  return bcch_allocation_indication_;
}
 void rp_gsm_si2::set_bcch_allocation_indication(::google::protobuf::int32 value) {
  
  bcch_allocation_indication_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2.bcch_allocation_indication)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_gsm_si2_bis::kExtendedBcchNeighborsFieldNumber;
const int rp_gsm_si2_bis::kExtensionIndicationFieldNumber;
const int rp_gsm_si2_bis::kBcchAllocationIndicationFieldNumber;
const int rp_gsm_si2_bis::kRestOctetIndexFieldNumber;
const int rp_gsm_si2_bis::kRestOctetCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_gsm_si2_bis::rp_gsm_si2_bis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_gsm_si2_bis)
}

void rp_gsm_si2_bis::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_gsm_si2_bis::rp_gsm_si2_bis(const rp_gsm_si2_bis& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_gsm_si2_bis)
}

void rp_gsm_si2_bis::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  extension_indication_ = false;
  bcch_allocation_indication_ = 0;
  rest_octet_index_ = 0;
  rest_octet_count_ = 0;
}

rp_gsm_si2_bis::~rp_gsm_si2_bis() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_gsm_si2_bis)
  SharedDtor();
}

void rp_gsm_si2_bis::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_gsm_si2_bis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_gsm_si2_bis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_gsm_si2_bis_descriptor_;
}

const rp_gsm_si2_bis& rp_gsm_si2_bis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_gsm_si2_bis* rp_gsm_si2_bis::default_instance_ = NULL;

rp_gsm_si2_bis* rp_gsm_si2_bis::New(::google::protobuf::Arena* arena) const {
  rp_gsm_si2_bis* n = new rp_gsm_si2_bis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_gsm_si2_bis::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_gsm_si2_bis*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(extension_indication_, rest_octet_count_);

#undef ZR_HELPER_
#undef ZR_

  extended_bcch_neighbors_.Clear();
}

bool rp_gsm_si2_bis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_gsm_si2_bis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 extended_bcch_neighbors = 2 [packed = true];
      case 2: {
        if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_extended_bcch_neighbors())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_extended_bcch_neighbors())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_extension_indication;
        break;
      }

      // optional bool extension_indication = 3;
      case 3: {
        if (tag == 24) {
         parse_extension_indication:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extension_indication_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bcch_allocation_indication;
        break;
      }

      // optional int32 bcch_allocation_indication = 4;
      case 4: {
        if (tag == 32) {
         parse_bcch_allocation_indication:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bcch_allocation_indication_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rest_octet_index;
        break;
      }

      // optional int32 rest_octet_index = 5;
      case 5: {
        if (tag == 40) {
         parse_rest_octet_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rest_octet_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rest_octet_count;
        break;
      }

      // optional int32 rest_octet_count = 6;
      case 6: {
        if (tag == 48) {
         parse_rest_octet_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rest_octet_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_gsm_si2_bis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_gsm_si2_bis)
  return false;
#undef DO_
}

void rp_gsm_si2_bis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_gsm_si2_bis)
  // repeated int32 extended_bcch_neighbors = 2 [packed = true];
  if (this->extended_bcch_neighbors_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_extended_bcch_neighbors_cached_byte_size_);
  }
  for (int i = 0; i < this->extended_bcch_neighbors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->extended_bcch_neighbors(i), output);
  }

  // optional bool extension_indication = 3;
  if (this->extension_indication() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->extension_indication(), output);
  }

  // optional int32 bcch_allocation_indication = 4;
  if (this->bcch_allocation_indication() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bcch_allocation_indication(), output);
  }

  // optional int32 rest_octet_index = 5;
  if (this->rest_octet_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rest_octet_index(), output);
  }

  // optional int32 rest_octet_count = 6;
  if (this->rest_octet_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rest_octet_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_gsm_si2_bis)
}

::google::protobuf::uint8* rp_gsm_si2_bis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_gsm_si2_bis)
  // repeated int32 extended_bcch_neighbors = 2 [packed = true];
  if (this->extended_bcch_neighbors_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _extended_bcch_neighbors_cached_byte_size_, target);
  }
  for (int i = 0; i < this->extended_bcch_neighbors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->extended_bcch_neighbors(i), target);
  }

  // optional bool extension_indication = 3;
  if (this->extension_indication() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->extension_indication(), target);
  }

  // optional int32 bcch_allocation_indication = 4;
  if (this->bcch_allocation_indication() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bcch_allocation_indication(), target);
  }

  // optional int32 rest_octet_index = 5;
  if (this->rest_octet_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rest_octet_index(), target);
  }

  // optional int32 rest_octet_count = 6;
  if (this->rest_octet_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rest_octet_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_gsm_si2_bis)
  return target;
}

int rp_gsm_si2_bis::ByteSize() const {
  int total_size = 0;

  // optional bool extension_indication = 3;
  if (this->extension_indication() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 bcch_allocation_indication = 4;
  if (this->bcch_allocation_indication() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bcch_allocation_indication());
  }

  // optional int32 rest_octet_index = 5;
  if (this->rest_octet_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rest_octet_index());
  }

  // optional int32 rest_octet_count = 6;
  if (this->rest_octet_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rest_octet_count());
  }

  // repeated int32 extended_bcch_neighbors = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->extended_bcch_neighbors_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->extended_bcch_neighbors(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _extended_bcch_neighbors_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_gsm_si2_bis::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_gsm_si2_bis* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_gsm_si2_bis>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_gsm_si2_bis::MergeFrom(const rp_gsm_si2_bis& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  extended_bcch_neighbors_.MergeFrom(from.extended_bcch_neighbors_);
  if (from.extension_indication() != 0) {
    set_extension_indication(from.extension_indication());
  }
  if (from.bcch_allocation_indication() != 0) {
    set_bcch_allocation_indication(from.bcch_allocation_indication());
  }
  if (from.rest_octet_index() != 0) {
    set_rest_octet_index(from.rest_octet_index());
  }
  if (from.rest_octet_count() != 0) {
    set_rest_octet_count(from.rest_octet_count());
  }
}

void rp_gsm_si2_bis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_gsm_si2_bis::CopyFrom(const rp_gsm_si2_bis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_gsm_si2_bis::IsInitialized() const {

  return true;
}

void rp_gsm_si2_bis::Swap(rp_gsm_si2_bis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_gsm_si2_bis::InternalSwap(rp_gsm_si2_bis* other) {
  extended_bcch_neighbors_.UnsafeArenaSwap(&other->extended_bcch_neighbors_);
  std::swap(extension_indication_, other->extension_indication_);
  std::swap(bcch_allocation_indication_, other->bcch_allocation_indication_);
  std::swap(rest_octet_index_, other->rest_octet_index_);
  std::swap(rest_octet_count_, other->rest_octet_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_gsm_si2_bis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_gsm_si2_bis_descriptor_;
  metadata.reflection = rp_gsm_si2_bis_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_gsm_si2_bis

// repeated int32 extended_bcch_neighbors = 2 [packed = true];
int rp_gsm_si2_bis::extended_bcch_neighbors_size() const {
  return extended_bcch_neighbors_.size();
}
void rp_gsm_si2_bis::clear_extended_bcch_neighbors() {
  extended_bcch_neighbors_.Clear();
}
 ::google::protobuf::int32 rp_gsm_si2_bis::extended_bcch_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_bis.extended_bcch_neighbors)
  return extended_bcch_neighbors_.Get(index);
}
 void rp_gsm_si2_bis::set_extended_bcch_neighbors(int index, ::google::protobuf::int32 value) {
  extended_bcch_neighbors_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_bis.extended_bcch_neighbors)
}
 void rp_gsm_si2_bis::add_extended_bcch_neighbors(::google::protobuf::int32 value) {
  extended_bcch_neighbors_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_si2_bis.extended_bcch_neighbors)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_gsm_si2_bis::extended_bcch_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_si2_bis.extended_bcch_neighbors)
  return extended_bcch_neighbors_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_gsm_si2_bis::mutable_extended_bcch_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_si2_bis.extended_bcch_neighbors)
  return &extended_bcch_neighbors_;
}

// optional bool extension_indication = 3;
void rp_gsm_si2_bis::clear_extension_indication() {
  extension_indication_ = false;
}
 bool rp_gsm_si2_bis::extension_indication() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_bis.extension_indication)
  return extension_indication_;
}
 void rp_gsm_si2_bis::set_extension_indication(bool value) {
  
  extension_indication_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_bis.extension_indication)
}

// optional int32 bcch_allocation_indication = 4;
void rp_gsm_si2_bis::clear_bcch_allocation_indication() {
  bcch_allocation_indication_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si2_bis::bcch_allocation_indication() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_bis.bcch_allocation_indication)
  return bcch_allocation_indication_;
}
 void rp_gsm_si2_bis::set_bcch_allocation_indication(::google::protobuf::int32 value) {
  
  bcch_allocation_indication_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_bis.bcch_allocation_indication)
}

// optional int32 rest_octet_index = 5;
void rp_gsm_si2_bis::clear_rest_octet_index() {
  rest_octet_index_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si2_bis::rest_octet_index() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_bis.rest_octet_index)
  return rest_octet_index_;
}
 void rp_gsm_si2_bis::set_rest_octet_index(::google::protobuf::int32 value) {
  
  rest_octet_index_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_bis.rest_octet_index)
}

// optional int32 rest_octet_count = 6;
void rp_gsm_si2_bis::clear_rest_octet_count() {
  rest_octet_count_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si2_bis::rest_octet_count() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_bis.rest_octet_count)
  return rest_octet_count_;
}
 void rp_gsm_si2_bis::set_rest_octet_count(::google::protobuf::int32 value) {
  
  rest_octet_count_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_bis.rest_octet_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_gsm_si2_ter::kExtendedBcchNeighborsFieldNumber;
const int rp_gsm_si2_ter::kGsmBcchAllocationIndicationFieldNumber;
const int rp_gsm_si2_ter::kBcchNeighborsMultibandReportingFieldNumber;
const int rp_gsm_si2_ter::kUtranNeighborsFieldNumber;
const int rp_gsm_si2_ter::kRestOctetIndexFieldNumber;
const int rp_gsm_si2_ter::kRestOctetCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_gsm_si2_ter::rp_gsm_si2_ter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_gsm_si2_ter)
}

void rp_gsm_si2_ter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_gsm_si2_ter::rp_gsm_si2_ter(const rp_gsm_si2_ter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_gsm_si2_ter)
}

void rp_gsm_si2_ter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  gsm_bcch_allocation_indication_ = 0;
  bcch_neighbors_multiband_reporting_ = 0;
  rest_octet_index_ = 0;
  rest_octet_count_ = 0;
}

rp_gsm_si2_ter::~rp_gsm_si2_ter() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_gsm_si2_ter)
  SharedDtor();
}

void rp_gsm_si2_ter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_gsm_si2_ter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_gsm_si2_ter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_gsm_si2_ter_descriptor_;
}

const rp_gsm_si2_ter& rp_gsm_si2_ter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_gsm_si2_ter* rp_gsm_si2_ter::default_instance_ = NULL;

rp_gsm_si2_ter* rp_gsm_si2_ter::New(::google::protobuf::Arena* arena) const {
  rp_gsm_si2_ter* n = new rp_gsm_si2_ter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_gsm_si2_ter::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_gsm_si2_ter*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gsm_bcch_allocation_indication_, bcch_neighbors_multiband_reporting_);
  ZR_(rest_octet_index_, rest_octet_count_);

#undef ZR_HELPER_
#undef ZR_

  extended_bcch_neighbors_.Clear();
  utran_neighbors_.Clear();
}

bool rp_gsm_si2_ter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_gsm_si2_ter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 extended_bcch_neighbors = 2 [packed = true];
      case 2: {
        if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_extended_bcch_neighbors())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_extended_bcch_neighbors())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gsm_bcch_allocation_indication;
        break;
      }

      // optional int32 gsm_bcch_allocation_indication = 3;
      case 3: {
        if (tag == 24) {
         parse_gsm_bcch_allocation_indication:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsm_bcch_allocation_indication_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bcch_neighbors_multiband_reporting;
        break;
      }

      // optional int32 bcch_neighbors_multiband_reporting = 4;
      case 4: {
        if (tag == 32) {
         parse_bcch_neighbors_multiband_reporting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bcch_neighbors_multiband_reporting_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_utran_neighbors;
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_gsm_utran_neighbor utran_neighbors = 5;
      case 5: {
        if (tag == 42) {
         parse_utran_neighbors:
          DO_(input->IncrementRecursionDepth());
         parse_loop_utran_neighbors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_utran_neighbors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_utran_neighbors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_rest_octet_index;
        break;
      }

      // optional int32 rest_octet_index = 6;
      case 6: {
        if (tag == 48) {
         parse_rest_octet_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rest_octet_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rest_octet_count;
        break;
      }

      // optional int32 rest_octet_count = 7;
      case 7: {
        if (tag == 56) {
         parse_rest_octet_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rest_octet_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_gsm_si2_ter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_gsm_si2_ter)
  return false;
#undef DO_
}

void rp_gsm_si2_ter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_gsm_si2_ter)
  // repeated int32 extended_bcch_neighbors = 2 [packed = true];
  if (this->extended_bcch_neighbors_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_extended_bcch_neighbors_cached_byte_size_);
  }
  for (int i = 0; i < this->extended_bcch_neighbors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->extended_bcch_neighbors(i), output);
  }

  // optional int32 gsm_bcch_allocation_indication = 3;
  if (this->gsm_bcch_allocation_indication() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gsm_bcch_allocation_indication(), output);
  }

  // optional int32 bcch_neighbors_multiband_reporting = 4;
  if (this->bcch_neighbors_multiband_reporting() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bcch_neighbors_multiband_reporting(), output);
  }

  // repeated .rf_phreaker.protobuf.rp_gsm_utran_neighbor utran_neighbors = 5;
  for (unsigned int i = 0, n = this->utran_neighbors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->utran_neighbors(i), output);
  }

  // optional int32 rest_octet_index = 6;
  if (this->rest_octet_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rest_octet_index(), output);
  }

  // optional int32 rest_octet_count = 7;
  if (this->rest_octet_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rest_octet_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_gsm_si2_ter)
}

::google::protobuf::uint8* rp_gsm_si2_ter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_gsm_si2_ter)
  // repeated int32 extended_bcch_neighbors = 2 [packed = true];
  if (this->extended_bcch_neighbors_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _extended_bcch_neighbors_cached_byte_size_, target);
  }
  for (int i = 0; i < this->extended_bcch_neighbors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->extended_bcch_neighbors(i), target);
  }

  // optional int32 gsm_bcch_allocation_indication = 3;
  if (this->gsm_bcch_allocation_indication() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gsm_bcch_allocation_indication(), target);
  }

  // optional int32 bcch_neighbors_multiband_reporting = 4;
  if (this->bcch_neighbors_multiband_reporting() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bcch_neighbors_multiband_reporting(), target);
  }

  // repeated .rf_phreaker.protobuf.rp_gsm_utran_neighbor utran_neighbors = 5;
  for (unsigned int i = 0, n = this->utran_neighbors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->utran_neighbors(i), target);
  }

  // optional int32 rest_octet_index = 6;
  if (this->rest_octet_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rest_octet_index(), target);
  }

  // optional int32 rest_octet_count = 7;
  if (this->rest_octet_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rest_octet_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_gsm_si2_ter)
  return target;
}

int rp_gsm_si2_ter::ByteSize() const {
  int total_size = 0;

  // optional int32 gsm_bcch_allocation_indication = 3;
  if (this->gsm_bcch_allocation_indication() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gsm_bcch_allocation_indication());
  }

  // optional int32 bcch_neighbors_multiband_reporting = 4;
  if (this->bcch_neighbors_multiband_reporting() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bcch_neighbors_multiband_reporting());
  }

  // optional int32 rest_octet_index = 6;
  if (this->rest_octet_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rest_octet_index());
  }

  // optional int32 rest_octet_count = 7;
  if (this->rest_octet_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rest_octet_count());
  }

  // repeated int32 extended_bcch_neighbors = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->extended_bcch_neighbors_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->extended_bcch_neighbors(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _extended_bcch_neighbors_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .rf_phreaker.protobuf.rp_gsm_utran_neighbor utran_neighbors = 5;
  total_size += 1 * this->utran_neighbors_size();
  for (int i = 0; i < this->utran_neighbors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->utran_neighbors(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_gsm_si2_ter::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_gsm_si2_ter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_gsm_si2_ter>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_gsm_si2_ter::MergeFrom(const rp_gsm_si2_ter& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  extended_bcch_neighbors_.MergeFrom(from.extended_bcch_neighbors_);
  utran_neighbors_.MergeFrom(from.utran_neighbors_);
  if (from.gsm_bcch_allocation_indication() != 0) {
    set_gsm_bcch_allocation_indication(from.gsm_bcch_allocation_indication());
  }
  if (from.bcch_neighbors_multiband_reporting() != 0) {
    set_bcch_neighbors_multiband_reporting(from.bcch_neighbors_multiband_reporting());
  }
  if (from.rest_octet_index() != 0) {
    set_rest_octet_index(from.rest_octet_index());
  }
  if (from.rest_octet_count() != 0) {
    set_rest_octet_count(from.rest_octet_count());
  }
}

void rp_gsm_si2_ter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_gsm_si2_ter::CopyFrom(const rp_gsm_si2_ter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_gsm_si2_ter::IsInitialized() const {

  return true;
}

void rp_gsm_si2_ter::Swap(rp_gsm_si2_ter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_gsm_si2_ter::InternalSwap(rp_gsm_si2_ter* other) {
  extended_bcch_neighbors_.UnsafeArenaSwap(&other->extended_bcch_neighbors_);
  std::swap(gsm_bcch_allocation_indication_, other->gsm_bcch_allocation_indication_);
  std::swap(bcch_neighbors_multiband_reporting_, other->bcch_neighbors_multiband_reporting_);
  utran_neighbors_.UnsafeArenaSwap(&other->utran_neighbors_);
  std::swap(rest_octet_index_, other->rest_octet_index_);
  std::swap(rest_octet_count_, other->rest_octet_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_gsm_si2_ter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_gsm_si2_ter_descriptor_;
  metadata.reflection = rp_gsm_si2_ter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_gsm_si2_ter

// repeated int32 extended_bcch_neighbors = 2 [packed = true];
int rp_gsm_si2_ter::extended_bcch_neighbors_size() const {
  return extended_bcch_neighbors_.size();
}
void rp_gsm_si2_ter::clear_extended_bcch_neighbors() {
  extended_bcch_neighbors_.Clear();
}
 ::google::protobuf::int32 rp_gsm_si2_ter::extended_bcch_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_ter.extended_bcch_neighbors)
  return extended_bcch_neighbors_.Get(index);
}
 void rp_gsm_si2_ter::set_extended_bcch_neighbors(int index, ::google::protobuf::int32 value) {
  extended_bcch_neighbors_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_ter.extended_bcch_neighbors)
}
 void rp_gsm_si2_ter::add_extended_bcch_neighbors(::google::protobuf::int32 value) {
  extended_bcch_neighbors_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_si2_ter.extended_bcch_neighbors)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_gsm_si2_ter::extended_bcch_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_si2_ter.extended_bcch_neighbors)
  return extended_bcch_neighbors_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_gsm_si2_ter::mutable_extended_bcch_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_si2_ter.extended_bcch_neighbors)
  return &extended_bcch_neighbors_;
}

// optional int32 gsm_bcch_allocation_indication = 3;
void rp_gsm_si2_ter::clear_gsm_bcch_allocation_indication() {
  gsm_bcch_allocation_indication_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si2_ter::gsm_bcch_allocation_indication() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_ter.gsm_bcch_allocation_indication)
  return gsm_bcch_allocation_indication_;
}
 void rp_gsm_si2_ter::set_gsm_bcch_allocation_indication(::google::protobuf::int32 value) {
  
  gsm_bcch_allocation_indication_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_ter.gsm_bcch_allocation_indication)
}

// optional int32 bcch_neighbors_multiband_reporting = 4;
void rp_gsm_si2_ter::clear_bcch_neighbors_multiband_reporting() {
  bcch_neighbors_multiband_reporting_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si2_ter::bcch_neighbors_multiband_reporting() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_ter.bcch_neighbors_multiband_reporting)
  return bcch_neighbors_multiband_reporting_;
}
 void rp_gsm_si2_ter::set_bcch_neighbors_multiband_reporting(::google::protobuf::int32 value) {
  
  bcch_neighbors_multiband_reporting_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_ter.bcch_neighbors_multiband_reporting)
}

// repeated .rf_phreaker.protobuf.rp_gsm_utran_neighbor utran_neighbors = 5;
int rp_gsm_si2_ter::utran_neighbors_size() const {
  return utran_neighbors_.size();
}
void rp_gsm_si2_ter::clear_utran_neighbors() {
  utran_neighbors_.Clear();
}
const ::rf_phreaker::protobuf::rp_gsm_utran_neighbor& rp_gsm_si2_ter::utran_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_ter.utran_neighbors)
  return utran_neighbors_.Get(index);
}
::rf_phreaker::protobuf::rp_gsm_utran_neighbor* rp_gsm_si2_ter::mutable_utran_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_si2_ter.utran_neighbors)
  return utran_neighbors_.Mutable(index);
}
::rf_phreaker::protobuf::rp_gsm_utran_neighbor* rp_gsm_si2_ter::add_utran_neighbors() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_si2_ter.utran_neighbors)
  return utran_neighbors_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_utran_neighbor >*
rp_gsm_si2_ter::mutable_utran_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_si2_ter.utran_neighbors)
  return &utran_neighbors_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_utran_neighbor >&
rp_gsm_si2_ter::utran_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_si2_ter.utran_neighbors)
  return utran_neighbors_;
}

// optional int32 rest_octet_index = 6;
void rp_gsm_si2_ter::clear_rest_octet_index() {
  rest_octet_index_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si2_ter::rest_octet_index() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_ter.rest_octet_index)
  return rest_octet_index_;
}
 void rp_gsm_si2_ter::set_rest_octet_index(::google::protobuf::int32 value) {
  
  rest_octet_index_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_ter.rest_octet_index)
}

// optional int32 rest_octet_count = 7;
void rp_gsm_si2_ter::clear_rest_octet_count() {
  rest_octet_count_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si2_ter::rest_octet_count() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_ter.rest_octet_count)
  return rest_octet_count_;
}
 void rp_gsm_si2_ter::set_rest_octet_count(::google::protobuf::int32 value) {
  
  rest_octet_count_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_ter.rest_octet_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_gsm_si2_quater::kGsmBcchAllocationIndicationFieldNumber;
const int rp_gsm_si2_quater::kP3GBcchAllocationIndicationFieldNumber;
const int rp_gsm_si2_quater::kUtranNeighborCellIndexStart3GFieldNumber;
const int rp_gsm_si2_quater::kUtranNeighborCellAbsoluteIndexStartEmrFieldNumber;
const int rp_gsm_si2_quater::kUtranNeighborsFieldNumber;
const int rp_gsm_si2_quater::kEutranNeighborsFieldNumber;
const int rp_gsm_si2_quater::kRestOctetIndexFieldNumber;
const int rp_gsm_si2_quater::kRestOctetCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_gsm_si2_quater::rp_gsm_si2_quater()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_gsm_si2_quater)
}

void rp_gsm_si2_quater::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_gsm_si2_quater::rp_gsm_si2_quater(const rp_gsm_si2_quater& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_gsm_si2_quater)
}

void rp_gsm_si2_quater::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  gsm_bcch_allocation_indication_ = 0;
  p3g_bcch_allocation_indication_ = 0;
  utran_neighbor_cell_index_start_3g_ = 0;
  utran_neighbor_cell_absolute_index_start_emr_ = 0;
  rest_octet_index_ = 0;
  rest_octet_count_ = 0;
}

rp_gsm_si2_quater::~rp_gsm_si2_quater() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_gsm_si2_quater)
  SharedDtor();
}

void rp_gsm_si2_quater::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_gsm_si2_quater::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_gsm_si2_quater::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_gsm_si2_quater_descriptor_;
}

const rp_gsm_si2_quater& rp_gsm_si2_quater::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_gsm_si2_quater* rp_gsm_si2_quater::default_instance_ = NULL;

rp_gsm_si2_quater* rp_gsm_si2_quater::New(::google::protobuf::Arena* arena) const {
  rp_gsm_si2_quater* n = new rp_gsm_si2_quater;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_gsm_si2_quater::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_gsm_si2_quater*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gsm_bcch_allocation_indication_, utran_neighbor_cell_absolute_index_start_emr_);
  ZR_(rest_octet_index_, rest_octet_count_);

#undef ZR_HELPER_
#undef ZR_

  utran_neighbors_.Clear();
  eutran_neighbors_.Clear();
}

bool rp_gsm_si2_quater::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_gsm_si2_quater)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gsm_bcch_allocation_indication = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsm_bcch_allocation_indication_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_p3g_bcch_allocation_indication;
        break;
      }

      // optional int32 p3g_bcch_allocation_indication = 3;
      case 3: {
        if (tag == 24) {
         parse_p3g_bcch_allocation_indication:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p3g_bcch_allocation_indication_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_utran_neighbor_cell_index_start_3g;
        break;
      }

      // optional int32 utran_neighbor_cell_index_start_3g = 4;
      case 4: {
        if (tag == 32) {
         parse_utran_neighbor_cell_index_start_3g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &utran_neighbor_cell_index_start_3g_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_utran_neighbor_cell_absolute_index_start_emr;
        break;
      }

      // optional int32 utran_neighbor_cell_absolute_index_start_emr = 5;
      case 5: {
        if (tag == 40) {
         parse_utran_neighbor_cell_absolute_index_start_emr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &utran_neighbor_cell_absolute_index_start_emr_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_utran_neighbors;
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_gsm_utran_neighbor utran_neighbors = 6;
      case 6: {
        if (tag == 50) {
         parse_utran_neighbors:
          DO_(input->IncrementRecursionDepth());
         parse_loop_utran_neighbors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_utran_neighbors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_utran_neighbors;
        if (input->ExpectTag(58)) goto parse_loop_eutran_neighbors;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_gsm_eutran_neighbor eutran_neighbors = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_eutran_neighbors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_eutran_neighbors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_eutran_neighbors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(64)) goto parse_rest_octet_index;
        break;
      }

      // optional int32 rest_octet_index = 8;
      case 8: {
        if (tag == 64) {
         parse_rest_octet_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rest_octet_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_rest_octet_count;
        break;
      }

      // optional int32 rest_octet_count = 9;
      case 9: {
        if (tag == 72) {
         parse_rest_octet_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rest_octet_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_gsm_si2_quater)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_gsm_si2_quater)
  return false;
#undef DO_
}

void rp_gsm_si2_quater::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_gsm_si2_quater)
  // optional int32 gsm_bcch_allocation_indication = 2;
  if (this->gsm_bcch_allocation_indication() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gsm_bcch_allocation_indication(), output);
  }

  // optional int32 p3g_bcch_allocation_indication = 3;
  if (this->p3g_bcch_allocation_indication() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->p3g_bcch_allocation_indication(), output);
  }

  // optional int32 utran_neighbor_cell_index_start_3g = 4;
  if (this->utran_neighbor_cell_index_start_3g() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->utran_neighbor_cell_index_start_3g(), output);
  }

  // optional int32 utran_neighbor_cell_absolute_index_start_emr = 5;
  if (this->utran_neighbor_cell_absolute_index_start_emr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->utran_neighbor_cell_absolute_index_start_emr(), output);
  }

  // repeated .rf_phreaker.protobuf.rp_gsm_utran_neighbor utran_neighbors = 6;
  for (unsigned int i = 0, n = this->utran_neighbors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->utran_neighbors(i), output);
  }

  // repeated .rf_phreaker.protobuf.rp_gsm_eutran_neighbor eutran_neighbors = 7;
  for (unsigned int i = 0, n = this->eutran_neighbors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->eutran_neighbors(i), output);
  }

  // optional int32 rest_octet_index = 8;
  if (this->rest_octet_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rest_octet_index(), output);
  }

  // optional int32 rest_octet_count = 9;
  if (this->rest_octet_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->rest_octet_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_gsm_si2_quater)
}

::google::protobuf::uint8* rp_gsm_si2_quater::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_gsm_si2_quater)
  // optional int32 gsm_bcch_allocation_indication = 2;
  if (this->gsm_bcch_allocation_indication() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gsm_bcch_allocation_indication(), target);
  }

  // optional int32 p3g_bcch_allocation_indication = 3;
  if (this->p3g_bcch_allocation_indication() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->p3g_bcch_allocation_indication(), target);
  }

  // optional int32 utran_neighbor_cell_index_start_3g = 4;
  if (this->utran_neighbor_cell_index_start_3g() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->utran_neighbor_cell_index_start_3g(), target);
  }

  // optional int32 utran_neighbor_cell_absolute_index_start_emr = 5;
  if (this->utran_neighbor_cell_absolute_index_start_emr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->utran_neighbor_cell_absolute_index_start_emr(), target);
  }

  // repeated .rf_phreaker.protobuf.rp_gsm_utran_neighbor utran_neighbors = 6;
  for (unsigned int i = 0, n = this->utran_neighbors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->utran_neighbors(i), target);
  }

  // repeated .rf_phreaker.protobuf.rp_gsm_eutran_neighbor eutran_neighbors = 7;
  for (unsigned int i = 0, n = this->eutran_neighbors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->eutran_neighbors(i), target);
  }

  // optional int32 rest_octet_index = 8;
  if (this->rest_octet_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rest_octet_index(), target);
  }

  // optional int32 rest_octet_count = 9;
  if (this->rest_octet_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->rest_octet_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_gsm_si2_quater)
  return target;
}

int rp_gsm_si2_quater::ByteSize() const {
  int total_size = 0;

  // optional int32 gsm_bcch_allocation_indication = 2;
  if (this->gsm_bcch_allocation_indication() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gsm_bcch_allocation_indication());
  }

  // optional int32 p3g_bcch_allocation_indication = 3;
  if (this->p3g_bcch_allocation_indication() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->p3g_bcch_allocation_indication());
  }

  // optional int32 utran_neighbor_cell_index_start_3g = 4;
  if (this->utran_neighbor_cell_index_start_3g() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->utran_neighbor_cell_index_start_3g());
  }

  // optional int32 utran_neighbor_cell_absolute_index_start_emr = 5;
  if (this->utran_neighbor_cell_absolute_index_start_emr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->utran_neighbor_cell_absolute_index_start_emr());
  }

  // optional int32 rest_octet_index = 8;
  if (this->rest_octet_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rest_octet_index());
  }

  // optional int32 rest_octet_count = 9;
  if (this->rest_octet_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rest_octet_count());
  }

  // repeated .rf_phreaker.protobuf.rp_gsm_utran_neighbor utran_neighbors = 6;
  total_size += 1 * this->utran_neighbors_size();
  for (int i = 0; i < this->utran_neighbors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->utran_neighbors(i));
  }

  // repeated .rf_phreaker.protobuf.rp_gsm_eutran_neighbor eutran_neighbors = 7;
  total_size += 1 * this->eutran_neighbors_size();
  for (int i = 0; i < this->eutran_neighbors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eutran_neighbors(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_gsm_si2_quater::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_gsm_si2_quater* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_gsm_si2_quater>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_gsm_si2_quater::MergeFrom(const rp_gsm_si2_quater& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  utran_neighbors_.MergeFrom(from.utran_neighbors_);
  eutran_neighbors_.MergeFrom(from.eutran_neighbors_);
  if (from.gsm_bcch_allocation_indication() != 0) {
    set_gsm_bcch_allocation_indication(from.gsm_bcch_allocation_indication());
  }
  if (from.p3g_bcch_allocation_indication() != 0) {
    set_p3g_bcch_allocation_indication(from.p3g_bcch_allocation_indication());
  }
  if (from.utran_neighbor_cell_index_start_3g() != 0) {
    set_utran_neighbor_cell_index_start_3g(from.utran_neighbor_cell_index_start_3g());
  }
  if (from.utran_neighbor_cell_absolute_index_start_emr() != 0) {
    set_utran_neighbor_cell_absolute_index_start_emr(from.utran_neighbor_cell_absolute_index_start_emr());
  }
  if (from.rest_octet_index() != 0) {
    set_rest_octet_index(from.rest_octet_index());
  }
  if (from.rest_octet_count() != 0) {
    set_rest_octet_count(from.rest_octet_count());
  }
}

void rp_gsm_si2_quater::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_gsm_si2_quater::CopyFrom(const rp_gsm_si2_quater& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_gsm_si2_quater::IsInitialized() const {

  return true;
}

void rp_gsm_si2_quater::Swap(rp_gsm_si2_quater* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_gsm_si2_quater::InternalSwap(rp_gsm_si2_quater* other) {
  std::swap(gsm_bcch_allocation_indication_, other->gsm_bcch_allocation_indication_);
  std::swap(p3g_bcch_allocation_indication_, other->p3g_bcch_allocation_indication_);
  std::swap(utran_neighbor_cell_index_start_3g_, other->utran_neighbor_cell_index_start_3g_);
  std::swap(utran_neighbor_cell_absolute_index_start_emr_, other->utran_neighbor_cell_absolute_index_start_emr_);
  utran_neighbors_.UnsafeArenaSwap(&other->utran_neighbors_);
  eutran_neighbors_.UnsafeArenaSwap(&other->eutran_neighbors_);
  std::swap(rest_octet_index_, other->rest_octet_index_);
  std::swap(rest_octet_count_, other->rest_octet_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_gsm_si2_quater::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_gsm_si2_quater_descriptor_;
  metadata.reflection = rp_gsm_si2_quater_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_gsm_si2_quater

// optional int32 gsm_bcch_allocation_indication = 2;
void rp_gsm_si2_quater::clear_gsm_bcch_allocation_indication() {
  gsm_bcch_allocation_indication_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si2_quater::gsm_bcch_allocation_indication() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_quater.gsm_bcch_allocation_indication)
  return gsm_bcch_allocation_indication_;
}
 void rp_gsm_si2_quater::set_gsm_bcch_allocation_indication(::google::protobuf::int32 value) {
  
  gsm_bcch_allocation_indication_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_quater.gsm_bcch_allocation_indication)
}

// optional int32 p3g_bcch_allocation_indication = 3;
void rp_gsm_si2_quater::clear_p3g_bcch_allocation_indication() {
  p3g_bcch_allocation_indication_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si2_quater::p3g_bcch_allocation_indication() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_quater.p3g_bcch_allocation_indication)
  return p3g_bcch_allocation_indication_;
}
 void rp_gsm_si2_quater::set_p3g_bcch_allocation_indication(::google::protobuf::int32 value) {
  
  p3g_bcch_allocation_indication_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_quater.p3g_bcch_allocation_indication)
}

// optional int32 utran_neighbor_cell_index_start_3g = 4;
void rp_gsm_si2_quater::clear_utran_neighbor_cell_index_start_3g() {
  utran_neighbor_cell_index_start_3g_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si2_quater::utran_neighbor_cell_index_start_3g() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbor_cell_index_start_3g)
  return utran_neighbor_cell_index_start_3g_;
}
 void rp_gsm_si2_quater::set_utran_neighbor_cell_index_start_3g(::google::protobuf::int32 value) {
  
  utran_neighbor_cell_index_start_3g_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbor_cell_index_start_3g)
}

// optional int32 utran_neighbor_cell_absolute_index_start_emr = 5;
void rp_gsm_si2_quater::clear_utran_neighbor_cell_absolute_index_start_emr() {
  utran_neighbor_cell_absolute_index_start_emr_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si2_quater::utran_neighbor_cell_absolute_index_start_emr() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbor_cell_absolute_index_start_emr)
  return utran_neighbor_cell_absolute_index_start_emr_;
}
 void rp_gsm_si2_quater::set_utran_neighbor_cell_absolute_index_start_emr(::google::protobuf::int32 value) {
  
  utran_neighbor_cell_absolute_index_start_emr_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbor_cell_absolute_index_start_emr)
}

// repeated .rf_phreaker.protobuf.rp_gsm_utran_neighbor utran_neighbors = 6;
int rp_gsm_si2_quater::utran_neighbors_size() const {
  return utran_neighbors_.size();
}
void rp_gsm_si2_quater::clear_utran_neighbors() {
  utran_neighbors_.Clear();
}
const ::rf_phreaker::protobuf::rp_gsm_utran_neighbor& rp_gsm_si2_quater::utran_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbors)
  return utran_neighbors_.Get(index);
}
::rf_phreaker::protobuf::rp_gsm_utran_neighbor* rp_gsm_si2_quater::mutable_utran_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbors)
  return utran_neighbors_.Mutable(index);
}
::rf_phreaker::protobuf::rp_gsm_utran_neighbor* rp_gsm_si2_quater::add_utran_neighbors() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbors)
  return utran_neighbors_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_utran_neighbor >*
rp_gsm_si2_quater::mutable_utran_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbors)
  return &utran_neighbors_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_utran_neighbor >&
rp_gsm_si2_quater::utran_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbors)
  return utran_neighbors_;
}

// repeated .rf_phreaker.protobuf.rp_gsm_eutran_neighbor eutran_neighbors = 7;
int rp_gsm_si2_quater::eutran_neighbors_size() const {
  return eutran_neighbors_.size();
}
void rp_gsm_si2_quater::clear_eutran_neighbors() {
  eutran_neighbors_.Clear();
}
const ::rf_phreaker::protobuf::rp_gsm_eutran_neighbor& rp_gsm_si2_quater::eutran_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_quater.eutran_neighbors)
  return eutran_neighbors_.Get(index);
}
::rf_phreaker::protobuf::rp_gsm_eutran_neighbor* rp_gsm_si2_quater::mutable_eutran_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_si2_quater.eutran_neighbors)
  return eutran_neighbors_.Mutable(index);
}
::rf_phreaker::protobuf::rp_gsm_eutran_neighbor* rp_gsm_si2_quater::add_eutran_neighbors() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_si2_quater.eutran_neighbors)
  return eutran_neighbors_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_eutran_neighbor >*
rp_gsm_si2_quater::mutable_eutran_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_si2_quater.eutran_neighbors)
  return &eutran_neighbors_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_eutran_neighbor >&
rp_gsm_si2_quater::eutran_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_si2_quater.eutran_neighbors)
  return eutran_neighbors_;
}

// optional int32 rest_octet_index = 8;
void rp_gsm_si2_quater::clear_rest_octet_index() {
  rest_octet_index_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si2_quater::rest_octet_index() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_quater.rest_octet_index)
  return rest_octet_index_;
}
 void rp_gsm_si2_quater::set_rest_octet_index(::google::protobuf::int32 value) {
  
  rest_octet_index_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_quater.rest_octet_index)
}

// optional int32 rest_octet_count = 9;
void rp_gsm_si2_quater::clear_rest_octet_count() {
  rest_octet_count_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si2_quater::rest_octet_count() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_quater.rest_octet_count)
  return rest_octet_count_;
}
 void rp_gsm_si2_quater::set_rest_octet_count(::google::protobuf::int32 value) {
  
  rest_octet_count_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_quater.rest_octet_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_gsm_selection_parameters::kCbqFieldNumber;
const int rp_gsm_selection_parameters::kCellReselectOffsetDbFieldNumber;
const int rp_gsm_selection_parameters::kTemporaryOffsetDbFieldNumber;
const int rp_gsm_selection_parameters::kPenaltyTimeSecondsFieldNumber;
const int rp_gsm_selection_parameters::kSubtractReselectCellOffsetIgnoreTempOffsetFieldNumber;
const int rp_gsm_selection_parameters::kApplyInfinityOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_gsm_selection_parameters::rp_gsm_selection_parameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_gsm_selection_parameters)
}

void rp_gsm_selection_parameters::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_gsm_selection_parameters::rp_gsm_selection_parameters(const rp_gsm_selection_parameters& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_gsm_selection_parameters)
}

void rp_gsm_selection_parameters::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cbq_ = 0;
  cell_reselect_offset_db_ = 0;
  temporary_offset_db_ = 0;
  penalty_time_seconds_ = 0;
  subtract_reselect_cell_offset_ignore_temp_offset_ = false;
  apply_infinity_offset_ = false;
}

rp_gsm_selection_parameters::~rp_gsm_selection_parameters() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_gsm_selection_parameters)
  SharedDtor();
}

void rp_gsm_selection_parameters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_gsm_selection_parameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_gsm_selection_parameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_gsm_selection_parameters_descriptor_;
}

const rp_gsm_selection_parameters& rp_gsm_selection_parameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_gsm_selection_parameters* rp_gsm_selection_parameters::default_instance_ = NULL;

rp_gsm_selection_parameters* rp_gsm_selection_parameters::New(::google::protobuf::Arena* arena) const {
  rp_gsm_selection_parameters* n = new rp_gsm_selection_parameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_gsm_selection_parameters::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_gsm_selection_parameters*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cbq_, apply_infinity_offset_);

#undef ZR_HELPER_
#undef ZR_

}

bool rp_gsm_selection_parameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_gsm_selection_parameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cbq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_reselect_offset_db;
        break;
      }

      // optional int32 cell_reselect_offset_db = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_reselect_offset_db:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_reselect_offset_db_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_temporary_offset_db;
        break;
      }

      // optional int32 temporary_offset_db = 3;
      case 3: {
        if (tag == 24) {
         parse_temporary_offset_db:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temporary_offset_db_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_penalty_time_seconds;
        break;
      }

      // optional int32 penalty_time_seconds = 4;
      case 4: {
        if (tag == 32) {
         parse_penalty_time_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penalty_time_seconds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_subtract_reselect_cell_offset_ignore_temp_offset;
        break;
      }

      // optional bool subtract_reselect_cell_offset_ignore_temp_offset = 5;
      case 5: {
        if (tag == 40) {
         parse_subtract_reselect_cell_offset_ignore_temp_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subtract_reselect_cell_offset_ignore_temp_offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_apply_infinity_offset;
        break;
      }

      // optional bool apply_infinity_offset = 6;
      case 6: {
        if (tag == 48) {
         parse_apply_infinity_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_infinity_offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_gsm_selection_parameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_gsm_selection_parameters)
  return false;
#undef DO_
}

void rp_gsm_selection_parameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_gsm_selection_parameters)
  // optional int32 cbq = 1;
  if (this->cbq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cbq(), output);
  }

  // optional int32 cell_reselect_offset_db = 2;
  if (this->cell_reselect_offset_db() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cell_reselect_offset_db(), output);
  }

  // optional int32 temporary_offset_db = 3;
  if (this->temporary_offset_db() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->temporary_offset_db(), output);
  }

  // optional int32 penalty_time_seconds = 4;
  if (this->penalty_time_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->penalty_time_seconds(), output);
  }

  // optional bool subtract_reselect_cell_offset_ignore_temp_offset = 5;
  if (this->subtract_reselect_cell_offset_ignore_temp_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->subtract_reselect_cell_offset_ignore_temp_offset(), output);
  }

  // optional bool apply_infinity_offset = 6;
  if (this->apply_infinity_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->apply_infinity_offset(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_gsm_selection_parameters)
}

::google::protobuf::uint8* rp_gsm_selection_parameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_gsm_selection_parameters)
  // optional int32 cbq = 1;
  if (this->cbq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cbq(), target);
  }

  // optional int32 cell_reselect_offset_db = 2;
  if (this->cell_reselect_offset_db() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cell_reselect_offset_db(), target);
  }

  // optional int32 temporary_offset_db = 3;
  if (this->temporary_offset_db() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->temporary_offset_db(), target);
  }

  // optional int32 penalty_time_seconds = 4;
  if (this->penalty_time_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->penalty_time_seconds(), target);
  }

  // optional bool subtract_reselect_cell_offset_ignore_temp_offset = 5;
  if (this->subtract_reselect_cell_offset_ignore_temp_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->subtract_reselect_cell_offset_ignore_temp_offset(), target);
  }

  // optional bool apply_infinity_offset = 6;
  if (this->apply_infinity_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->apply_infinity_offset(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_gsm_selection_parameters)
  return target;
}

int rp_gsm_selection_parameters::ByteSize() const {
  int total_size = 0;

  // optional int32 cbq = 1;
  if (this->cbq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cbq());
  }

  // optional int32 cell_reselect_offset_db = 2;
  if (this->cell_reselect_offset_db() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cell_reselect_offset_db());
  }

  // optional int32 temporary_offset_db = 3;
  if (this->temporary_offset_db() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->temporary_offset_db());
  }

  // optional int32 penalty_time_seconds = 4;
  if (this->penalty_time_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->penalty_time_seconds());
  }

  // optional bool subtract_reselect_cell_offset_ignore_temp_offset = 5;
  if (this->subtract_reselect_cell_offset_ignore_temp_offset() != 0) {
    total_size += 1 + 1;
  }

  // optional bool apply_infinity_offset = 6;
  if (this->apply_infinity_offset() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_gsm_selection_parameters::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_gsm_selection_parameters* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_gsm_selection_parameters>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_gsm_selection_parameters::MergeFrom(const rp_gsm_selection_parameters& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.cbq() != 0) {
    set_cbq(from.cbq());
  }
  if (from.cell_reselect_offset_db() != 0) {
    set_cell_reselect_offset_db(from.cell_reselect_offset_db());
  }
  if (from.temporary_offset_db() != 0) {
    set_temporary_offset_db(from.temporary_offset_db());
  }
  if (from.penalty_time_seconds() != 0) {
    set_penalty_time_seconds(from.penalty_time_seconds());
  }
  if (from.subtract_reselect_cell_offset_ignore_temp_offset() != 0) {
    set_subtract_reselect_cell_offset_ignore_temp_offset(from.subtract_reselect_cell_offset_ignore_temp_offset());
  }
  if (from.apply_infinity_offset() != 0) {
    set_apply_infinity_offset(from.apply_infinity_offset());
  }
}

void rp_gsm_selection_parameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_gsm_selection_parameters::CopyFrom(const rp_gsm_selection_parameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_gsm_selection_parameters::IsInitialized() const {

  return true;
}

void rp_gsm_selection_parameters::Swap(rp_gsm_selection_parameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_gsm_selection_parameters::InternalSwap(rp_gsm_selection_parameters* other) {
  std::swap(cbq_, other->cbq_);
  std::swap(cell_reselect_offset_db_, other->cell_reselect_offset_db_);
  std::swap(temporary_offset_db_, other->temporary_offset_db_);
  std::swap(penalty_time_seconds_, other->penalty_time_seconds_);
  std::swap(subtract_reselect_cell_offset_ignore_temp_offset_, other->subtract_reselect_cell_offset_ignore_temp_offset_);
  std::swap(apply_infinity_offset_, other->apply_infinity_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_gsm_selection_parameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_gsm_selection_parameters_descriptor_;
  metadata.reflection = rp_gsm_selection_parameters_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_gsm_selection_parameters

// optional int32 cbq = 1;
void rp_gsm_selection_parameters::clear_cbq() {
  cbq_ = 0;
}
 ::google::protobuf::int32 rp_gsm_selection_parameters::cbq() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_selection_parameters.cbq)
  return cbq_;
}
 void rp_gsm_selection_parameters::set_cbq(::google::protobuf::int32 value) {
  
  cbq_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_selection_parameters.cbq)
}

// optional int32 cell_reselect_offset_db = 2;
void rp_gsm_selection_parameters::clear_cell_reselect_offset_db() {
  cell_reselect_offset_db_ = 0;
}
 ::google::protobuf::int32 rp_gsm_selection_parameters::cell_reselect_offset_db() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_selection_parameters.cell_reselect_offset_db)
  return cell_reselect_offset_db_;
}
 void rp_gsm_selection_parameters::set_cell_reselect_offset_db(::google::protobuf::int32 value) {
  
  cell_reselect_offset_db_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_selection_parameters.cell_reselect_offset_db)
}

// optional int32 temporary_offset_db = 3;
void rp_gsm_selection_parameters::clear_temporary_offset_db() {
  temporary_offset_db_ = 0;
}
 ::google::protobuf::int32 rp_gsm_selection_parameters::temporary_offset_db() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_selection_parameters.temporary_offset_db)
  return temporary_offset_db_;
}
 void rp_gsm_selection_parameters::set_temporary_offset_db(::google::protobuf::int32 value) {
  
  temporary_offset_db_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_selection_parameters.temporary_offset_db)
}

// optional int32 penalty_time_seconds = 4;
void rp_gsm_selection_parameters::clear_penalty_time_seconds() {
  penalty_time_seconds_ = 0;
}
 ::google::protobuf::int32 rp_gsm_selection_parameters::penalty_time_seconds() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_selection_parameters.penalty_time_seconds)
  return penalty_time_seconds_;
}
 void rp_gsm_selection_parameters::set_penalty_time_seconds(::google::protobuf::int32 value) {
  
  penalty_time_seconds_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_selection_parameters.penalty_time_seconds)
}

// optional bool subtract_reselect_cell_offset_ignore_temp_offset = 5;
void rp_gsm_selection_parameters::clear_subtract_reselect_cell_offset_ignore_temp_offset() {
  subtract_reselect_cell_offset_ignore_temp_offset_ = false;
}
 bool rp_gsm_selection_parameters::subtract_reselect_cell_offset_ignore_temp_offset() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_selection_parameters.subtract_reselect_cell_offset_ignore_temp_offset)
  return subtract_reselect_cell_offset_ignore_temp_offset_;
}
 void rp_gsm_selection_parameters::set_subtract_reselect_cell_offset_ignore_temp_offset(bool value) {
  
  subtract_reselect_cell_offset_ignore_temp_offset_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_selection_parameters.subtract_reselect_cell_offset_ignore_temp_offset)
}

// optional bool apply_infinity_offset = 6;
void rp_gsm_selection_parameters::clear_apply_infinity_offset() {
  apply_infinity_offset_ = false;
}
 bool rp_gsm_selection_parameters::apply_infinity_offset() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_selection_parameters.apply_infinity_offset)
  return apply_infinity_offset_;
}
 void rp_gsm_selection_parameters::set_apply_infinity_offset(bool value) {
  
  apply_infinity_offset_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_selection_parameters.apply_infinity_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_gsm_si3::kPlmnFieldNumber;
const int rp_gsm_si3::kLocationAreaCodeFieldNumber;
const int rp_gsm_si3::kCellIdFieldNumber;
const int rp_gsm_si3::kCellReselectHysteresisDbFieldNumber;
const int rp_gsm_si3::kSelectionParametersFieldNumber;
const int rp_gsm_si3::kBsAgBlksResFieldNumber;
const int rp_gsm_si3::kIs2TerPresentFieldNumber;
const int rp_gsm_si3::kIs2QuaterPresentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_gsm_si3::rp_gsm_si3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_gsm_si3)
}

void rp_gsm_si3::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  plmn_ = const_cast< ::rf_phreaker::protobuf::rp_plmn*>(&::rf_phreaker::protobuf::rp_plmn::default_instance());
  selection_parameters_ = const_cast< ::rf_phreaker::protobuf::rp_gsm_selection_parameters*>(&::rf_phreaker::protobuf::rp_gsm_selection_parameters::default_instance());
}

rp_gsm_si3::rp_gsm_si3(const rp_gsm_si3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_gsm_si3)
}

void rp_gsm_si3::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  plmn_ = NULL;
  location_area_code_ = 0;
  cell_id_ = 0;
  cell_reselect_hysteresis_db_ = 0;
  selection_parameters_ = NULL;
  bs_ag_blks_res_ = 0;
  is_2ter_present_ = false;
  is_2quater_present_ = false;
}

rp_gsm_si3::~rp_gsm_si3() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_gsm_si3)
  SharedDtor();
}

void rp_gsm_si3::SharedDtor() {
  if (this != default_instance_) {
    delete plmn_;
    delete selection_parameters_;
  }
}

void rp_gsm_si3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_gsm_si3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_gsm_si3_descriptor_;
}

const rp_gsm_si3& rp_gsm_si3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_gsm_si3* rp_gsm_si3::default_instance_ = NULL;

rp_gsm_si3* rp_gsm_si3::New(::google::protobuf::Arena* arena) const {
  rp_gsm_si3* n = new rp_gsm_si3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_gsm_si3::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_gsm_si3*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(location_area_code_, cell_id_);
  ZR_(cell_reselect_hysteresis_db_, is_2quater_present_);
  if (GetArenaNoVirtual() == NULL && plmn_ != NULL) delete plmn_;
  plmn_ = NULL;
  if (GetArenaNoVirtual() == NULL && selection_parameters_ != NULL) delete selection_parameters_;
  selection_parameters_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool rp_gsm_si3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_gsm_si3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plmn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_location_area_code;
        break;
      }

      // optional int32 location_area_code = 3;
      case 3: {
        if (tag == 24) {
         parse_location_area_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_area_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cell_id;
        break;
      }

      // optional int32 cell_id = 4;
      case 4: {
        if (tag == 32) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cell_reselect_hysteresis_db;
        break;
      }

      // optional int32 cell_reselect_hysteresis_db = 5;
      case 5: {
        if (tag == 40) {
         parse_cell_reselect_hysteresis_db:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_reselect_hysteresis_db_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_selection_parameters;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_gsm_selection_parameters selection_parameters = 6;
      case 6: {
        if (tag == 50) {
         parse_selection_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection_parameters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bs_ag_blks_res;
        break;
      }

      // optional int32 bs_ag_blks_res = 7;
      case 7: {
        if (tag == 56) {
         parse_bs_ag_blks_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bs_ag_blks_res_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_2ter_present;
        break;
      }

      // optional bool is_2ter_present = 8;
      case 8: {
        if (tag == 64) {
         parse_is_2ter_present:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_2ter_present_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_2quater_present;
        break;
      }

      // optional bool is_2quater_present = 9;
      case 9: {
        if (tag == 72) {
         parse_is_2quater_present:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_2quater_present_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_gsm_si3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_gsm_si3)
  return false;
#undef DO_
}

void rp_gsm_si3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_gsm_si3)
  // optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
  if (this->has_plmn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->plmn_, output);
  }

  // optional int32 location_area_code = 3;
  if (this->location_area_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->location_area_code(), output);
  }

  // optional int32 cell_id = 4;
  if (this->cell_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cell_id(), output);
  }

  // optional int32 cell_reselect_hysteresis_db = 5;
  if (this->cell_reselect_hysteresis_db() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cell_reselect_hysteresis_db(), output);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_selection_parameters selection_parameters = 6;
  if (this->has_selection_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->selection_parameters_, output);
  }

  // optional int32 bs_ag_blks_res = 7;
  if (this->bs_ag_blks_res() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bs_ag_blks_res(), output);
  }

  // optional bool is_2ter_present = 8;
  if (this->is_2ter_present() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_2ter_present(), output);
  }

  // optional bool is_2quater_present = 9;
  if (this->is_2quater_present() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_2quater_present(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_gsm_si3)
}

::google::protobuf::uint8* rp_gsm_si3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_gsm_si3)
  // optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
  if (this->has_plmn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->plmn_, target);
  }

  // optional int32 location_area_code = 3;
  if (this->location_area_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->location_area_code(), target);
  }

  // optional int32 cell_id = 4;
  if (this->cell_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cell_id(), target);
  }

  // optional int32 cell_reselect_hysteresis_db = 5;
  if (this->cell_reselect_hysteresis_db() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cell_reselect_hysteresis_db(), target);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_selection_parameters selection_parameters = 6;
  if (this->has_selection_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->selection_parameters_, target);
  }

  // optional int32 bs_ag_blks_res = 7;
  if (this->bs_ag_blks_res() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bs_ag_blks_res(), target);
  }

  // optional bool is_2ter_present = 8;
  if (this->is_2ter_present() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_2ter_present(), target);
  }

  // optional bool is_2quater_present = 9;
  if (this->is_2quater_present() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_2quater_present(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_gsm_si3)
  return target;
}

int rp_gsm_si3::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
  if (this->has_plmn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->plmn_);
  }

  // optional int32 location_area_code = 3;
  if (this->location_area_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->location_area_code());
  }

  // optional int32 cell_id = 4;
  if (this->cell_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cell_id());
  }

  // optional int32 cell_reselect_hysteresis_db = 5;
  if (this->cell_reselect_hysteresis_db() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cell_reselect_hysteresis_db());
  }

  // optional .rf_phreaker.protobuf.rp_gsm_selection_parameters selection_parameters = 6;
  if (this->has_selection_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selection_parameters_);
  }

  // optional int32 bs_ag_blks_res = 7;
  if (this->bs_ag_blks_res() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bs_ag_blks_res());
  }

  // optional bool is_2ter_present = 8;
  if (this->is_2ter_present() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_2quater_present = 9;
  if (this->is_2quater_present() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_gsm_si3::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_gsm_si3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_gsm_si3>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_gsm_si3::MergeFrom(const rp_gsm_si3& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_plmn()) {
    mutable_plmn()->::rf_phreaker::protobuf::rp_plmn::MergeFrom(from.plmn());
  }
  if (from.location_area_code() != 0) {
    set_location_area_code(from.location_area_code());
  }
  if (from.cell_id() != 0) {
    set_cell_id(from.cell_id());
  }
  if (from.cell_reselect_hysteresis_db() != 0) {
    set_cell_reselect_hysteresis_db(from.cell_reselect_hysteresis_db());
  }
  if (from.has_selection_parameters()) {
    mutable_selection_parameters()->::rf_phreaker::protobuf::rp_gsm_selection_parameters::MergeFrom(from.selection_parameters());
  }
  if (from.bs_ag_blks_res() != 0) {
    set_bs_ag_blks_res(from.bs_ag_blks_res());
  }
  if (from.is_2ter_present() != 0) {
    set_is_2ter_present(from.is_2ter_present());
  }
  if (from.is_2quater_present() != 0) {
    set_is_2quater_present(from.is_2quater_present());
  }
}

void rp_gsm_si3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_gsm_si3::CopyFrom(const rp_gsm_si3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_gsm_si3::IsInitialized() const {

  return true;
}

void rp_gsm_si3::Swap(rp_gsm_si3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_gsm_si3::InternalSwap(rp_gsm_si3* other) {
  std::swap(plmn_, other->plmn_);
  std::swap(location_area_code_, other->location_area_code_);
  std::swap(cell_id_, other->cell_id_);
  std::swap(cell_reselect_hysteresis_db_, other->cell_reselect_hysteresis_db_);
  std::swap(selection_parameters_, other->selection_parameters_);
  std::swap(bs_ag_blks_res_, other->bs_ag_blks_res_);
  std::swap(is_2ter_present_, other->is_2ter_present_);
  std::swap(is_2quater_present_, other->is_2quater_present_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_gsm_si3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_gsm_si3_descriptor_;
  metadata.reflection = rp_gsm_si3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_gsm_si3

// optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
bool rp_gsm_si3::has_plmn() const {
  return !_is_default_instance_ && plmn_ != NULL;
}
void rp_gsm_si3::clear_plmn() {
  if (GetArenaNoVirtual() == NULL && plmn_ != NULL) delete plmn_;
  plmn_ = NULL;
}
const ::rf_phreaker::protobuf::rp_plmn& rp_gsm_si3::plmn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si3.plmn)
  return plmn_ != NULL ? *plmn_ : *default_instance_->plmn_;
}
::rf_phreaker::protobuf::rp_plmn* rp_gsm_si3::mutable_plmn() {
  
  if (plmn_ == NULL) {
    plmn_ = new ::rf_phreaker::protobuf::rp_plmn;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_si3.plmn)
  return plmn_;
}
::rf_phreaker::protobuf::rp_plmn* rp_gsm_si3::release_plmn() {
  
  ::rf_phreaker::protobuf::rp_plmn* temp = plmn_;
  plmn_ = NULL;
  return temp;
}
void rp_gsm_si3::set_allocated_plmn(::rf_phreaker::protobuf::rp_plmn* plmn) {
  delete plmn_;
  plmn_ = plmn;
  if (plmn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_si3.plmn)
}

// optional int32 location_area_code = 3;
void rp_gsm_si3::clear_location_area_code() {
  location_area_code_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si3::location_area_code() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si3.location_area_code)
  return location_area_code_;
}
 void rp_gsm_si3::set_location_area_code(::google::protobuf::int32 value) {
  
  location_area_code_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si3.location_area_code)
}

// optional int32 cell_id = 4;
void rp_gsm_si3::clear_cell_id() {
  cell_id_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si3::cell_id() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si3.cell_id)
  return cell_id_;
}
 void rp_gsm_si3::set_cell_id(::google::protobuf::int32 value) {
  
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si3.cell_id)
}

// optional int32 cell_reselect_hysteresis_db = 5;
void rp_gsm_si3::clear_cell_reselect_hysteresis_db() {
  cell_reselect_hysteresis_db_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si3::cell_reselect_hysteresis_db() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si3.cell_reselect_hysteresis_db)
  return cell_reselect_hysteresis_db_;
}
 void rp_gsm_si3::set_cell_reselect_hysteresis_db(::google::protobuf::int32 value) {
  
  cell_reselect_hysteresis_db_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si3.cell_reselect_hysteresis_db)
}

// optional .rf_phreaker.protobuf.rp_gsm_selection_parameters selection_parameters = 6;
bool rp_gsm_si3::has_selection_parameters() const {
  return !_is_default_instance_ && selection_parameters_ != NULL;
}
void rp_gsm_si3::clear_selection_parameters() {
  if (GetArenaNoVirtual() == NULL && selection_parameters_ != NULL) delete selection_parameters_;
  selection_parameters_ = NULL;
}
const ::rf_phreaker::protobuf::rp_gsm_selection_parameters& rp_gsm_si3::selection_parameters() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si3.selection_parameters)
  return selection_parameters_ != NULL ? *selection_parameters_ : *default_instance_->selection_parameters_;
}
::rf_phreaker::protobuf::rp_gsm_selection_parameters* rp_gsm_si3::mutable_selection_parameters() {
  
  if (selection_parameters_ == NULL) {
    selection_parameters_ = new ::rf_phreaker::protobuf::rp_gsm_selection_parameters;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_si3.selection_parameters)
  return selection_parameters_;
}
::rf_phreaker::protobuf::rp_gsm_selection_parameters* rp_gsm_si3::release_selection_parameters() {
  
  ::rf_phreaker::protobuf::rp_gsm_selection_parameters* temp = selection_parameters_;
  selection_parameters_ = NULL;
  return temp;
}
void rp_gsm_si3::set_allocated_selection_parameters(::rf_phreaker::protobuf::rp_gsm_selection_parameters* selection_parameters) {
  delete selection_parameters_;
  selection_parameters_ = selection_parameters;
  if (selection_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_si3.selection_parameters)
}

// optional int32 bs_ag_blks_res = 7;
void rp_gsm_si3::clear_bs_ag_blks_res() {
  bs_ag_blks_res_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si3::bs_ag_blks_res() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si3.bs_ag_blks_res)
  return bs_ag_blks_res_;
}
 void rp_gsm_si3::set_bs_ag_blks_res(::google::protobuf::int32 value) {
  
  bs_ag_blks_res_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si3.bs_ag_blks_res)
}

// optional bool is_2ter_present = 8;
void rp_gsm_si3::clear_is_2ter_present() {
  is_2ter_present_ = false;
}
 bool rp_gsm_si3::is_2ter_present() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si3.is_2ter_present)
  return is_2ter_present_;
}
 void rp_gsm_si3::set_is_2ter_present(bool value) {
  
  is_2ter_present_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si3.is_2ter_present)
}

// optional bool is_2quater_present = 9;
void rp_gsm_si3::clear_is_2quater_present() {
  is_2quater_present_ = false;
}
 bool rp_gsm_si3::is_2quater_present() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si3.is_2quater_present)
  return is_2quater_present_;
}
 void rp_gsm_si3::set_is_2quater_present(bool value) {
  
  is_2quater_present_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si3.is_2quater_present)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_gsm_si4::kPlmnFieldNumber;
const int rp_gsm_si4::kLocationAreaCodeFieldNumber;
const int rp_gsm_si4::kCellIdFieldNumber;
const int rp_gsm_si4::kCellReselectHysteresisDbFieldNumber;
const int rp_gsm_si4::kSelectionParametersFieldNumber;
const int rp_gsm_si4::kIsCbchPresentFieldNumber;
const int rp_gsm_si4::kHaveAdditionalParamInSi7Si8FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_gsm_si4::rp_gsm_si4()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_gsm_si4)
}

void rp_gsm_si4::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  plmn_ = const_cast< ::rf_phreaker::protobuf::rp_plmn*>(&::rf_phreaker::protobuf::rp_plmn::default_instance());
  selection_parameters_ = const_cast< ::rf_phreaker::protobuf::rp_gsm_selection_parameters*>(&::rf_phreaker::protobuf::rp_gsm_selection_parameters::default_instance());
}

rp_gsm_si4::rp_gsm_si4(const rp_gsm_si4& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_gsm_si4)
}

void rp_gsm_si4::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  plmn_ = NULL;
  location_area_code_ = 0;
  cell_id_ = 0;
  cell_reselect_hysteresis_db_ = 0;
  selection_parameters_ = NULL;
  is_cbch_present_ = false;
  have_additional_param_in_si7_si8_ = false;
}

rp_gsm_si4::~rp_gsm_si4() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_gsm_si4)
  SharedDtor();
}

void rp_gsm_si4::SharedDtor() {
  if (this != default_instance_) {
    delete plmn_;
    delete selection_parameters_;
  }
}

void rp_gsm_si4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_gsm_si4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_gsm_si4_descriptor_;
}

const rp_gsm_si4& rp_gsm_si4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_gsm_si4* rp_gsm_si4::default_instance_ = NULL;

rp_gsm_si4* rp_gsm_si4::New(::google::protobuf::Arena* arena) const {
  rp_gsm_si4* n = new rp_gsm_si4;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_gsm_si4::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_gsm_si4*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(location_area_code_, cell_id_);
  ZR_(cell_reselect_hysteresis_db_, have_additional_param_in_si7_si8_);
  if (GetArenaNoVirtual() == NULL && plmn_ != NULL) delete plmn_;
  plmn_ = NULL;
  if (GetArenaNoVirtual() == NULL && selection_parameters_ != NULL) delete selection_parameters_;
  selection_parameters_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool rp_gsm_si4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_gsm_si4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plmn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_location_area_code;
        break;
      }

      // optional int32 location_area_code = 3;
      case 3: {
        if (tag == 24) {
         parse_location_area_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_area_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cell_id;
        break;
      }

      // optional int32 cell_id = 4;
      case 4: {
        if (tag == 32) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cell_reselect_hysteresis_db;
        break;
      }

      // optional int32 cell_reselect_hysteresis_db = 5;
      case 5: {
        if (tag == 40) {
         parse_cell_reselect_hysteresis_db:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_reselect_hysteresis_db_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_selection_parameters;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_gsm_selection_parameters selection_parameters = 6;
      case 6: {
        if (tag == 50) {
         parse_selection_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection_parameters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_cbch_present;
        break;
      }

      // optional bool is_cbch_present = 7;
      case 7: {
        if (tag == 56) {
         parse_is_cbch_present:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_cbch_present_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_have_additional_param_in_si7_si8;
        break;
      }

      // optional bool have_additional_param_in_si7_si8 = 8;
      case 8: {
        if (tag == 64) {
         parse_have_additional_param_in_si7_si8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_additional_param_in_si7_si8_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_gsm_si4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_gsm_si4)
  return false;
#undef DO_
}

void rp_gsm_si4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_gsm_si4)
  // optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
  if (this->has_plmn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->plmn_, output);
  }

  // optional int32 location_area_code = 3;
  if (this->location_area_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->location_area_code(), output);
  }

  // optional int32 cell_id = 4;
  if (this->cell_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cell_id(), output);
  }

  // optional int32 cell_reselect_hysteresis_db = 5;
  if (this->cell_reselect_hysteresis_db() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cell_reselect_hysteresis_db(), output);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_selection_parameters selection_parameters = 6;
  if (this->has_selection_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->selection_parameters_, output);
  }

  // optional bool is_cbch_present = 7;
  if (this->is_cbch_present() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_cbch_present(), output);
  }

  // optional bool have_additional_param_in_si7_si8 = 8;
  if (this->have_additional_param_in_si7_si8() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->have_additional_param_in_si7_si8(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_gsm_si4)
}

::google::protobuf::uint8* rp_gsm_si4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_gsm_si4)
  // optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
  if (this->has_plmn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->plmn_, target);
  }

  // optional int32 location_area_code = 3;
  if (this->location_area_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->location_area_code(), target);
  }

  // optional int32 cell_id = 4;
  if (this->cell_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cell_id(), target);
  }

  // optional int32 cell_reselect_hysteresis_db = 5;
  if (this->cell_reselect_hysteresis_db() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cell_reselect_hysteresis_db(), target);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_selection_parameters selection_parameters = 6;
  if (this->has_selection_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->selection_parameters_, target);
  }

  // optional bool is_cbch_present = 7;
  if (this->is_cbch_present() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_cbch_present(), target);
  }

  // optional bool have_additional_param_in_si7_si8 = 8;
  if (this->have_additional_param_in_si7_si8() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->have_additional_param_in_si7_si8(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_gsm_si4)
  return target;
}

int rp_gsm_si4::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
  if (this->has_plmn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->plmn_);
  }

  // optional int32 location_area_code = 3;
  if (this->location_area_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->location_area_code());
  }

  // optional int32 cell_id = 4;
  if (this->cell_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cell_id());
  }

  // optional int32 cell_reselect_hysteresis_db = 5;
  if (this->cell_reselect_hysteresis_db() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cell_reselect_hysteresis_db());
  }

  // optional .rf_phreaker.protobuf.rp_gsm_selection_parameters selection_parameters = 6;
  if (this->has_selection_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selection_parameters_);
  }

  // optional bool is_cbch_present = 7;
  if (this->is_cbch_present() != 0) {
    total_size += 1 + 1;
  }

  // optional bool have_additional_param_in_si7_si8 = 8;
  if (this->have_additional_param_in_si7_si8() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_gsm_si4::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_gsm_si4* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_gsm_si4>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_gsm_si4::MergeFrom(const rp_gsm_si4& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_plmn()) {
    mutable_plmn()->::rf_phreaker::protobuf::rp_plmn::MergeFrom(from.plmn());
  }
  if (from.location_area_code() != 0) {
    set_location_area_code(from.location_area_code());
  }
  if (from.cell_id() != 0) {
    set_cell_id(from.cell_id());
  }
  if (from.cell_reselect_hysteresis_db() != 0) {
    set_cell_reselect_hysteresis_db(from.cell_reselect_hysteresis_db());
  }
  if (from.has_selection_parameters()) {
    mutable_selection_parameters()->::rf_phreaker::protobuf::rp_gsm_selection_parameters::MergeFrom(from.selection_parameters());
  }
  if (from.is_cbch_present() != 0) {
    set_is_cbch_present(from.is_cbch_present());
  }
  if (from.have_additional_param_in_si7_si8() != 0) {
    set_have_additional_param_in_si7_si8(from.have_additional_param_in_si7_si8());
  }
}

void rp_gsm_si4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_gsm_si4::CopyFrom(const rp_gsm_si4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_gsm_si4::IsInitialized() const {

  return true;
}

void rp_gsm_si4::Swap(rp_gsm_si4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_gsm_si4::InternalSwap(rp_gsm_si4* other) {
  std::swap(plmn_, other->plmn_);
  std::swap(location_area_code_, other->location_area_code_);
  std::swap(cell_id_, other->cell_id_);
  std::swap(cell_reselect_hysteresis_db_, other->cell_reselect_hysteresis_db_);
  std::swap(selection_parameters_, other->selection_parameters_);
  std::swap(is_cbch_present_, other->is_cbch_present_);
  std::swap(have_additional_param_in_si7_si8_, other->have_additional_param_in_si7_si8_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_gsm_si4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_gsm_si4_descriptor_;
  metadata.reflection = rp_gsm_si4_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_gsm_si4

// optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
bool rp_gsm_si4::has_plmn() const {
  return !_is_default_instance_ && plmn_ != NULL;
}
void rp_gsm_si4::clear_plmn() {
  if (GetArenaNoVirtual() == NULL && plmn_ != NULL) delete plmn_;
  plmn_ = NULL;
}
const ::rf_phreaker::protobuf::rp_plmn& rp_gsm_si4::plmn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si4.plmn)
  return plmn_ != NULL ? *plmn_ : *default_instance_->plmn_;
}
::rf_phreaker::protobuf::rp_plmn* rp_gsm_si4::mutable_plmn() {
  
  if (plmn_ == NULL) {
    plmn_ = new ::rf_phreaker::protobuf::rp_plmn;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_si4.plmn)
  return plmn_;
}
::rf_phreaker::protobuf::rp_plmn* rp_gsm_si4::release_plmn() {
  
  ::rf_phreaker::protobuf::rp_plmn* temp = plmn_;
  plmn_ = NULL;
  return temp;
}
void rp_gsm_si4::set_allocated_plmn(::rf_phreaker::protobuf::rp_plmn* plmn) {
  delete plmn_;
  plmn_ = plmn;
  if (plmn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_si4.plmn)
}

// optional int32 location_area_code = 3;
void rp_gsm_si4::clear_location_area_code() {
  location_area_code_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si4::location_area_code() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si4.location_area_code)
  return location_area_code_;
}
 void rp_gsm_si4::set_location_area_code(::google::protobuf::int32 value) {
  
  location_area_code_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si4.location_area_code)
}

// optional int32 cell_id = 4;
void rp_gsm_si4::clear_cell_id() {
  cell_id_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si4::cell_id() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si4.cell_id)
  return cell_id_;
}
 void rp_gsm_si4::set_cell_id(::google::protobuf::int32 value) {
  
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si4.cell_id)
}

// optional int32 cell_reselect_hysteresis_db = 5;
void rp_gsm_si4::clear_cell_reselect_hysteresis_db() {
  cell_reselect_hysteresis_db_ = 0;
}
 ::google::protobuf::int32 rp_gsm_si4::cell_reselect_hysteresis_db() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si4.cell_reselect_hysteresis_db)
  return cell_reselect_hysteresis_db_;
}
 void rp_gsm_si4::set_cell_reselect_hysteresis_db(::google::protobuf::int32 value) {
  
  cell_reselect_hysteresis_db_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si4.cell_reselect_hysteresis_db)
}

// optional .rf_phreaker.protobuf.rp_gsm_selection_parameters selection_parameters = 6;
bool rp_gsm_si4::has_selection_parameters() const {
  return !_is_default_instance_ && selection_parameters_ != NULL;
}
void rp_gsm_si4::clear_selection_parameters() {
  if (GetArenaNoVirtual() == NULL && selection_parameters_ != NULL) delete selection_parameters_;
  selection_parameters_ = NULL;
}
const ::rf_phreaker::protobuf::rp_gsm_selection_parameters& rp_gsm_si4::selection_parameters() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si4.selection_parameters)
  return selection_parameters_ != NULL ? *selection_parameters_ : *default_instance_->selection_parameters_;
}
::rf_phreaker::protobuf::rp_gsm_selection_parameters* rp_gsm_si4::mutable_selection_parameters() {
  
  if (selection_parameters_ == NULL) {
    selection_parameters_ = new ::rf_phreaker::protobuf::rp_gsm_selection_parameters;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_si4.selection_parameters)
  return selection_parameters_;
}
::rf_phreaker::protobuf::rp_gsm_selection_parameters* rp_gsm_si4::release_selection_parameters() {
  
  ::rf_phreaker::protobuf::rp_gsm_selection_parameters* temp = selection_parameters_;
  selection_parameters_ = NULL;
  return temp;
}
void rp_gsm_si4::set_allocated_selection_parameters(::rf_phreaker::protobuf::rp_gsm_selection_parameters* selection_parameters) {
  delete selection_parameters_;
  selection_parameters_ = selection_parameters;
  if (selection_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_si4.selection_parameters)
}

// optional bool is_cbch_present = 7;
void rp_gsm_si4::clear_is_cbch_present() {
  is_cbch_present_ = false;
}
 bool rp_gsm_si4::is_cbch_present() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si4.is_cbch_present)
  return is_cbch_present_;
}
 void rp_gsm_si4::set_is_cbch_present(bool value) {
  
  is_cbch_present_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si4.is_cbch_present)
}

// optional bool have_additional_param_in_si7_si8 = 8;
void rp_gsm_si4::clear_have_additional_param_in_si7_si8() {
  have_additional_param_in_si7_si8_ = false;
}
 bool rp_gsm_si4::have_additional_param_in_si7_si8() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si4.have_additional_param_in_si7_si8)
  return have_additional_param_in_si7_si8_;
}
 void rp_gsm_si4::set_have_additional_param_in_si7_si8(bool value) {
  
  have_additional_param_in_si7_si8_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si4.have_additional_param_in_si7_si8)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_gsm_layer_3::kRawLayer3FieldNumber;
const int rp_gsm_layer_3::kSi1FieldNumber;
const int rp_gsm_layer_3::kSi2FieldNumber;
const int rp_gsm_layer_3::kSi2BisFieldNumber;
const int rp_gsm_layer_3::kSi2TerFieldNumber;
const int rp_gsm_layer_3::kSi2QuaterFieldNumber;
const int rp_gsm_layer_3::kSi3FieldNumber;
const int rp_gsm_layer_3::kSi4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_gsm_layer_3::rp_gsm_layer_3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_gsm_layer_3)
}

void rp_gsm_layer_3::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  si1_ = const_cast< ::rf_phreaker::protobuf::rp_gsm_si1*>(&::rf_phreaker::protobuf::rp_gsm_si1::default_instance());
  si2_ = const_cast< ::rf_phreaker::protobuf::rp_gsm_si2*>(&::rf_phreaker::protobuf::rp_gsm_si2::default_instance());
  si2_bis_ = const_cast< ::rf_phreaker::protobuf::rp_gsm_si2_bis*>(&::rf_phreaker::protobuf::rp_gsm_si2_bis::default_instance());
  si2_ter_ = const_cast< ::rf_phreaker::protobuf::rp_gsm_si2_ter*>(&::rf_phreaker::protobuf::rp_gsm_si2_ter::default_instance());
  si2_quater_ = const_cast< ::rf_phreaker::protobuf::rp_gsm_si2_quater*>(&::rf_phreaker::protobuf::rp_gsm_si2_quater::default_instance());
  si3_ = const_cast< ::rf_phreaker::protobuf::rp_gsm_si3*>(&::rf_phreaker::protobuf::rp_gsm_si3::default_instance());
  si4_ = const_cast< ::rf_phreaker::protobuf::rp_gsm_si4*>(&::rf_phreaker::protobuf::rp_gsm_si4::default_instance());
}

rp_gsm_layer_3::rp_gsm_layer_3(const rp_gsm_layer_3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_gsm_layer_3)
}

void rp_gsm_layer_3::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  si1_ = NULL;
  si2_ = NULL;
  si2_bis_ = NULL;
  si2_ter_ = NULL;
  si2_quater_ = NULL;
  si3_ = NULL;
  si4_ = NULL;
}

rp_gsm_layer_3::~rp_gsm_layer_3() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_gsm_layer_3)
  SharedDtor();
}

void rp_gsm_layer_3::SharedDtor() {
  if (this != default_instance_) {
    delete si1_;
    delete si2_;
    delete si2_bis_;
    delete si2_ter_;
    delete si2_quater_;
    delete si3_;
    delete si4_;
  }
}

void rp_gsm_layer_3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_gsm_layer_3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_gsm_layer_3_descriptor_;
}

const rp_gsm_layer_3& rp_gsm_layer_3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_gsm_layer_3* rp_gsm_layer_3::default_instance_ = NULL;

rp_gsm_layer_3* rp_gsm_layer_3::New(::google::protobuf::Arena* arena) const {
  rp_gsm_layer_3* n = new rp_gsm_layer_3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_gsm_layer_3::Clear() {
  if (GetArenaNoVirtual() == NULL && si1_ != NULL) delete si1_;
  si1_ = NULL;
  if (GetArenaNoVirtual() == NULL && si2_ != NULL) delete si2_;
  si2_ = NULL;
  if (GetArenaNoVirtual() == NULL && si2_bis_ != NULL) delete si2_bis_;
  si2_bis_ = NULL;
  if (GetArenaNoVirtual() == NULL && si2_ter_ != NULL) delete si2_ter_;
  si2_ter_ = NULL;
  if (GetArenaNoVirtual() == NULL && si2_quater_ != NULL) delete si2_quater_;
  si2_quater_ = NULL;
  if (GetArenaNoVirtual() == NULL && si3_ != NULL) delete si3_;
  si3_ = NULL;
  if (GetArenaNoVirtual() == NULL && si4_ != NULL) delete si4_;
  si4_ = NULL;
  raw_layer_3_.Clear();
}

bool rp_gsm_layer_3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_gsm_layer_3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_raw_layer_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_raw_layer_3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_raw_layer_3;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_si1;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_gsm_si1 si1 = 2;
      case 2: {
        if (tag == 18) {
         parse_si1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_si1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_si2;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_gsm_si2 si2 = 3;
      case 3: {
        if (tag == 26) {
         parse_si2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_si2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_si2_bis;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_gsm_si2_bis si2_bis = 4;
      case 4: {
        if (tag == 34) {
         parse_si2_bis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_si2_bis()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_si2_ter;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_gsm_si2_ter si2_ter = 5;
      case 5: {
        if (tag == 42) {
         parse_si2_ter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_si2_ter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_si2_quater;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_gsm_si2_quater si2_quater = 6;
      case 6: {
        if (tag == 50) {
         parse_si2_quater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_si2_quater()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_si3;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_gsm_si3 si3 = 7;
      case 7: {
        if (tag == 58) {
         parse_si3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_si3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_si4;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_gsm_si4 si4 = 8;
      case 8: {
        if (tag == 66) {
         parse_si4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_si4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_gsm_layer_3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_gsm_layer_3)
  return false;
#undef DO_
}

void rp_gsm_layer_3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_gsm_layer_3)
  // repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
  for (unsigned int i = 0, n = this->raw_layer_3_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->raw_layer_3(i), output);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si1 si1 = 2;
  if (this->has_si1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->si1_, output);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si2 si2 = 3;
  if (this->has_si2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->si2_, output);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si2_bis si2_bis = 4;
  if (this->has_si2_bis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->si2_bis_, output);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si2_ter si2_ter = 5;
  if (this->has_si2_ter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->si2_ter_, output);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si2_quater si2_quater = 6;
  if (this->has_si2_quater()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->si2_quater_, output);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si3 si3 = 7;
  if (this->has_si3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->si3_, output);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si4 si4 = 8;
  if (this->has_si4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->si4_, output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_gsm_layer_3)
}

::google::protobuf::uint8* rp_gsm_layer_3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_gsm_layer_3)
  // repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
  for (unsigned int i = 0, n = this->raw_layer_3_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->raw_layer_3(i), target);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si1 si1 = 2;
  if (this->has_si1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->si1_, target);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si2 si2 = 3;
  if (this->has_si2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->si2_, target);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si2_bis si2_bis = 4;
  if (this->has_si2_bis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->si2_bis_, target);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si2_ter si2_ter = 5;
  if (this->has_si2_ter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->si2_ter_, target);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si2_quater si2_quater = 6;
  if (this->has_si2_quater()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->si2_quater_, target);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si3 si3 = 7;
  if (this->has_si3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->si3_, target);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si4 si4 = 8;
  if (this->has_si4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->si4_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_gsm_layer_3)
  return target;
}

int rp_gsm_layer_3::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_gsm_si1 si1 = 2;
  if (this->has_si1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->si1_);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si2 si2 = 3;
  if (this->has_si2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->si2_);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si2_bis si2_bis = 4;
  if (this->has_si2_bis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->si2_bis_);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si2_ter si2_ter = 5;
  if (this->has_si2_ter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->si2_ter_);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si2_quater si2_quater = 6;
  if (this->has_si2_quater()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->si2_quater_);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si3 si3 = 7;
  if (this->has_si3()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->si3_);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_si4 si4 = 8;
  if (this->has_si4()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->si4_);
  }

  // repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
  total_size += 1 * this->raw_layer_3_size();
  for (int i = 0; i < this->raw_layer_3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raw_layer_3(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_gsm_layer_3::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_gsm_layer_3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_gsm_layer_3>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_gsm_layer_3::MergeFrom(const rp_gsm_layer_3& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  raw_layer_3_.MergeFrom(from.raw_layer_3_);
  if (from.has_si1()) {
    mutable_si1()->::rf_phreaker::protobuf::rp_gsm_si1::MergeFrom(from.si1());
  }
  if (from.has_si2()) {
    mutable_si2()->::rf_phreaker::protobuf::rp_gsm_si2::MergeFrom(from.si2());
  }
  if (from.has_si2_bis()) {
    mutable_si2_bis()->::rf_phreaker::protobuf::rp_gsm_si2_bis::MergeFrom(from.si2_bis());
  }
  if (from.has_si2_ter()) {
    mutable_si2_ter()->::rf_phreaker::protobuf::rp_gsm_si2_ter::MergeFrom(from.si2_ter());
  }
  if (from.has_si2_quater()) {
    mutable_si2_quater()->::rf_phreaker::protobuf::rp_gsm_si2_quater::MergeFrom(from.si2_quater());
  }
  if (from.has_si3()) {
    mutable_si3()->::rf_phreaker::protobuf::rp_gsm_si3::MergeFrom(from.si3());
  }
  if (from.has_si4()) {
    mutable_si4()->::rf_phreaker::protobuf::rp_gsm_si4::MergeFrom(from.si4());
  }
}

void rp_gsm_layer_3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_gsm_layer_3::CopyFrom(const rp_gsm_layer_3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_gsm_layer_3::IsInitialized() const {

  return true;
}

void rp_gsm_layer_3::Swap(rp_gsm_layer_3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_gsm_layer_3::InternalSwap(rp_gsm_layer_3* other) {
  raw_layer_3_.UnsafeArenaSwap(&other->raw_layer_3_);
  std::swap(si1_, other->si1_);
  std::swap(si2_, other->si2_);
  std::swap(si2_bis_, other->si2_bis_);
  std::swap(si2_ter_, other->si2_ter_);
  std::swap(si2_quater_, other->si2_quater_);
  std::swap(si3_, other->si3_);
  std::swap(si4_, other->si4_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_gsm_layer_3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_gsm_layer_3_descriptor_;
  metadata.reflection = rp_gsm_layer_3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_gsm_layer_3

// repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
int rp_gsm_layer_3::raw_layer_3_size() const {
  return raw_layer_3_.size();
}
void rp_gsm_layer_3::clear_raw_layer_3() {
  raw_layer_3_.Clear();
}
const ::rf_phreaker::protobuf::rp_raw_layer_3& rp_gsm_layer_3::raw_layer_3(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_layer_3.raw_layer_3)
  return raw_layer_3_.Get(index);
}
::rf_phreaker::protobuf::rp_raw_layer_3* rp_gsm_layer_3::mutable_raw_layer_3(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_layer_3.raw_layer_3)
  return raw_layer_3_.Mutable(index);
}
::rf_phreaker::protobuf::rp_raw_layer_3* rp_gsm_layer_3::add_raw_layer_3() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_layer_3.raw_layer_3)
  return raw_layer_3_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >*
rp_gsm_layer_3::mutable_raw_layer_3() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_layer_3.raw_layer_3)
  return &raw_layer_3_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >&
rp_gsm_layer_3::raw_layer_3() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_layer_3.raw_layer_3)
  return raw_layer_3_;
}

// optional .rf_phreaker.protobuf.rp_gsm_si1 si1 = 2;
bool rp_gsm_layer_3::has_si1() const {
  return !_is_default_instance_ && si1_ != NULL;
}
void rp_gsm_layer_3::clear_si1() {
  if (GetArenaNoVirtual() == NULL && si1_ != NULL) delete si1_;
  si1_ = NULL;
}
const ::rf_phreaker::protobuf::rp_gsm_si1& rp_gsm_layer_3::si1() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_layer_3.si1)
  return si1_ != NULL ? *si1_ : *default_instance_->si1_;
}
::rf_phreaker::protobuf::rp_gsm_si1* rp_gsm_layer_3::mutable_si1() {
  
  if (si1_ == NULL) {
    si1_ = new ::rf_phreaker::protobuf::rp_gsm_si1;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_layer_3.si1)
  return si1_;
}
::rf_phreaker::protobuf::rp_gsm_si1* rp_gsm_layer_3::release_si1() {
  
  ::rf_phreaker::protobuf::rp_gsm_si1* temp = si1_;
  si1_ = NULL;
  return temp;
}
void rp_gsm_layer_3::set_allocated_si1(::rf_phreaker::protobuf::rp_gsm_si1* si1) {
  delete si1_;
  si1_ = si1;
  if (si1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_layer_3.si1)
}

// optional .rf_phreaker.protobuf.rp_gsm_si2 si2 = 3;
bool rp_gsm_layer_3::has_si2() const {
  return !_is_default_instance_ && si2_ != NULL;
}
void rp_gsm_layer_3::clear_si2() {
  if (GetArenaNoVirtual() == NULL && si2_ != NULL) delete si2_;
  si2_ = NULL;
}
const ::rf_phreaker::protobuf::rp_gsm_si2& rp_gsm_layer_3::si2() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_layer_3.si2)
  return si2_ != NULL ? *si2_ : *default_instance_->si2_;
}
::rf_phreaker::protobuf::rp_gsm_si2* rp_gsm_layer_3::mutable_si2() {
  
  if (si2_ == NULL) {
    si2_ = new ::rf_phreaker::protobuf::rp_gsm_si2;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_layer_3.si2)
  return si2_;
}
::rf_phreaker::protobuf::rp_gsm_si2* rp_gsm_layer_3::release_si2() {
  
  ::rf_phreaker::protobuf::rp_gsm_si2* temp = si2_;
  si2_ = NULL;
  return temp;
}
void rp_gsm_layer_3::set_allocated_si2(::rf_phreaker::protobuf::rp_gsm_si2* si2) {
  delete si2_;
  si2_ = si2;
  if (si2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_layer_3.si2)
}

// optional .rf_phreaker.protobuf.rp_gsm_si2_bis si2_bis = 4;
bool rp_gsm_layer_3::has_si2_bis() const {
  return !_is_default_instance_ && si2_bis_ != NULL;
}
void rp_gsm_layer_3::clear_si2_bis() {
  if (GetArenaNoVirtual() == NULL && si2_bis_ != NULL) delete si2_bis_;
  si2_bis_ = NULL;
}
const ::rf_phreaker::protobuf::rp_gsm_si2_bis& rp_gsm_layer_3::si2_bis() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_layer_3.si2_bis)
  return si2_bis_ != NULL ? *si2_bis_ : *default_instance_->si2_bis_;
}
::rf_phreaker::protobuf::rp_gsm_si2_bis* rp_gsm_layer_3::mutable_si2_bis() {
  
  if (si2_bis_ == NULL) {
    si2_bis_ = new ::rf_phreaker::protobuf::rp_gsm_si2_bis;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_layer_3.si2_bis)
  return si2_bis_;
}
::rf_phreaker::protobuf::rp_gsm_si2_bis* rp_gsm_layer_3::release_si2_bis() {
  
  ::rf_phreaker::protobuf::rp_gsm_si2_bis* temp = si2_bis_;
  si2_bis_ = NULL;
  return temp;
}
void rp_gsm_layer_3::set_allocated_si2_bis(::rf_phreaker::protobuf::rp_gsm_si2_bis* si2_bis) {
  delete si2_bis_;
  si2_bis_ = si2_bis;
  if (si2_bis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_layer_3.si2_bis)
}

// optional .rf_phreaker.protobuf.rp_gsm_si2_ter si2_ter = 5;
bool rp_gsm_layer_3::has_si2_ter() const {
  return !_is_default_instance_ && si2_ter_ != NULL;
}
void rp_gsm_layer_3::clear_si2_ter() {
  if (GetArenaNoVirtual() == NULL && si2_ter_ != NULL) delete si2_ter_;
  si2_ter_ = NULL;
}
const ::rf_phreaker::protobuf::rp_gsm_si2_ter& rp_gsm_layer_3::si2_ter() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_layer_3.si2_ter)
  return si2_ter_ != NULL ? *si2_ter_ : *default_instance_->si2_ter_;
}
::rf_phreaker::protobuf::rp_gsm_si2_ter* rp_gsm_layer_3::mutable_si2_ter() {
  
  if (si2_ter_ == NULL) {
    si2_ter_ = new ::rf_phreaker::protobuf::rp_gsm_si2_ter;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_layer_3.si2_ter)
  return si2_ter_;
}
::rf_phreaker::protobuf::rp_gsm_si2_ter* rp_gsm_layer_3::release_si2_ter() {
  
  ::rf_phreaker::protobuf::rp_gsm_si2_ter* temp = si2_ter_;
  si2_ter_ = NULL;
  return temp;
}
void rp_gsm_layer_3::set_allocated_si2_ter(::rf_phreaker::protobuf::rp_gsm_si2_ter* si2_ter) {
  delete si2_ter_;
  si2_ter_ = si2_ter;
  if (si2_ter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_layer_3.si2_ter)
}

// optional .rf_phreaker.protobuf.rp_gsm_si2_quater si2_quater = 6;
bool rp_gsm_layer_3::has_si2_quater() const {
  return !_is_default_instance_ && si2_quater_ != NULL;
}
void rp_gsm_layer_3::clear_si2_quater() {
  if (GetArenaNoVirtual() == NULL && si2_quater_ != NULL) delete si2_quater_;
  si2_quater_ = NULL;
}
const ::rf_phreaker::protobuf::rp_gsm_si2_quater& rp_gsm_layer_3::si2_quater() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_layer_3.si2_quater)
  return si2_quater_ != NULL ? *si2_quater_ : *default_instance_->si2_quater_;
}
::rf_phreaker::protobuf::rp_gsm_si2_quater* rp_gsm_layer_3::mutable_si2_quater() {
  
  if (si2_quater_ == NULL) {
    si2_quater_ = new ::rf_phreaker::protobuf::rp_gsm_si2_quater;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_layer_3.si2_quater)
  return si2_quater_;
}
::rf_phreaker::protobuf::rp_gsm_si2_quater* rp_gsm_layer_3::release_si2_quater() {
  
  ::rf_phreaker::protobuf::rp_gsm_si2_quater* temp = si2_quater_;
  si2_quater_ = NULL;
  return temp;
}
void rp_gsm_layer_3::set_allocated_si2_quater(::rf_phreaker::protobuf::rp_gsm_si2_quater* si2_quater) {
  delete si2_quater_;
  si2_quater_ = si2_quater;
  if (si2_quater) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_layer_3.si2_quater)
}

// optional .rf_phreaker.protobuf.rp_gsm_si3 si3 = 7;
bool rp_gsm_layer_3::has_si3() const {
  return !_is_default_instance_ && si3_ != NULL;
}
void rp_gsm_layer_3::clear_si3() {
  if (GetArenaNoVirtual() == NULL && si3_ != NULL) delete si3_;
  si3_ = NULL;
}
const ::rf_phreaker::protobuf::rp_gsm_si3& rp_gsm_layer_3::si3() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_layer_3.si3)
  return si3_ != NULL ? *si3_ : *default_instance_->si3_;
}
::rf_phreaker::protobuf::rp_gsm_si3* rp_gsm_layer_3::mutable_si3() {
  
  if (si3_ == NULL) {
    si3_ = new ::rf_phreaker::protobuf::rp_gsm_si3;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_layer_3.si3)
  return si3_;
}
::rf_phreaker::protobuf::rp_gsm_si3* rp_gsm_layer_3::release_si3() {
  
  ::rf_phreaker::protobuf::rp_gsm_si3* temp = si3_;
  si3_ = NULL;
  return temp;
}
void rp_gsm_layer_3::set_allocated_si3(::rf_phreaker::protobuf::rp_gsm_si3* si3) {
  delete si3_;
  si3_ = si3;
  if (si3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_layer_3.si3)
}

// optional .rf_phreaker.protobuf.rp_gsm_si4 si4 = 8;
bool rp_gsm_layer_3::has_si4() const {
  return !_is_default_instance_ && si4_ != NULL;
}
void rp_gsm_layer_3::clear_si4() {
  if (GetArenaNoVirtual() == NULL && si4_ != NULL) delete si4_;
  si4_ = NULL;
}
const ::rf_phreaker::protobuf::rp_gsm_si4& rp_gsm_layer_3::si4() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_layer_3.si4)
  return si4_ != NULL ? *si4_ : *default_instance_->si4_;
}
::rf_phreaker::protobuf::rp_gsm_si4* rp_gsm_layer_3::mutable_si4() {
  
  if (si4_ == NULL) {
    si4_ = new ::rf_phreaker::protobuf::rp_gsm_si4;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_layer_3.si4)
  return si4_;
}
::rf_phreaker::protobuf::rp_gsm_si4* rp_gsm_layer_3::release_si4() {
  
  ::rf_phreaker::protobuf::rp_gsm_si4* temp = si4_;
  si4_ = NULL;
  return temp;
}
void rp_gsm_layer_3::set_allocated_si4(::rf_phreaker::protobuf::rp_gsm_si4* si4) {
  delete si4_;
  si4_ = si4;
  if (si4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_layer_3.si4)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_gsm::kBaseFieldNumber;
const int rp_gsm::kArfcnFieldNumber;
const int rp_gsm::kOperatingBandFieldNumber;
const int rp_gsm::kBsicFieldNumber;
const int rp_gsm::kTdmaFrameNumberFieldNumber;
const int rp_gsm::kBcchSignalLevelFieldNumber;
const int rp_gsm::kCtoiFieldNumber;
const int rp_gsm::kLayer3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_gsm::rp_gsm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_gsm)
}

void rp_gsm::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::rf_phreaker::protobuf::rp_base*>(&::rf_phreaker::protobuf::rp_base::default_instance());
  layer_3_ = const_cast< ::rf_phreaker::protobuf::rp_gsm_layer_3*>(&::rf_phreaker::protobuf::rp_gsm_layer_3::default_instance());
}

rp_gsm::rp_gsm(const rp_gsm& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_gsm)
}

void rp_gsm::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_ = NULL;
  arfcn_ = 0;
  operating_band_ = 0;
  bsic_ = 0;
  tdma_frame_number_ = 0;
  bcch_signal_level_ = 0;
  ctoi_ = 0;
  layer_3_ = NULL;
}

rp_gsm::~rp_gsm() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_gsm)
  SharedDtor();
}

void rp_gsm::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete layer_3_;
  }
}

void rp_gsm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_gsm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_gsm_descriptor_;
}

const rp_gsm& rp_gsm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_gsm* rp_gsm::default_instance_ = NULL;

rp_gsm* rp_gsm::New(::google::protobuf::Arena* arena) const {
  rp_gsm* n = new rp_gsm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_gsm::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_gsm*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(arfcn_, ctoi_);
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && layer_3_ != NULL) delete layer_3_;
  layer_3_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool rp_gsm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_gsm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_base base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_arfcn;
        break;
      }

      // optional int32 arfcn = 2;
      case 2: {
        if (tag == 16) {
         parse_arfcn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arfcn_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operating_band;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
      case 3: {
        if (tag == 24) {
         parse_operating_band:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operating_band(static_cast< ::rf_phreaker::protobuf::rp_operating_band >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bsic;
        break;
      }

      // optional int32 bsic = 4;
      case 4: {
        if (tag == 32) {
         parse_bsic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bsic_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tdma_frame_number;
        break;
      }

      // optional int32 tdma_frame_number = 5;
      case 5: {
        if (tag == 40) {
         parse_tdma_frame_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tdma_frame_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_bcch_signal_level;
        break;
      }

      // optional double bcch_signal_level = 6;
      case 6: {
        if (tag == 49) {
         parse_bcch_signal_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bcch_signal_level_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_ctoi;
        break;
      }

      // optional double ctoi = 7;
      case 7: {
        if (tag == 57) {
         parse_ctoi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ctoi_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_layer_3;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_gsm_layer_3 layer_3 = 8;
      case 8: {
        if (tag == 66) {
         parse_layer_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer_3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_gsm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_gsm)
  return false;
#undef DO_
}

void rp_gsm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_gsm)
  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // optional int32 arfcn = 2;
  if (this->arfcn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->arfcn(), output);
  }

  // optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
  if (this->operating_band() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operating_band(), output);
  }

  // optional int32 bsic = 4;
  if (this->bsic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bsic(), output);
  }

  // optional int32 tdma_frame_number = 5;
  if (this->tdma_frame_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tdma_frame_number(), output);
  }

  // optional double bcch_signal_level = 6;
  if (this->bcch_signal_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->bcch_signal_level(), output);
  }

  // optional double ctoi = 7;
  if (this->ctoi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ctoi(), output);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_layer_3 layer_3 = 8;
  if (this->has_layer_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->layer_3_, output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_gsm)
}

::google::protobuf::uint8* rp_gsm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_gsm)
  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->base_, target);
  }

  // optional int32 arfcn = 2;
  if (this->arfcn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->arfcn(), target);
  }

  // optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
  if (this->operating_band() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operating_band(), target);
  }

  // optional int32 bsic = 4;
  if (this->bsic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bsic(), target);
  }

  // optional int32 tdma_frame_number = 5;
  if (this->tdma_frame_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tdma_frame_number(), target);
  }

  // optional double bcch_signal_level = 6;
  if (this->bcch_signal_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->bcch_signal_level(), target);
  }

  // optional double ctoi = 7;
  if (this->ctoi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ctoi(), target);
  }

  // optional .rf_phreaker.protobuf.rp_gsm_layer_3 layer_3 = 8;
  if (this->has_layer_3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->layer_3_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_gsm)
  return target;
}

int rp_gsm::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional int32 arfcn = 2;
  if (this->arfcn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->arfcn());
  }

  // optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
  if (this->operating_band() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operating_band());
  }

  // optional int32 bsic = 4;
  if (this->bsic() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bsic());
  }

  // optional int32 tdma_frame_number = 5;
  if (this->tdma_frame_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tdma_frame_number());
  }

  // optional double bcch_signal_level = 6;
  if (this->bcch_signal_level() != 0) {
    total_size += 1 + 8;
  }

  // optional double ctoi = 7;
  if (this->ctoi() != 0) {
    total_size += 1 + 8;
  }

  // optional .rf_phreaker.protobuf.rp_gsm_layer_3 layer_3 = 8;
  if (this->has_layer_3()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->layer_3_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_gsm::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_gsm* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_gsm>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_gsm::MergeFrom(const rp_gsm& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_base()) {
    mutable_base()->::rf_phreaker::protobuf::rp_base::MergeFrom(from.base());
  }
  if (from.arfcn() != 0) {
    set_arfcn(from.arfcn());
  }
  if (from.operating_band() != 0) {
    set_operating_band(from.operating_band());
  }
  if (from.bsic() != 0) {
    set_bsic(from.bsic());
  }
  if (from.tdma_frame_number() != 0) {
    set_tdma_frame_number(from.tdma_frame_number());
  }
  if (from.bcch_signal_level() != 0) {
    set_bcch_signal_level(from.bcch_signal_level());
  }
  if (from.ctoi() != 0) {
    set_ctoi(from.ctoi());
  }
  if (from.has_layer_3()) {
    mutable_layer_3()->::rf_phreaker::protobuf::rp_gsm_layer_3::MergeFrom(from.layer_3());
  }
}

void rp_gsm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_gsm::CopyFrom(const rp_gsm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_gsm::IsInitialized() const {

  return true;
}

void rp_gsm::Swap(rp_gsm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_gsm::InternalSwap(rp_gsm* other) {
  std::swap(base_, other->base_);
  std::swap(arfcn_, other->arfcn_);
  std::swap(operating_band_, other->operating_band_);
  std::swap(bsic_, other->bsic_);
  std::swap(tdma_frame_number_, other->tdma_frame_number_);
  std::swap(bcch_signal_level_, other->bcch_signal_level_);
  std::swap(ctoi_, other->ctoi_);
  std::swap(layer_3_, other->layer_3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_gsm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_gsm_descriptor_;
  metadata.reflection = rp_gsm_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_gsm

// optional .rf_phreaker.protobuf.rp_base base = 1;
bool rp_gsm::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void rp_gsm::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::rf_phreaker::protobuf::rp_base& rp_gsm::base() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::rf_phreaker::protobuf::rp_base* rp_gsm::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::rf_phreaker::protobuf::rp_base;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm.base)
  return base_;
}
::rf_phreaker::protobuf::rp_base* rp_gsm::release_base() {
  
  ::rf_phreaker::protobuf::rp_base* temp = base_;
  base_ = NULL;
  return temp;
}
void rp_gsm::set_allocated_base(::rf_phreaker::protobuf::rp_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm.base)
}

// optional int32 arfcn = 2;
void rp_gsm::clear_arfcn() {
  arfcn_ = 0;
}
 ::google::protobuf::int32 rp_gsm::arfcn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm.arfcn)
  return arfcn_;
}
 void rp_gsm::set_arfcn(::google::protobuf::int32 value) {
  
  arfcn_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm.arfcn)
}

// optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
void rp_gsm::clear_operating_band() {
  operating_band_ = 0;
}
 ::rf_phreaker::protobuf::rp_operating_band rp_gsm::operating_band() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm.operating_band)
  return static_cast< ::rf_phreaker::protobuf::rp_operating_band >(operating_band_);
}
 void rp_gsm::set_operating_band(::rf_phreaker::protobuf::rp_operating_band value) {
  
  operating_band_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm.operating_band)
}

// optional int32 bsic = 4;
void rp_gsm::clear_bsic() {
  bsic_ = 0;
}
 ::google::protobuf::int32 rp_gsm::bsic() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm.bsic)
  return bsic_;
}
 void rp_gsm::set_bsic(::google::protobuf::int32 value) {
  
  bsic_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm.bsic)
}

// optional int32 tdma_frame_number = 5;
void rp_gsm::clear_tdma_frame_number() {
  tdma_frame_number_ = 0;
}
 ::google::protobuf::int32 rp_gsm::tdma_frame_number() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm.tdma_frame_number)
  return tdma_frame_number_;
}
 void rp_gsm::set_tdma_frame_number(::google::protobuf::int32 value) {
  
  tdma_frame_number_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm.tdma_frame_number)
}

// optional double bcch_signal_level = 6;
void rp_gsm::clear_bcch_signal_level() {
  bcch_signal_level_ = 0;
}
 double rp_gsm::bcch_signal_level() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm.bcch_signal_level)
  return bcch_signal_level_;
}
 void rp_gsm::set_bcch_signal_level(double value) {
  
  bcch_signal_level_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm.bcch_signal_level)
}

// optional double ctoi = 7;
void rp_gsm::clear_ctoi() {
  ctoi_ = 0;
}
 double rp_gsm::ctoi() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm.ctoi)
  return ctoi_;
}
 void rp_gsm::set_ctoi(double value) {
  
  ctoi_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm.ctoi)
}

// optional .rf_phreaker.protobuf.rp_gsm_layer_3 layer_3 = 8;
bool rp_gsm::has_layer_3() const {
  return !_is_default_instance_ && layer_3_ != NULL;
}
void rp_gsm::clear_layer_3() {
  if (GetArenaNoVirtual() == NULL && layer_3_ != NULL) delete layer_3_;
  layer_3_ = NULL;
}
const ::rf_phreaker::protobuf::rp_gsm_layer_3& rp_gsm::layer_3() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm.layer_3)
  return layer_3_ != NULL ? *layer_3_ : *default_instance_->layer_3_;
}
::rf_phreaker::protobuf::rp_gsm_layer_3* rp_gsm::mutable_layer_3() {
  
  if (layer_3_ == NULL) {
    layer_3_ = new ::rf_phreaker::protobuf::rp_gsm_layer_3;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm.layer_3)
  return layer_3_;
}
::rf_phreaker::protobuf::rp_gsm_layer_3* rp_gsm::release_layer_3() {
  
  ::rf_phreaker::protobuf::rp_gsm_layer_3* temp = layer_3_;
  layer_3_ = NULL;
  return temp;
}
void rp_gsm::set_allocated_layer_3(::rf_phreaker::protobuf::rp_gsm_layer_3* layer_3) {
  delete layer_3_;
  layer_3_ = layer_3;
  if (layer_3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm.layer_3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_gsm_update::kBaseFieldNumber;
const int rp_gsm_update::kGsmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_gsm_update::rp_gsm_update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_gsm_update)
}

void rp_gsm_update::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::rf_phreaker::protobuf::rp_base*>(&::rf_phreaker::protobuf::rp_base::default_instance());
}

rp_gsm_update::rp_gsm_update(const rp_gsm_update& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_gsm_update)
}

void rp_gsm_update::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_ = NULL;
}

rp_gsm_update::~rp_gsm_update() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_gsm_update)
  SharedDtor();
}

void rp_gsm_update::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void rp_gsm_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_gsm_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_gsm_update_descriptor_;
}

const rp_gsm_update& rp_gsm_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_gsm_update* rp_gsm_update::default_instance_ = NULL;

rp_gsm_update* rp_gsm_update::New(::google::protobuf::Arena* arena) const {
  rp_gsm_update* n = new rp_gsm_update;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_gsm_update::Clear() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  gsm_.Clear();
}

bool rp_gsm_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_gsm_update)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_base base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gsm;
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_gsm gsm = 2;
      case 2: {
        if (tag == 18) {
         parse_gsm:
          DO_(input->IncrementRecursionDepth());
         parse_loop_gsm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_gsm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_gsm;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_gsm_update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_gsm_update)
  return false;
#undef DO_
}

void rp_gsm_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_gsm_update)
  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // repeated .rf_phreaker.protobuf.rp_gsm gsm = 2;
  for (unsigned int i = 0, n = this->gsm_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gsm(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_gsm_update)
}

::google::protobuf::uint8* rp_gsm_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_gsm_update)
  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->base_, target);
  }

  // repeated .rf_phreaker.protobuf.rp_gsm gsm = 2;
  for (unsigned int i = 0, n = this->gsm_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gsm(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_gsm_update)
  return target;
}

int rp_gsm_update::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // repeated .rf_phreaker.protobuf.rp_gsm gsm = 2;
  total_size += 1 * this->gsm_size();
  for (int i = 0; i < this->gsm_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gsm(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_gsm_update::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_gsm_update* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_gsm_update>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_gsm_update::MergeFrom(const rp_gsm_update& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  gsm_.MergeFrom(from.gsm_);
  if (from.has_base()) {
    mutable_base()->::rf_phreaker::protobuf::rp_base::MergeFrom(from.base());
  }
}

void rp_gsm_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_gsm_update::CopyFrom(const rp_gsm_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_gsm_update::IsInitialized() const {

  return true;
}

void rp_gsm_update::Swap(rp_gsm_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_gsm_update::InternalSwap(rp_gsm_update* other) {
  std::swap(base_, other->base_);
  gsm_.UnsafeArenaSwap(&other->gsm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_gsm_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_gsm_update_descriptor_;
  metadata.reflection = rp_gsm_update_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_gsm_update

// optional .rf_phreaker.protobuf.rp_base base = 1;
bool rp_gsm_update::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void rp_gsm_update::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::rf_phreaker::protobuf::rp_base& rp_gsm_update::base() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_update.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::rf_phreaker::protobuf::rp_base* rp_gsm_update::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::rf_phreaker::protobuf::rp_base;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_update.base)
  return base_;
}
::rf_phreaker::protobuf::rp_base* rp_gsm_update::release_base() {
  
  ::rf_phreaker::protobuf::rp_base* temp = base_;
  base_ = NULL;
  return temp;
}
void rp_gsm_update::set_allocated_base(::rf_phreaker::protobuf::rp_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_update.base)
}

// repeated .rf_phreaker.protobuf.rp_gsm gsm = 2;
int rp_gsm_update::gsm_size() const {
  return gsm_.size();
}
void rp_gsm_update::clear_gsm() {
  gsm_.Clear();
}
const ::rf_phreaker::protobuf::rp_gsm& rp_gsm_update::gsm(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_update.gsm)
  return gsm_.Get(index);
}
::rf_phreaker::protobuf::rp_gsm* rp_gsm_update::mutable_gsm(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_update.gsm)
  return gsm_.Mutable(index);
}
::rf_phreaker::protobuf::rp_gsm* rp_gsm_update::add_gsm() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_update.gsm)
  return gsm_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm >*
rp_gsm_update::mutable_gsm() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_update.gsm)
  return &gsm_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm >&
rp_gsm_update::gsm() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_update.gsm)
  return gsm_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_wcdma_utran_neighbor::kUarfcnFieldNumber;
const int rp_wcdma_utran_neighbor::kCpichFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_wcdma_utran_neighbor::rp_wcdma_utran_neighbor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_wcdma_utran_neighbor)
}

void rp_wcdma_utran_neighbor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_wcdma_utran_neighbor::rp_wcdma_utran_neighbor(const rp_wcdma_utran_neighbor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_wcdma_utran_neighbor)
}

void rp_wcdma_utran_neighbor::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  uarfcn_ = 0;
  cpich_ = 0;
}

rp_wcdma_utran_neighbor::~rp_wcdma_utran_neighbor() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_wcdma_utran_neighbor)
  SharedDtor();
}

void rp_wcdma_utran_neighbor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_wcdma_utran_neighbor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_wcdma_utran_neighbor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_wcdma_utran_neighbor_descriptor_;
}

const rp_wcdma_utran_neighbor& rp_wcdma_utran_neighbor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_wcdma_utran_neighbor* rp_wcdma_utran_neighbor::default_instance_ = NULL;

rp_wcdma_utran_neighbor* rp_wcdma_utran_neighbor::New(::google::protobuf::Arena* arena) const {
  rp_wcdma_utran_neighbor* n = new rp_wcdma_utran_neighbor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_wcdma_utran_neighbor::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_wcdma_utran_neighbor*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uarfcn_, cpich_);

#undef ZR_HELPER_
#undef ZR_

}

bool rp_wcdma_utran_neighbor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_wcdma_utran_neighbor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uarfcn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uarfcn_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cpich;
        break;
      }

      // optional int32 cpich = 2;
      case 2: {
        if (tag == 16) {
         parse_cpich:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpich_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_wcdma_utran_neighbor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_wcdma_utran_neighbor)
  return false;
#undef DO_
}

void rp_wcdma_utran_neighbor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_wcdma_utran_neighbor)
  // optional int32 uarfcn = 1;
  if (this->uarfcn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uarfcn(), output);
  }

  // optional int32 cpich = 2;
  if (this->cpich() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cpich(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_wcdma_utran_neighbor)
}

::google::protobuf::uint8* rp_wcdma_utran_neighbor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_wcdma_utran_neighbor)
  // optional int32 uarfcn = 1;
  if (this->uarfcn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uarfcn(), target);
  }

  // optional int32 cpich = 2;
  if (this->cpich() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cpich(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_wcdma_utran_neighbor)
  return target;
}

int rp_wcdma_utran_neighbor::ByteSize() const {
  int total_size = 0;

  // optional int32 uarfcn = 1;
  if (this->uarfcn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uarfcn());
  }

  // optional int32 cpich = 2;
  if (this->cpich() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cpich());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_wcdma_utran_neighbor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_wcdma_utran_neighbor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_wcdma_utran_neighbor>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_wcdma_utran_neighbor::MergeFrom(const rp_wcdma_utran_neighbor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.uarfcn() != 0) {
    set_uarfcn(from.uarfcn());
  }
  if (from.cpich() != 0) {
    set_cpich(from.cpich());
  }
}

void rp_wcdma_utran_neighbor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_wcdma_utran_neighbor::CopyFrom(const rp_wcdma_utran_neighbor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_wcdma_utran_neighbor::IsInitialized() const {

  return true;
}

void rp_wcdma_utran_neighbor::Swap(rp_wcdma_utran_neighbor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_wcdma_utran_neighbor::InternalSwap(rp_wcdma_utran_neighbor* other) {
  std::swap(uarfcn_, other->uarfcn_);
  std::swap(cpich_, other->cpich_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_wcdma_utran_neighbor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_wcdma_utran_neighbor_descriptor_;
  metadata.reflection = rp_wcdma_utran_neighbor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_wcdma_utran_neighbor

// optional int32 uarfcn = 1;
void rp_wcdma_utran_neighbor::clear_uarfcn() {
  uarfcn_ = 0;
}
 ::google::protobuf::int32 rp_wcdma_utran_neighbor::uarfcn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_utran_neighbor.uarfcn)
  return uarfcn_;
}
 void rp_wcdma_utran_neighbor::set_uarfcn(::google::protobuf::int32 value) {
  
  uarfcn_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_utran_neighbor.uarfcn)
}

// optional int32 cpich = 2;
void rp_wcdma_utran_neighbor::clear_cpich() {
  cpich_ = 0;
}
 ::google::protobuf::int32 rp_wcdma_utran_neighbor::cpich() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_utran_neighbor.cpich)
  return cpich_;
}
 void rp_wcdma_utran_neighbor::set_cpich(::google::protobuf::int32 value) {
  
  cpich_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_utran_neighbor.cpich)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_wcdma_gsm_neighbor::kBsicFieldNumber;
const int rp_wcdma_gsm_neighbor::kBandIndicatorFieldNumber;
const int rp_wcdma_gsm_neighbor::kArfcnFieldNumber;
const int rp_wcdma_gsm_neighbor::kQrxLevMinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_wcdma_gsm_neighbor::rp_wcdma_gsm_neighbor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor)
}

void rp_wcdma_gsm_neighbor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_wcdma_gsm_neighbor::rp_wcdma_gsm_neighbor(const rp_wcdma_gsm_neighbor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor)
}

void rp_wcdma_gsm_neighbor::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  bsic_ = 0;
  band_indicator_ = 0;
  arfcn_ = 0;
  qrx_lev_min_ = 0;
}

rp_wcdma_gsm_neighbor::~rp_wcdma_gsm_neighbor() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor)
  SharedDtor();
}

void rp_wcdma_gsm_neighbor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_wcdma_gsm_neighbor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_wcdma_gsm_neighbor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_wcdma_gsm_neighbor_descriptor_;
}

const rp_wcdma_gsm_neighbor& rp_wcdma_gsm_neighbor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_wcdma_gsm_neighbor* rp_wcdma_gsm_neighbor::default_instance_ = NULL;

rp_wcdma_gsm_neighbor* rp_wcdma_gsm_neighbor::New(::google::protobuf::Arena* arena) const {
  rp_wcdma_gsm_neighbor* n = new rp_wcdma_gsm_neighbor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_wcdma_gsm_neighbor::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_wcdma_gsm_neighbor*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bsic_, qrx_lev_min_);

#undef ZR_HELPER_
#undef ZR_

}

bool rp_wcdma_gsm_neighbor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bsic = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bsic_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_band_indicator;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 2;
      case 2: {
        if (tag == 16) {
         parse_band_indicator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_band_indicator(static_cast< ::rf_phreaker::protobuf::rp_band_indicator_type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_arfcn;
        break;
      }

      // optional int32 arfcn = 3;
      case 3: {
        if (tag == 24) {
         parse_arfcn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arfcn_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_qrx_lev_min;
        break;
      }

      // optional int32 qrx_lev_min = 4;
      case 4: {
        if (tag == 32) {
         parse_qrx_lev_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qrx_lev_min_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor)
  return false;
#undef DO_
}

void rp_wcdma_gsm_neighbor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor)
  // optional int32 bsic = 1;
  if (this->bsic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bsic(), output);
  }

  // optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 2;
  if (this->band_indicator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->band_indicator(), output);
  }

  // optional int32 arfcn = 3;
  if (this->arfcn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->arfcn(), output);
  }

  // optional int32 qrx_lev_min = 4;
  if (this->qrx_lev_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->qrx_lev_min(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor)
}

::google::protobuf::uint8* rp_wcdma_gsm_neighbor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor)
  // optional int32 bsic = 1;
  if (this->bsic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bsic(), target);
  }

  // optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 2;
  if (this->band_indicator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->band_indicator(), target);
  }

  // optional int32 arfcn = 3;
  if (this->arfcn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->arfcn(), target);
  }

  // optional int32 qrx_lev_min = 4;
  if (this->qrx_lev_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->qrx_lev_min(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor)
  return target;
}

int rp_wcdma_gsm_neighbor::ByteSize() const {
  int total_size = 0;

  // optional int32 bsic = 1;
  if (this->bsic() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bsic());
  }

  // optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 2;
  if (this->band_indicator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->band_indicator());
  }

  // optional int32 arfcn = 3;
  if (this->arfcn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->arfcn());
  }

  // optional int32 qrx_lev_min = 4;
  if (this->qrx_lev_min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->qrx_lev_min());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_wcdma_gsm_neighbor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_wcdma_gsm_neighbor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_wcdma_gsm_neighbor>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_wcdma_gsm_neighbor::MergeFrom(const rp_wcdma_gsm_neighbor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.bsic() != 0) {
    set_bsic(from.bsic());
  }
  if (from.band_indicator() != 0) {
    set_band_indicator(from.band_indicator());
  }
  if (from.arfcn() != 0) {
    set_arfcn(from.arfcn());
  }
  if (from.qrx_lev_min() != 0) {
    set_qrx_lev_min(from.qrx_lev_min());
  }
}

void rp_wcdma_gsm_neighbor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_wcdma_gsm_neighbor::CopyFrom(const rp_wcdma_gsm_neighbor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_wcdma_gsm_neighbor::IsInitialized() const {

  return true;
}

void rp_wcdma_gsm_neighbor::Swap(rp_wcdma_gsm_neighbor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_wcdma_gsm_neighbor::InternalSwap(rp_wcdma_gsm_neighbor* other) {
  std::swap(bsic_, other->bsic_);
  std::swap(band_indicator_, other->band_indicator_);
  std::swap(arfcn_, other->arfcn_);
  std::swap(qrx_lev_min_, other->qrx_lev_min_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_wcdma_gsm_neighbor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_wcdma_gsm_neighbor_descriptor_;
  metadata.reflection = rp_wcdma_gsm_neighbor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_wcdma_gsm_neighbor

// optional int32 bsic = 1;
void rp_wcdma_gsm_neighbor::clear_bsic() {
  bsic_ = 0;
}
 ::google::protobuf::int32 rp_wcdma_gsm_neighbor::bsic() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor.bsic)
  return bsic_;
}
 void rp_wcdma_gsm_neighbor::set_bsic(::google::protobuf::int32 value) {
  
  bsic_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor.bsic)
}

// optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 2;
void rp_wcdma_gsm_neighbor::clear_band_indicator() {
  band_indicator_ = 0;
}
 ::rf_phreaker::protobuf::rp_band_indicator_type rp_wcdma_gsm_neighbor::band_indicator() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor.band_indicator)
  return static_cast< ::rf_phreaker::protobuf::rp_band_indicator_type >(band_indicator_);
}
 void rp_wcdma_gsm_neighbor::set_band_indicator(::rf_phreaker::protobuf::rp_band_indicator_type value) {
  
  band_indicator_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor.band_indicator)
}

// optional int32 arfcn = 3;
void rp_wcdma_gsm_neighbor::clear_arfcn() {
  arfcn_ = 0;
}
 ::google::protobuf::int32 rp_wcdma_gsm_neighbor::arfcn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor.arfcn)
  return arfcn_;
}
 void rp_wcdma_gsm_neighbor::set_arfcn(::google::protobuf::int32 value) {
  
  arfcn_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor.arfcn)
}

// optional int32 qrx_lev_min = 4;
void rp_wcdma_gsm_neighbor::clear_qrx_lev_min() {
  qrx_lev_min_ = 0;
}
 ::google::protobuf::int32 rp_wcdma_gsm_neighbor::qrx_lev_min() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor.qrx_lev_min)
  return qrx_lev_min_;
}
 void rp_wcdma_gsm_neighbor::set_qrx_lev_min(::google::protobuf::int32 value) {
  
  qrx_lev_min_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor.qrx_lev_min)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_wcdma_mib::kPlmnFieldNumber;
const int rp_wcdma_mib::kMultiplePlmnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_wcdma_mib::rp_wcdma_mib()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_wcdma_mib)
}

void rp_wcdma_mib::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  plmn_ = const_cast< ::rf_phreaker::protobuf::rp_plmn*>(&::rf_phreaker::protobuf::rp_plmn::default_instance());
}

rp_wcdma_mib::rp_wcdma_mib(const rp_wcdma_mib& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_wcdma_mib)
}

void rp_wcdma_mib::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  plmn_ = NULL;
}

rp_wcdma_mib::~rp_wcdma_mib() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_wcdma_mib)
  SharedDtor();
}

void rp_wcdma_mib::SharedDtor() {
  if (this != default_instance_) {
    delete plmn_;
  }
}

void rp_wcdma_mib::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_wcdma_mib::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_wcdma_mib_descriptor_;
}

const rp_wcdma_mib& rp_wcdma_mib::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_wcdma_mib* rp_wcdma_mib::default_instance_ = NULL;

rp_wcdma_mib* rp_wcdma_mib::New(::google::protobuf::Arena* arena) const {
  rp_wcdma_mib* n = new rp_wcdma_mib;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_wcdma_mib::Clear() {
  if (GetArenaNoVirtual() == NULL && plmn_ != NULL) delete plmn_;
  plmn_ = NULL;
  multiple_plmns_.Clear();
}

bool rp_wcdma_mib::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_wcdma_mib)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plmn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_multiple_plmns;
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_plmn multiple_plmns = 3;
      case 3: {
        if (tag == 26) {
         parse_multiple_plmns:
          DO_(input->IncrementRecursionDepth());
         parse_loop_multiple_plmns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_multiple_plmns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_multiple_plmns;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_wcdma_mib)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_wcdma_mib)
  return false;
#undef DO_
}

void rp_wcdma_mib::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_wcdma_mib)
  // optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
  if (this->has_plmn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->plmn_, output);
  }

  // repeated .rf_phreaker.protobuf.rp_plmn multiple_plmns = 3;
  for (unsigned int i = 0, n = this->multiple_plmns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->multiple_plmns(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_wcdma_mib)
}

::google::protobuf::uint8* rp_wcdma_mib::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_wcdma_mib)
  // optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
  if (this->has_plmn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->plmn_, target);
  }

  // repeated .rf_phreaker.protobuf.rp_plmn multiple_plmns = 3;
  for (unsigned int i = 0, n = this->multiple_plmns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->multiple_plmns(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_wcdma_mib)
  return target;
}

int rp_wcdma_mib::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
  if (this->has_plmn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->plmn_);
  }

  // repeated .rf_phreaker.protobuf.rp_plmn multiple_plmns = 3;
  total_size += 1 * this->multiple_plmns_size();
  for (int i = 0; i < this->multiple_plmns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->multiple_plmns(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_wcdma_mib::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_wcdma_mib* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_wcdma_mib>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_wcdma_mib::MergeFrom(const rp_wcdma_mib& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  multiple_plmns_.MergeFrom(from.multiple_plmns_);
  if (from.has_plmn()) {
    mutable_plmn()->::rf_phreaker::protobuf::rp_plmn::MergeFrom(from.plmn());
  }
}

void rp_wcdma_mib::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_wcdma_mib::CopyFrom(const rp_wcdma_mib& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_wcdma_mib::IsInitialized() const {

  return true;
}

void rp_wcdma_mib::Swap(rp_wcdma_mib* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_wcdma_mib::InternalSwap(rp_wcdma_mib* other) {
  std::swap(plmn_, other->plmn_);
  multiple_plmns_.UnsafeArenaSwap(&other->multiple_plmns_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_wcdma_mib::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_wcdma_mib_descriptor_;
  metadata.reflection = rp_wcdma_mib_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_wcdma_mib

// optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
bool rp_wcdma_mib::has_plmn() const {
  return !_is_default_instance_ && plmn_ != NULL;
}
void rp_wcdma_mib::clear_plmn() {
  if (GetArenaNoVirtual() == NULL && plmn_ != NULL) delete plmn_;
  plmn_ = NULL;
}
const ::rf_phreaker::protobuf::rp_plmn& rp_wcdma_mib::plmn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_mib.plmn)
  return plmn_ != NULL ? *plmn_ : *default_instance_->plmn_;
}
::rf_phreaker::protobuf::rp_plmn* rp_wcdma_mib::mutable_plmn() {
  
  if (plmn_ == NULL) {
    plmn_ = new ::rf_phreaker::protobuf::rp_plmn;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_mib.plmn)
  return plmn_;
}
::rf_phreaker::protobuf::rp_plmn* rp_wcdma_mib::release_plmn() {
  
  ::rf_phreaker::protobuf::rp_plmn* temp = plmn_;
  plmn_ = NULL;
  return temp;
}
void rp_wcdma_mib::set_allocated_plmn(::rf_phreaker::protobuf::rp_plmn* plmn) {
  delete plmn_;
  plmn_ = plmn;
  if (plmn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma_mib.plmn)
}

// repeated .rf_phreaker.protobuf.rp_plmn multiple_plmns = 3;
int rp_wcdma_mib::multiple_plmns_size() const {
  return multiple_plmns_.size();
}
void rp_wcdma_mib::clear_multiple_plmns() {
  multiple_plmns_.Clear();
}
const ::rf_phreaker::protobuf::rp_plmn& rp_wcdma_mib::multiple_plmns(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_mib.multiple_plmns)
  return multiple_plmns_.Get(index);
}
::rf_phreaker::protobuf::rp_plmn* rp_wcdma_mib::mutable_multiple_plmns(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_mib.multiple_plmns)
  return multiple_plmns_.Mutable(index);
}
::rf_phreaker::protobuf::rp_plmn* rp_wcdma_mib::add_multiple_plmns() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_mib.multiple_plmns)
  return multiple_plmns_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_plmn >*
rp_wcdma_mib::mutable_multiple_plmns() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_mib.multiple_plmns)
  return &multiple_plmns_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_plmn >&
rp_wcdma_mib::multiple_plmns() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_mib.multiple_plmns)
  return multiple_plmns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_wcdma_sib1::kLacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_wcdma_sib1::rp_wcdma_sib1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_wcdma_sib1)
}

void rp_wcdma_sib1::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_wcdma_sib1::rp_wcdma_sib1(const rp_wcdma_sib1& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_wcdma_sib1)
}

void rp_wcdma_sib1::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  lac_ = 0;
}

rp_wcdma_sib1::~rp_wcdma_sib1() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_wcdma_sib1)
  SharedDtor();
}

void rp_wcdma_sib1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_wcdma_sib1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_wcdma_sib1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_wcdma_sib1_descriptor_;
}

const rp_wcdma_sib1& rp_wcdma_sib1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_wcdma_sib1* rp_wcdma_sib1::default_instance_ = NULL;

rp_wcdma_sib1* rp_wcdma_sib1::New(::google::protobuf::Arena* arena) const {
  rp_wcdma_sib1* n = new rp_wcdma_sib1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_wcdma_sib1::Clear() {
  lac_ = 0;
}

bool rp_wcdma_sib1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_wcdma_sib1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lac = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lac_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_wcdma_sib1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_wcdma_sib1)
  return false;
#undef DO_
}

void rp_wcdma_sib1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_wcdma_sib1)
  // optional int32 lac = 2;
  if (this->lac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lac(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_wcdma_sib1)
}

::google::protobuf::uint8* rp_wcdma_sib1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_wcdma_sib1)
  // optional int32 lac = 2;
  if (this->lac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lac(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_wcdma_sib1)
  return target;
}

int rp_wcdma_sib1::ByteSize() const {
  int total_size = 0;

  // optional int32 lac = 2;
  if (this->lac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lac());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_wcdma_sib1::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_wcdma_sib1* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_wcdma_sib1>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_wcdma_sib1::MergeFrom(const rp_wcdma_sib1& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.lac() != 0) {
    set_lac(from.lac());
  }
}

void rp_wcdma_sib1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_wcdma_sib1::CopyFrom(const rp_wcdma_sib1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_wcdma_sib1::IsInitialized() const {

  return true;
}

void rp_wcdma_sib1::Swap(rp_wcdma_sib1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_wcdma_sib1::InternalSwap(rp_wcdma_sib1* other) {
  std::swap(lac_, other->lac_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_wcdma_sib1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_wcdma_sib1_descriptor_;
  metadata.reflection = rp_wcdma_sib1_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_wcdma_sib1

// optional int32 lac = 2;
void rp_wcdma_sib1::clear_lac() {
  lac_ = 0;
}
 ::google::protobuf::int32 rp_wcdma_sib1::lac() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib1.lac)
  return lac_;
}
 void rp_wcdma_sib1::set_lac(::google::protobuf::int32 value) {
  
  lac_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_sib1.lac)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_wcdma_sib3::kCidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_wcdma_sib3::rp_wcdma_sib3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_wcdma_sib3)
}

void rp_wcdma_sib3::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_wcdma_sib3::rp_wcdma_sib3(const rp_wcdma_sib3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_wcdma_sib3)
}

void rp_wcdma_sib3::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cid_ = 0;
}

rp_wcdma_sib3::~rp_wcdma_sib3() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_wcdma_sib3)
  SharedDtor();
}

void rp_wcdma_sib3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_wcdma_sib3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_wcdma_sib3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_wcdma_sib3_descriptor_;
}

const rp_wcdma_sib3& rp_wcdma_sib3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_wcdma_sib3* rp_wcdma_sib3::default_instance_ = NULL;

rp_wcdma_sib3* rp_wcdma_sib3::New(::google::protobuf::Arena* arena) const {
  rp_wcdma_sib3* n = new rp_wcdma_sib3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_wcdma_sib3::Clear() {
  cid_ = 0;
}

bool rp_wcdma_sib3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_wcdma_sib3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cid = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_wcdma_sib3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_wcdma_sib3)
  return false;
#undef DO_
}

void rp_wcdma_sib3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_wcdma_sib3)
  // optional int32 cid = 2;
  if (this->cid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cid(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_wcdma_sib3)
}

::google::protobuf::uint8* rp_wcdma_sib3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_wcdma_sib3)
  // optional int32 cid = 2;
  if (this->cid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_wcdma_sib3)
  return target;
}

int rp_wcdma_sib3::ByteSize() const {
  int total_size = 0;

  // optional int32 cid = 2;
  if (this->cid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_wcdma_sib3::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_wcdma_sib3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_wcdma_sib3>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_wcdma_sib3::MergeFrom(const rp_wcdma_sib3& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.cid() != 0) {
    set_cid(from.cid());
  }
}

void rp_wcdma_sib3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_wcdma_sib3::CopyFrom(const rp_wcdma_sib3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_wcdma_sib3::IsInitialized() const {

  return true;
}

void rp_wcdma_sib3::Swap(rp_wcdma_sib3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_wcdma_sib3::InternalSwap(rp_wcdma_sib3* other) {
  std::swap(cid_, other->cid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_wcdma_sib3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_wcdma_sib3_descriptor_;
  metadata.reflection = rp_wcdma_sib3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_wcdma_sib3

// optional int32 cid = 2;
void rp_wcdma_sib3::clear_cid() {
  cid_ = 0;
}
 ::google::protobuf::int32 rp_wcdma_sib3::cid() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib3.cid)
  return cid_;
}
 void rp_wcdma_sib3::set_cid(::google::protobuf::int32 value) {
  
  cid_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_sib3.cid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_wcdma_sib4::kCidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_wcdma_sib4::rp_wcdma_sib4()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_wcdma_sib4)
}

void rp_wcdma_sib4::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_wcdma_sib4::rp_wcdma_sib4(const rp_wcdma_sib4& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_wcdma_sib4)
}

void rp_wcdma_sib4::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cid_ = 0;
}

rp_wcdma_sib4::~rp_wcdma_sib4() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_wcdma_sib4)
  SharedDtor();
}

void rp_wcdma_sib4::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_wcdma_sib4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_wcdma_sib4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_wcdma_sib4_descriptor_;
}

const rp_wcdma_sib4& rp_wcdma_sib4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_wcdma_sib4* rp_wcdma_sib4::default_instance_ = NULL;

rp_wcdma_sib4* rp_wcdma_sib4::New(::google::protobuf::Arena* arena) const {
  rp_wcdma_sib4* n = new rp_wcdma_sib4;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_wcdma_sib4::Clear() {
  cid_ = 0;
}

bool rp_wcdma_sib4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_wcdma_sib4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cid = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_wcdma_sib4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_wcdma_sib4)
  return false;
#undef DO_
}

void rp_wcdma_sib4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_wcdma_sib4)
  // optional int32 cid = 2;
  if (this->cid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cid(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_wcdma_sib4)
}

::google::protobuf::uint8* rp_wcdma_sib4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_wcdma_sib4)
  // optional int32 cid = 2;
  if (this->cid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_wcdma_sib4)
  return target;
}

int rp_wcdma_sib4::ByteSize() const {
  int total_size = 0;

  // optional int32 cid = 2;
  if (this->cid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_wcdma_sib4::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_wcdma_sib4* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_wcdma_sib4>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_wcdma_sib4::MergeFrom(const rp_wcdma_sib4& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.cid() != 0) {
    set_cid(from.cid());
  }
}

void rp_wcdma_sib4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_wcdma_sib4::CopyFrom(const rp_wcdma_sib4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_wcdma_sib4::IsInitialized() const {

  return true;
}

void rp_wcdma_sib4::Swap(rp_wcdma_sib4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_wcdma_sib4::InternalSwap(rp_wcdma_sib4* other) {
  std::swap(cid_, other->cid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_wcdma_sib4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_wcdma_sib4_descriptor_;
  metadata.reflection = rp_wcdma_sib4_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_wcdma_sib4

// optional int32 cid = 2;
void rp_wcdma_sib4::clear_cid() {
  cid_ = 0;
}
 ::google::protobuf::int32 rp_wcdma_sib4::cid() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib4.cid)
  return cid_;
}
 void rp_wcdma_sib4::set_cid(::google::protobuf::int32 value) {
  
  cid_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_sib4.cid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_wcdma_sib11::kUtranIntraNeighborCpichsFieldNumber;
const int rp_wcdma_sib11::kUtranInterNeighborsFieldNumber;
const int rp_wcdma_sib11::kGsmInterNeighborsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_wcdma_sib11::rp_wcdma_sib11()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_wcdma_sib11)
}

void rp_wcdma_sib11::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_wcdma_sib11::rp_wcdma_sib11(const rp_wcdma_sib11& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_wcdma_sib11)
}

void rp_wcdma_sib11::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

rp_wcdma_sib11::~rp_wcdma_sib11() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_wcdma_sib11)
  SharedDtor();
}

void rp_wcdma_sib11::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_wcdma_sib11::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_wcdma_sib11::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_wcdma_sib11_descriptor_;
}

const rp_wcdma_sib11& rp_wcdma_sib11::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_wcdma_sib11* rp_wcdma_sib11::default_instance_ = NULL;

rp_wcdma_sib11* rp_wcdma_sib11::New(::google::protobuf::Arena* arena) const {
  rp_wcdma_sib11* n = new rp_wcdma_sib11;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_wcdma_sib11::Clear() {
  utran_intra_neighbor_cpichs_.Clear();
  utran_inter_neighbors_.Clear();
  gsm_inter_neighbors_.Clear();
}

bool rp_wcdma_sib11::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_wcdma_sib11)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 utran_intra_neighbor_cpichs = 2 [packed = true];
      case 2: {
        if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_utran_intra_neighbor_cpichs())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_utran_intra_neighbor_cpichs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_utran_inter_neighbors;
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_wcdma_utran_neighbor utran_inter_neighbors = 3;
      case 3: {
        if (tag == 26) {
         parse_utran_inter_neighbors:
          DO_(input->IncrementRecursionDepth());
         parse_loop_utran_inter_neighbors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_utran_inter_neighbors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_utran_inter_neighbors;
        if (input->ExpectTag(34)) goto parse_loop_gsm_inter_neighbors;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_wcdma_gsm_neighbor gsm_inter_neighbors = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_gsm_inter_neighbors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_gsm_inter_neighbors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_gsm_inter_neighbors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_wcdma_sib11)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_wcdma_sib11)
  return false;
#undef DO_
}

void rp_wcdma_sib11::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_wcdma_sib11)
  // repeated int32 utran_intra_neighbor_cpichs = 2 [packed = true];
  if (this->utran_intra_neighbor_cpichs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_utran_intra_neighbor_cpichs_cached_byte_size_);
  }
  for (int i = 0; i < this->utran_intra_neighbor_cpichs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->utran_intra_neighbor_cpichs(i), output);
  }

  // repeated .rf_phreaker.protobuf.rp_wcdma_utran_neighbor utran_inter_neighbors = 3;
  for (unsigned int i = 0, n = this->utran_inter_neighbors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->utran_inter_neighbors(i), output);
  }

  // repeated .rf_phreaker.protobuf.rp_wcdma_gsm_neighbor gsm_inter_neighbors = 4;
  for (unsigned int i = 0, n = this->gsm_inter_neighbors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gsm_inter_neighbors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_wcdma_sib11)
}

::google::protobuf::uint8* rp_wcdma_sib11::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_wcdma_sib11)
  // repeated int32 utran_intra_neighbor_cpichs = 2 [packed = true];
  if (this->utran_intra_neighbor_cpichs_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _utran_intra_neighbor_cpichs_cached_byte_size_, target);
  }
  for (int i = 0; i < this->utran_intra_neighbor_cpichs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->utran_intra_neighbor_cpichs(i), target);
  }

  // repeated .rf_phreaker.protobuf.rp_wcdma_utran_neighbor utran_inter_neighbors = 3;
  for (unsigned int i = 0, n = this->utran_inter_neighbors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->utran_inter_neighbors(i), target);
  }

  // repeated .rf_phreaker.protobuf.rp_wcdma_gsm_neighbor gsm_inter_neighbors = 4;
  for (unsigned int i = 0, n = this->gsm_inter_neighbors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gsm_inter_neighbors(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_wcdma_sib11)
  return target;
}

int rp_wcdma_sib11::ByteSize() const {
  int total_size = 0;

  // repeated int32 utran_intra_neighbor_cpichs = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->utran_intra_neighbor_cpichs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->utran_intra_neighbor_cpichs(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _utran_intra_neighbor_cpichs_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .rf_phreaker.protobuf.rp_wcdma_utran_neighbor utran_inter_neighbors = 3;
  total_size += 1 * this->utran_inter_neighbors_size();
  for (int i = 0; i < this->utran_inter_neighbors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->utran_inter_neighbors(i));
  }

  // repeated .rf_phreaker.protobuf.rp_wcdma_gsm_neighbor gsm_inter_neighbors = 4;
  total_size += 1 * this->gsm_inter_neighbors_size();
  for (int i = 0; i < this->gsm_inter_neighbors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gsm_inter_neighbors(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_wcdma_sib11::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_wcdma_sib11* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_wcdma_sib11>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_wcdma_sib11::MergeFrom(const rp_wcdma_sib11& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  utran_intra_neighbor_cpichs_.MergeFrom(from.utran_intra_neighbor_cpichs_);
  utran_inter_neighbors_.MergeFrom(from.utran_inter_neighbors_);
  gsm_inter_neighbors_.MergeFrom(from.gsm_inter_neighbors_);
}

void rp_wcdma_sib11::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_wcdma_sib11::CopyFrom(const rp_wcdma_sib11& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_wcdma_sib11::IsInitialized() const {

  return true;
}

void rp_wcdma_sib11::Swap(rp_wcdma_sib11* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_wcdma_sib11::InternalSwap(rp_wcdma_sib11* other) {
  utran_intra_neighbor_cpichs_.UnsafeArenaSwap(&other->utran_intra_neighbor_cpichs_);
  utran_inter_neighbors_.UnsafeArenaSwap(&other->utran_inter_neighbors_);
  gsm_inter_neighbors_.UnsafeArenaSwap(&other->gsm_inter_neighbors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_wcdma_sib11::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_wcdma_sib11_descriptor_;
  metadata.reflection = rp_wcdma_sib11_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_wcdma_sib11

// repeated int32 utran_intra_neighbor_cpichs = 2 [packed = true];
int rp_wcdma_sib11::utran_intra_neighbor_cpichs_size() const {
  return utran_intra_neighbor_cpichs_.size();
}
void rp_wcdma_sib11::clear_utran_intra_neighbor_cpichs() {
  utran_intra_neighbor_cpichs_.Clear();
}
 ::google::protobuf::int32 rp_wcdma_sib11::utran_intra_neighbor_cpichs(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib11.utran_intra_neighbor_cpichs)
  return utran_intra_neighbor_cpichs_.Get(index);
}
 void rp_wcdma_sib11::set_utran_intra_neighbor_cpichs(int index, ::google::protobuf::int32 value) {
  utran_intra_neighbor_cpichs_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_sib11.utran_intra_neighbor_cpichs)
}
 void rp_wcdma_sib11::add_utran_intra_neighbor_cpichs(::google::protobuf::int32 value) {
  utran_intra_neighbor_cpichs_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_sib11.utran_intra_neighbor_cpichs)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_wcdma_sib11::utran_intra_neighbor_cpichs() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_sib11.utran_intra_neighbor_cpichs)
  return utran_intra_neighbor_cpichs_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_wcdma_sib11::mutable_utran_intra_neighbor_cpichs() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_sib11.utran_intra_neighbor_cpichs)
  return &utran_intra_neighbor_cpichs_;
}

// repeated .rf_phreaker.protobuf.rp_wcdma_utran_neighbor utran_inter_neighbors = 3;
int rp_wcdma_sib11::utran_inter_neighbors_size() const {
  return utran_inter_neighbors_.size();
}
void rp_wcdma_sib11::clear_utran_inter_neighbors() {
  utran_inter_neighbors_.Clear();
}
const ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor& rp_wcdma_sib11::utran_inter_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib11.utran_inter_neighbors)
  return utran_inter_neighbors_.Get(index);
}
::rf_phreaker::protobuf::rp_wcdma_utran_neighbor* rp_wcdma_sib11::mutable_utran_inter_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_sib11.utran_inter_neighbors)
  return utran_inter_neighbors_.Mutable(index);
}
::rf_phreaker::protobuf::rp_wcdma_utran_neighbor* rp_wcdma_sib11::add_utran_inter_neighbors() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_sib11.utran_inter_neighbors)
  return utran_inter_neighbors_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor >*
rp_wcdma_sib11::mutable_utran_inter_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_sib11.utran_inter_neighbors)
  return &utran_inter_neighbors_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor >&
rp_wcdma_sib11::utran_inter_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_sib11.utran_inter_neighbors)
  return utran_inter_neighbors_;
}

// repeated .rf_phreaker.protobuf.rp_wcdma_gsm_neighbor gsm_inter_neighbors = 4;
int rp_wcdma_sib11::gsm_inter_neighbors_size() const {
  return gsm_inter_neighbors_.size();
}
void rp_wcdma_sib11::clear_gsm_inter_neighbors() {
  gsm_inter_neighbors_.Clear();
}
const ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor& rp_wcdma_sib11::gsm_inter_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib11.gsm_inter_neighbors)
  return gsm_inter_neighbors_.Get(index);
}
::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor* rp_wcdma_sib11::mutable_gsm_inter_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_sib11.gsm_inter_neighbors)
  return gsm_inter_neighbors_.Mutable(index);
}
::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor* rp_wcdma_sib11::add_gsm_inter_neighbors() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_sib11.gsm_inter_neighbors)
  return gsm_inter_neighbors_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor >*
rp_wcdma_sib11::mutable_gsm_inter_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_sib11.gsm_inter_neighbors)
  return &gsm_inter_neighbors_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor >&
rp_wcdma_sib11::gsm_inter_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_sib11.gsm_inter_neighbors)
  return gsm_inter_neighbors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_wcdma_sib11_bis::kUtranIntraNeighborCpichsFieldNumber;
const int rp_wcdma_sib11_bis::kUtranInterNeighborsFieldNumber;
const int rp_wcdma_sib11_bis::kGsmInterNeighborsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_wcdma_sib11_bis::rp_wcdma_sib11_bis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_wcdma_sib11_bis)
}

void rp_wcdma_sib11_bis::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_wcdma_sib11_bis::rp_wcdma_sib11_bis(const rp_wcdma_sib11_bis& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_wcdma_sib11_bis)
}

void rp_wcdma_sib11_bis::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

rp_wcdma_sib11_bis::~rp_wcdma_sib11_bis() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_wcdma_sib11_bis)
  SharedDtor();
}

void rp_wcdma_sib11_bis::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_wcdma_sib11_bis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_wcdma_sib11_bis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_wcdma_sib11_bis_descriptor_;
}

const rp_wcdma_sib11_bis& rp_wcdma_sib11_bis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_wcdma_sib11_bis* rp_wcdma_sib11_bis::default_instance_ = NULL;

rp_wcdma_sib11_bis* rp_wcdma_sib11_bis::New(::google::protobuf::Arena* arena) const {
  rp_wcdma_sib11_bis* n = new rp_wcdma_sib11_bis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_wcdma_sib11_bis::Clear() {
  utran_intra_neighbor_cpichs_.Clear();
  utran_inter_neighbors_.Clear();
  gsm_inter_neighbors_.Clear();
}

bool rp_wcdma_sib11_bis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_wcdma_sib11_bis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 utran_intra_neighbor_cpichs = 2 [packed = true];
      case 2: {
        if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_utran_intra_neighbor_cpichs())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_utran_intra_neighbor_cpichs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_utran_inter_neighbors;
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_wcdma_utran_neighbor utran_inter_neighbors = 3;
      case 3: {
        if (tag == 26) {
         parse_utran_inter_neighbors:
          DO_(input->IncrementRecursionDepth());
         parse_loop_utran_inter_neighbors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_utran_inter_neighbors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_utran_inter_neighbors;
        if (input->ExpectTag(34)) goto parse_loop_gsm_inter_neighbors;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_wcdma_gsm_neighbor gsm_inter_neighbors = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_gsm_inter_neighbors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_gsm_inter_neighbors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_gsm_inter_neighbors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_wcdma_sib11_bis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_wcdma_sib11_bis)
  return false;
#undef DO_
}

void rp_wcdma_sib11_bis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_wcdma_sib11_bis)
  // repeated int32 utran_intra_neighbor_cpichs = 2 [packed = true];
  if (this->utran_intra_neighbor_cpichs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_utran_intra_neighbor_cpichs_cached_byte_size_);
  }
  for (int i = 0; i < this->utran_intra_neighbor_cpichs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->utran_intra_neighbor_cpichs(i), output);
  }

  // repeated .rf_phreaker.protobuf.rp_wcdma_utran_neighbor utran_inter_neighbors = 3;
  for (unsigned int i = 0, n = this->utran_inter_neighbors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->utran_inter_neighbors(i), output);
  }

  // repeated .rf_phreaker.protobuf.rp_wcdma_gsm_neighbor gsm_inter_neighbors = 4;
  for (unsigned int i = 0, n = this->gsm_inter_neighbors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gsm_inter_neighbors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_wcdma_sib11_bis)
}

::google::protobuf::uint8* rp_wcdma_sib11_bis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_wcdma_sib11_bis)
  // repeated int32 utran_intra_neighbor_cpichs = 2 [packed = true];
  if (this->utran_intra_neighbor_cpichs_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _utran_intra_neighbor_cpichs_cached_byte_size_, target);
  }
  for (int i = 0; i < this->utran_intra_neighbor_cpichs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->utran_intra_neighbor_cpichs(i), target);
  }

  // repeated .rf_phreaker.protobuf.rp_wcdma_utran_neighbor utran_inter_neighbors = 3;
  for (unsigned int i = 0, n = this->utran_inter_neighbors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->utran_inter_neighbors(i), target);
  }

  // repeated .rf_phreaker.protobuf.rp_wcdma_gsm_neighbor gsm_inter_neighbors = 4;
  for (unsigned int i = 0, n = this->gsm_inter_neighbors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gsm_inter_neighbors(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_wcdma_sib11_bis)
  return target;
}

int rp_wcdma_sib11_bis::ByteSize() const {
  int total_size = 0;

  // repeated int32 utran_intra_neighbor_cpichs = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->utran_intra_neighbor_cpichs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->utran_intra_neighbor_cpichs(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _utran_intra_neighbor_cpichs_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .rf_phreaker.protobuf.rp_wcdma_utran_neighbor utran_inter_neighbors = 3;
  total_size += 1 * this->utran_inter_neighbors_size();
  for (int i = 0; i < this->utran_inter_neighbors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->utran_inter_neighbors(i));
  }

  // repeated .rf_phreaker.protobuf.rp_wcdma_gsm_neighbor gsm_inter_neighbors = 4;
  total_size += 1 * this->gsm_inter_neighbors_size();
  for (int i = 0; i < this->gsm_inter_neighbors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gsm_inter_neighbors(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_wcdma_sib11_bis::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_wcdma_sib11_bis* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_wcdma_sib11_bis>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_wcdma_sib11_bis::MergeFrom(const rp_wcdma_sib11_bis& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  utran_intra_neighbor_cpichs_.MergeFrom(from.utran_intra_neighbor_cpichs_);
  utran_inter_neighbors_.MergeFrom(from.utran_inter_neighbors_);
  gsm_inter_neighbors_.MergeFrom(from.gsm_inter_neighbors_);
}

void rp_wcdma_sib11_bis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_wcdma_sib11_bis::CopyFrom(const rp_wcdma_sib11_bis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_wcdma_sib11_bis::IsInitialized() const {

  return true;
}

void rp_wcdma_sib11_bis::Swap(rp_wcdma_sib11_bis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_wcdma_sib11_bis::InternalSwap(rp_wcdma_sib11_bis* other) {
  utran_intra_neighbor_cpichs_.UnsafeArenaSwap(&other->utran_intra_neighbor_cpichs_);
  utran_inter_neighbors_.UnsafeArenaSwap(&other->utran_inter_neighbors_);
  gsm_inter_neighbors_.UnsafeArenaSwap(&other->gsm_inter_neighbors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_wcdma_sib11_bis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_wcdma_sib11_bis_descriptor_;
  metadata.reflection = rp_wcdma_sib11_bis_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_wcdma_sib11_bis

// repeated int32 utran_intra_neighbor_cpichs = 2 [packed = true];
int rp_wcdma_sib11_bis::utran_intra_neighbor_cpichs_size() const {
  return utran_intra_neighbor_cpichs_.size();
}
void rp_wcdma_sib11_bis::clear_utran_intra_neighbor_cpichs() {
  utran_intra_neighbor_cpichs_.Clear();
}
 ::google::protobuf::int32 rp_wcdma_sib11_bis::utran_intra_neighbor_cpichs(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_intra_neighbor_cpichs)
  return utran_intra_neighbor_cpichs_.Get(index);
}
 void rp_wcdma_sib11_bis::set_utran_intra_neighbor_cpichs(int index, ::google::protobuf::int32 value) {
  utran_intra_neighbor_cpichs_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_intra_neighbor_cpichs)
}
 void rp_wcdma_sib11_bis::add_utran_intra_neighbor_cpichs(::google::protobuf::int32 value) {
  utran_intra_neighbor_cpichs_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_intra_neighbor_cpichs)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_wcdma_sib11_bis::utran_intra_neighbor_cpichs() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_intra_neighbor_cpichs)
  return utran_intra_neighbor_cpichs_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_wcdma_sib11_bis::mutable_utran_intra_neighbor_cpichs() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_intra_neighbor_cpichs)
  return &utran_intra_neighbor_cpichs_;
}

// repeated .rf_phreaker.protobuf.rp_wcdma_utran_neighbor utran_inter_neighbors = 3;
int rp_wcdma_sib11_bis::utran_inter_neighbors_size() const {
  return utran_inter_neighbors_.size();
}
void rp_wcdma_sib11_bis::clear_utran_inter_neighbors() {
  utran_inter_neighbors_.Clear();
}
const ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor& rp_wcdma_sib11_bis::utran_inter_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_inter_neighbors)
  return utran_inter_neighbors_.Get(index);
}
::rf_phreaker::protobuf::rp_wcdma_utran_neighbor* rp_wcdma_sib11_bis::mutable_utran_inter_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_inter_neighbors)
  return utran_inter_neighbors_.Mutable(index);
}
::rf_phreaker::protobuf::rp_wcdma_utran_neighbor* rp_wcdma_sib11_bis::add_utran_inter_neighbors() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_inter_neighbors)
  return utran_inter_neighbors_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor >*
rp_wcdma_sib11_bis::mutable_utran_inter_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_inter_neighbors)
  return &utran_inter_neighbors_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor >&
rp_wcdma_sib11_bis::utran_inter_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_inter_neighbors)
  return utran_inter_neighbors_;
}

// repeated .rf_phreaker.protobuf.rp_wcdma_gsm_neighbor gsm_inter_neighbors = 4;
int rp_wcdma_sib11_bis::gsm_inter_neighbors_size() const {
  return gsm_inter_neighbors_.size();
}
void rp_wcdma_sib11_bis::clear_gsm_inter_neighbors() {
  gsm_inter_neighbors_.Clear();
}
const ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor& rp_wcdma_sib11_bis::gsm_inter_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib11_bis.gsm_inter_neighbors)
  return gsm_inter_neighbors_.Get(index);
}
::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor* rp_wcdma_sib11_bis::mutable_gsm_inter_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_sib11_bis.gsm_inter_neighbors)
  return gsm_inter_neighbors_.Mutable(index);
}
::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor* rp_wcdma_sib11_bis::add_gsm_inter_neighbors() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_sib11_bis.gsm_inter_neighbors)
  return gsm_inter_neighbors_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor >*
rp_wcdma_sib11_bis::mutable_gsm_inter_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_sib11_bis.gsm_inter_neighbors)
  return &gsm_inter_neighbors_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor >&
rp_wcdma_sib11_bis::gsm_inter_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_sib11_bis.gsm_inter_neighbors)
  return gsm_inter_neighbors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_wcdma_layer_3::kRawLayer3FieldNumber;
const int rp_wcdma_layer_3::kMibFieldNumber;
const int rp_wcdma_layer_3::kSib1FieldNumber;
const int rp_wcdma_layer_3::kSib3FieldNumber;
const int rp_wcdma_layer_3::kSib4FieldNumber;
const int rp_wcdma_layer_3::kSib11FieldNumber;
const int rp_wcdma_layer_3::kSib11BisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_wcdma_layer_3::rp_wcdma_layer_3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_wcdma_layer_3)
}

void rp_wcdma_layer_3::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  mib_ = const_cast< ::rf_phreaker::protobuf::rp_wcdma_mib*>(&::rf_phreaker::protobuf::rp_wcdma_mib::default_instance());
  sib1_ = const_cast< ::rf_phreaker::protobuf::rp_wcdma_sib1*>(&::rf_phreaker::protobuf::rp_wcdma_sib1::default_instance());
  sib3_ = const_cast< ::rf_phreaker::protobuf::rp_wcdma_sib3*>(&::rf_phreaker::protobuf::rp_wcdma_sib3::default_instance());
  sib4_ = const_cast< ::rf_phreaker::protobuf::rp_wcdma_sib4*>(&::rf_phreaker::protobuf::rp_wcdma_sib4::default_instance());
  sib11_ = const_cast< ::rf_phreaker::protobuf::rp_wcdma_sib11*>(&::rf_phreaker::protobuf::rp_wcdma_sib11::default_instance());
  sib11_bis_ = const_cast< ::rf_phreaker::protobuf::rp_wcdma_sib11_bis*>(&::rf_phreaker::protobuf::rp_wcdma_sib11_bis::default_instance());
}

rp_wcdma_layer_3::rp_wcdma_layer_3(const rp_wcdma_layer_3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_wcdma_layer_3)
}

void rp_wcdma_layer_3::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mib_ = NULL;
  sib1_ = NULL;
  sib3_ = NULL;
  sib4_ = NULL;
  sib11_ = NULL;
  sib11_bis_ = NULL;
}

rp_wcdma_layer_3::~rp_wcdma_layer_3() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_wcdma_layer_3)
  SharedDtor();
}

void rp_wcdma_layer_3::SharedDtor() {
  if (this != default_instance_) {
    delete mib_;
    delete sib1_;
    delete sib3_;
    delete sib4_;
    delete sib11_;
    delete sib11_bis_;
  }
}

void rp_wcdma_layer_3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_wcdma_layer_3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_wcdma_layer_3_descriptor_;
}

const rp_wcdma_layer_3& rp_wcdma_layer_3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_wcdma_layer_3* rp_wcdma_layer_3::default_instance_ = NULL;

rp_wcdma_layer_3* rp_wcdma_layer_3::New(::google::protobuf::Arena* arena) const {
  rp_wcdma_layer_3* n = new rp_wcdma_layer_3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_wcdma_layer_3::Clear() {
  if (GetArenaNoVirtual() == NULL && mib_ != NULL) delete mib_;
  mib_ = NULL;
  if (GetArenaNoVirtual() == NULL && sib1_ != NULL) delete sib1_;
  sib1_ = NULL;
  if (GetArenaNoVirtual() == NULL && sib3_ != NULL) delete sib3_;
  sib3_ = NULL;
  if (GetArenaNoVirtual() == NULL && sib4_ != NULL) delete sib4_;
  sib4_ = NULL;
  if (GetArenaNoVirtual() == NULL && sib11_ != NULL) delete sib11_;
  sib11_ = NULL;
  if (GetArenaNoVirtual() == NULL && sib11_bis_ != NULL) delete sib11_bis_;
  sib11_bis_ = NULL;
  raw_layer_3_.Clear();
}

bool rp_wcdma_layer_3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_wcdma_layer_3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_raw_layer_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_raw_layer_3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_raw_layer_3;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_mib;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_wcdma_mib mib = 2;
      case 2: {
        if (tag == 18) {
         parse_mib:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mib()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sib1;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_wcdma_sib1 sib1 = 3;
      case 3: {
        if (tag == 26) {
         parse_sib1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sib1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sib3;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_wcdma_sib3 sib3 = 4;
      case 4: {
        if (tag == 34) {
         parse_sib3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sib3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sib4;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_wcdma_sib4 sib4 = 5;
      case 5: {
        if (tag == 42) {
         parse_sib4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sib4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sib11;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_wcdma_sib11 sib11 = 6;
      case 6: {
        if (tag == 50) {
         parse_sib11:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sib11()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sib11_bis;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_wcdma_sib11_bis sib11_bis = 7;
      case 7: {
        if (tag == 58) {
         parse_sib11_bis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sib11_bis()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_wcdma_layer_3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_wcdma_layer_3)
  return false;
#undef DO_
}

void rp_wcdma_layer_3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_wcdma_layer_3)
  // repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
  for (unsigned int i = 0, n = this->raw_layer_3_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->raw_layer_3(i), output);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_mib mib = 2;
  if (this->has_mib()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mib_, output);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_sib1 sib1 = 3;
  if (this->has_sib1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->sib1_, output);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_sib3 sib3 = 4;
  if (this->has_sib3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->sib3_, output);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_sib4 sib4 = 5;
  if (this->has_sib4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->sib4_, output);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_sib11 sib11 = 6;
  if (this->has_sib11()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->sib11_, output);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_sib11_bis sib11_bis = 7;
  if (this->has_sib11_bis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->sib11_bis_, output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_wcdma_layer_3)
}

::google::protobuf::uint8* rp_wcdma_layer_3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_wcdma_layer_3)
  // repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
  for (unsigned int i = 0, n = this->raw_layer_3_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->raw_layer_3(i), target);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_mib mib = 2;
  if (this->has_mib()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->mib_, target);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_sib1 sib1 = 3;
  if (this->has_sib1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->sib1_, target);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_sib3 sib3 = 4;
  if (this->has_sib3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->sib3_, target);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_sib4 sib4 = 5;
  if (this->has_sib4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->sib4_, target);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_sib11 sib11 = 6;
  if (this->has_sib11()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->sib11_, target);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_sib11_bis sib11_bis = 7;
  if (this->has_sib11_bis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->sib11_bis_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_wcdma_layer_3)
  return target;
}

int rp_wcdma_layer_3::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_wcdma_mib mib = 2;
  if (this->has_mib()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mib_);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_sib1 sib1 = 3;
  if (this->has_sib1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sib1_);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_sib3 sib3 = 4;
  if (this->has_sib3()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sib3_);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_sib4 sib4 = 5;
  if (this->has_sib4()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sib4_);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_sib11 sib11 = 6;
  if (this->has_sib11()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sib11_);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_sib11_bis sib11_bis = 7;
  if (this->has_sib11_bis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sib11_bis_);
  }

  // repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
  total_size += 1 * this->raw_layer_3_size();
  for (int i = 0; i < this->raw_layer_3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raw_layer_3(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_wcdma_layer_3::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_wcdma_layer_3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_wcdma_layer_3>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_wcdma_layer_3::MergeFrom(const rp_wcdma_layer_3& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  raw_layer_3_.MergeFrom(from.raw_layer_3_);
  if (from.has_mib()) {
    mutable_mib()->::rf_phreaker::protobuf::rp_wcdma_mib::MergeFrom(from.mib());
  }
  if (from.has_sib1()) {
    mutable_sib1()->::rf_phreaker::protobuf::rp_wcdma_sib1::MergeFrom(from.sib1());
  }
  if (from.has_sib3()) {
    mutable_sib3()->::rf_phreaker::protobuf::rp_wcdma_sib3::MergeFrom(from.sib3());
  }
  if (from.has_sib4()) {
    mutable_sib4()->::rf_phreaker::protobuf::rp_wcdma_sib4::MergeFrom(from.sib4());
  }
  if (from.has_sib11()) {
    mutable_sib11()->::rf_phreaker::protobuf::rp_wcdma_sib11::MergeFrom(from.sib11());
  }
  if (from.has_sib11_bis()) {
    mutable_sib11_bis()->::rf_phreaker::protobuf::rp_wcdma_sib11_bis::MergeFrom(from.sib11_bis());
  }
}

void rp_wcdma_layer_3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_wcdma_layer_3::CopyFrom(const rp_wcdma_layer_3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_wcdma_layer_3::IsInitialized() const {

  return true;
}

void rp_wcdma_layer_3::Swap(rp_wcdma_layer_3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_wcdma_layer_3::InternalSwap(rp_wcdma_layer_3* other) {
  raw_layer_3_.UnsafeArenaSwap(&other->raw_layer_3_);
  std::swap(mib_, other->mib_);
  std::swap(sib1_, other->sib1_);
  std::swap(sib3_, other->sib3_);
  std::swap(sib4_, other->sib4_);
  std::swap(sib11_, other->sib11_);
  std::swap(sib11_bis_, other->sib11_bis_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_wcdma_layer_3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_wcdma_layer_3_descriptor_;
  metadata.reflection = rp_wcdma_layer_3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_wcdma_layer_3

// repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
int rp_wcdma_layer_3::raw_layer_3_size() const {
  return raw_layer_3_.size();
}
void rp_wcdma_layer_3::clear_raw_layer_3() {
  raw_layer_3_.Clear();
}
const ::rf_phreaker::protobuf::rp_raw_layer_3& rp_wcdma_layer_3::raw_layer_3(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_layer_3.raw_layer_3)
  return raw_layer_3_.Get(index);
}
::rf_phreaker::protobuf::rp_raw_layer_3* rp_wcdma_layer_3::mutable_raw_layer_3(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_layer_3.raw_layer_3)
  return raw_layer_3_.Mutable(index);
}
::rf_phreaker::protobuf::rp_raw_layer_3* rp_wcdma_layer_3::add_raw_layer_3() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_layer_3.raw_layer_3)
  return raw_layer_3_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >*
rp_wcdma_layer_3::mutable_raw_layer_3() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_layer_3.raw_layer_3)
  return &raw_layer_3_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >&
rp_wcdma_layer_3::raw_layer_3() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_layer_3.raw_layer_3)
  return raw_layer_3_;
}

// optional .rf_phreaker.protobuf.rp_wcdma_mib mib = 2;
bool rp_wcdma_layer_3::has_mib() const {
  return !_is_default_instance_ && mib_ != NULL;
}
void rp_wcdma_layer_3::clear_mib() {
  if (GetArenaNoVirtual() == NULL && mib_ != NULL) delete mib_;
  mib_ = NULL;
}
const ::rf_phreaker::protobuf::rp_wcdma_mib& rp_wcdma_layer_3::mib() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_layer_3.mib)
  return mib_ != NULL ? *mib_ : *default_instance_->mib_;
}
::rf_phreaker::protobuf::rp_wcdma_mib* rp_wcdma_layer_3::mutable_mib() {
  
  if (mib_ == NULL) {
    mib_ = new ::rf_phreaker::protobuf::rp_wcdma_mib;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_layer_3.mib)
  return mib_;
}
::rf_phreaker::protobuf::rp_wcdma_mib* rp_wcdma_layer_3::release_mib() {
  
  ::rf_phreaker::protobuf::rp_wcdma_mib* temp = mib_;
  mib_ = NULL;
  return temp;
}
void rp_wcdma_layer_3::set_allocated_mib(::rf_phreaker::protobuf::rp_wcdma_mib* mib) {
  delete mib_;
  mib_ = mib;
  if (mib) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma_layer_3.mib)
}

// optional .rf_phreaker.protobuf.rp_wcdma_sib1 sib1 = 3;
bool rp_wcdma_layer_3::has_sib1() const {
  return !_is_default_instance_ && sib1_ != NULL;
}
void rp_wcdma_layer_3::clear_sib1() {
  if (GetArenaNoVirtual() == NULL && sib1_ != NULL) delete sib1_;
  sib1_ = NULL;
}
const ::rf_phreaker::protobuf::rp_wcdma_sib1& rp_wcdma_layer_3::sib1() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_layer_3.sib1)
  return sib1_ != NULL ? *sib1_ : *default_instance_->sib1_;
}
::rf_phreaker::protobuf::rp_wcdma_sib1* rp_wcdma_layer_3::mutable_sib1() {
  
  if (sib1_ == NULL) {
    sib1_ = new ::rf_phreaker::protobuf::rp_wcdma_sib1;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_layer_3.sib1)
  return sib1_;
}
::rf_phreaker::protobuf::rp_wcdma_sib1* rp_wcdma_layer_3::release_sib1() {
  
  ::rf_phreaker::protobuf::rp_wcdma_sib1* temp = sib1_;
  sib1_ = NULL;
  return temp;
}
void rp_wcdma_layer_3::set_allocated_sib1(::rf_phreaker::protobuf::rp_wcdma_sib1* sib1) {
  delete sib1_;
  sib1_ = sib1;
  if (sib1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma_layer_3.sib1)
}

// optional .rf_phreaker.protobuf.rp_wcdma_sib3 sib3 = 4;
bool rp_wcdma_layer_3::has_sib3() const {
  return !_is_default_instance_ && sib3_ != NULL;
}
void rp_wcdma_layer_3::clear_sib3() {
  if (GetArenaNoVirtual() == NULL && sib3_ != NULL) delete sib3_;
  sib3_ = NULL;
}
const ::rf_phreaker::protobuf::rp_wcdma_sib3& rp_wcdma_layer_3::sib3() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_layer_3.sib3)
  return sib3_ != NULL ? *sib3_ : *default_instance_->sib3_;
}
::rf_phreaker::protobuf::rp_wcdma_sib3* rp_wcdma_layer_3::mutable_sib3() {
  
  if (sib3_ == NULL) {
    sib3_ = new ::rf_phreaker::protobuf::rp_wcdma_sib3;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_layer_3.sib3)
  return sib3_;
}
::rf_phreaker::protobuf::rp_wcdma_sib3* rp_wcdma_layer_3::release_sib3() {
  
  ::rf_phreaker::protobuf::rp_wcdma_sib3* temp = sib3_;
  sib3_ = NULL;
  return temp;
}
void rp_wcdma_layer_3::set_allocated_sib3(::rf_phreaker::protobuf::rp_wcdma_sib3* sib3) {
  delete sib3_;
  sib3_ = sib3;
  if (sib3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma_layer_3.sib3)
}

// optional .rf_phreaker.protobuf.rp_wcdma_sib4 sib4 = 5;
bool rp_wcdma_layer_3::has_sib4() const {
  return !_is_default_instance_ && sib4_ != NULL;
}
void rp_wcdma_layer_3::clear_sib4() {
  if (GetArenaNoVirtual() == NULL && sib4_ != NULL) delete sib4_;
  sib4_ = NULL;
}
const ::rf_phreaker::protobuf::rp_wcdma_sib4& rp_wcdma_layer_3::sib4() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_layer_3.sib4)
  return sib4_ != NULL ? *sib4_ : *default_instance_->sib4_;
}
::rf_phreaker::protobuf::rp_wcdma_sib4* rp_wcdma_layer_3::mutable_sib4() {
  
  if (sib4_ == NULL) {
    sib4_ = new ::rf_phreaker::protobuf::rp_wcdma_sib4;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_layer_3.sib4)
  return sib4_;
}
::rf_phreaker::protobuf::rp_wcdma_sib4* rp_wcdma_layer_3::release_sib4() {
  
  ::rf_phreaker::protobuf::rp_wcdma_sib4* temp = sib4_;
  sib4_ = NULL;
  return temp;
}
void rp_wcdma_layer_3::set_allocated_sib4(::rf_phreaker::protobuf::rp_wcdma_sib4* sib4) {
  delete sib4_;
  sib4_ = sib4;
  if (sib4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma_layer_3.sib4)
}

// optional .rf_phreaker.protobuf.rp_wcdma_sib11 sib11 = 6;
bool rp_wcdma_layer_3::has_sib11() const {
  return !_is_default_instance_ && sib11_ != NULL;
}
void rp_wcdma_layer_3::clear_sib11() {
  if (GetArenaNoVirtual() == NULL && sib11_ != NULL) delete sib11_;
  sib11_ = NULL;
}
const ::rf_phreaker::protobuf::rp_wcdma_sib11& rp_wcdma_layer_3::sib11() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_layer_3.sib11)
  return sib11_ != NULL ? *sib11_ : *default_instance_->sib11_;
}
::rf_phreaker::protobuf::rp_wcdma_sib11* rp_wcdma_layer_3::mutable_sib11() {
  
  if (sib11_ == NULL) {
    sib11_ = new ::rf_phreaker::protobuf::rp_wcdma_sib11;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_layer_3.sib11)
  return sib11_;
}
::rf_phreaker::protobuf::rp_wcdma_sib11* rp_wcdma_layer_3::release_sib11() {
  
  ::rf_phreaker::protobuf::rp_wcdma_sib11* temp = sib11_;
  sib11_ = NULL;
  return temp;
}
void rp_wcdma_layer_3::set_allocated_sib11(::rf_phreaker::protobuf::rp_wcdma_sib11* sib11) {
  delete sib11_;
  sib11_ = sib11;
  if (sib11) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma_layer_3.sib11)
}

// optional .rf_phreaker.protobuf.rp_wcdma_sib11_bis sib11_bis = 7;
bool rp_wcdma_layer_3::has_sib11_bis() const {
  return !_is_default_instance_ && sib11_bis_ != NULL;
}
void rp_wcdma_layer_3::clear_sib11_bis() {
  if (GetArenaNoVirtual() == NULL && sib11_bis_ != NULL) delete sib11_bis_;
  sib11_bis_ = NULL;
}
const ::rf_phreaker::protobuf::rp_wcdma_sib11_bis& rp_wcdma_layer_3::sib11_bis() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_layer_3.sib11_bis)
  return sib11_bis_ != NULL ? *sib11_bis_ : *default_instance_->sib11_bis_;
}
::rf_phreaker::protobuf::rp_wcdma_sib11_bis* rp_wcdma_layer_3::mutable_sib11_bis() {
  
  if (sib11_bis_ == NULL) {
    sib11_bis_ = new ::rf_phreaker::protobuf::rp_wcdma_sib11_bis;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_layer_3.sib11_bis)
  return sib11_bis_;
}
::rf_phreaker::protobuf::rp_wcdma_sib11_bis* rp_wcdma_layer_3::release_sib11_bis() {
  
  ::rf_phreaker::protobuf::rp_wcdma_sib11_bis* temp = sib11_bis_;
  sib11_bis_ = NULL;
  return temp;
}
void rp_wcdma_layer_3::set_allocated_sib11_bis(::rf_phreaker::protobuf::rp_wcdma_sib11_bis* sib11_bis) {
  delete sib11_bis_;
  sib11_bis_ = sib11_bis;
  if (sib11_bis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma_layer_3.sib11_bis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_wcdma::kBaseFieldNumber;
const int rp_wcdma::kUarfcnFieldNumber;
const int rp_wcdma::kOperatingBandFieldNumber;
const int rp_wcdma::kCpichFieldNumber;
const int rp_wcdma::kEcioFieldNumber;
const int rp_wcdma::kRscpFieldNumber;
const int rp_wcdma::kLayer3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_wcdma::rp_wcdma()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_wcdma)
}

void rp_wcdma::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::rf_phreaker::protobuf::rp_base*>(&::rf_phreaker::protobuf::rp_base::default_instance());
  layer_3_ = const_cast< ::rf_phreaker::protobuf::rp_wcdma_layer_3*>(&::rf_phreaker::protobuf::rp_wcdma_layer_3::default_instance());
}

rp_wcdma::rp_wcdma(const rp_wcdma& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_wcdma)
}

void rp_wcdma::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_ = NULL;
  uarfcn_ = 0;
  operating_band_ = 0;
  cpich_ = 0;
  ecio_ = 0;
  rscp_ = 0;
  layer_3_ = NULL;
}

rp_wcdma::~rp_wcdma() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_wcdma)
  SharedDtor();
}

void rp_wcdma::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete layer_3_;
  }
}

void rp_wcdma::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_wcdma::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_wcdma_descriptor_;
}

const rp_wcdma& rp_wcdma::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_wcdma* rp_wcdma::default_instance_ = NULL;

rp_wcdma* rp_wcdma::New(::google::protobuf::Arena* arena) const {
  rp_wcdma* n = new rp_wcdma;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_wcdma::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_wcdma*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uarfcn_, rscp_);
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  cpich_ = 0;
  if (GetArenaNoVirtual() == NULL && layer_3_ != NULL) delete layer_3_;
  layer_3_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool rp_wcdma::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_wcdma)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_base base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uarfcn;
        break;
      }

      // optional int32 uarfcn = 2;
      case 2: {
        if (tag == 16) {
         parse_uarfcn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uarfcn_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operating_band;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
      case 3: {
        if (tag == 24) {
         parse_operating_band:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operating_band(static_cast< ::rf_phreaker::protobuf::rp_operating_band >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cpich;
        break;
      }

      // optional int32 cpich = 4;
      case 4: {
        if (tag == 32) {
         parse_cpich:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpich_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_ecio;
        break;
      }

      // optional double ecio = 5;
      case 5: {
        if (tag == 41) {
         parse_ecio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ecio_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_rscp;
        break;
      }

      // optional double rscp = 6;
      case 6: {
        if (tag == 49) {
         parse_rscp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rscp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_layer_3;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_wcdma_layer_3 layer_3 = 7;
      case 7: {
        if (tag == 58) {
         parse_layer_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer_3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_wcdma)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_wcdma)
  return false;
#undef DO_
}

void rp_wcdma::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_wcdma)
  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // optional int32 uarfcn = 2;
  if (this->uarfcn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uarfcn(), output);
  }

  // optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
  if (this->operating_band() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operating_band(), output);
  }

  // optional int32 cpich = 4;
  if (this->cpich() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cpich(), output);
  }

  // optional double ecio = 5;
  if (this->ecio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ecio(), output);
  }

  // optional double rscp = 6;
  if (this->rscp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rscp(), output);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_layer_3 layer_3 = 7;
  if (this->has_layer_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->layer_3_, output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_wcdma)
}

::google::protobuf::uint8* rp_wcdma::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_wcdma)
  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->base_, target);
  }

  // optional int32 uarfcn = 2;
  if (this->uarfcn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uarfcn(), target);
  }

  // optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
  if (this->operating_band() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operating_band(), target);
  }

  // optional int32 cpich = 4;
  if (this->cpich() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cpich(), target);
  }

  // optional double ecio = 5;
  if (this->ecio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ecio(), target);
  }

  // optional double rscp = 6;
  if (this->rscp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->rscp(), target);
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_layer_3 layer_3 = 7;
  if (this->has_layer_3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->layer_3_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_wcdma)
  return target;
}

int rp_wcdma::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional int32 uarfcn = 2;
  if (this->uarfcn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uarfcn());
  }

  // optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
  if (this->operating_band() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operating_band());
  }

  // optional int32 cpich = 4;
  if (this->cpich() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cpich());
  }

  // optional double ecio = 5;
  if (this->ecio() != 0) {
    total_size += 1 + 8;
  }

  // optional double rscp = 6;
  if (this->rscp() != 0) {
    total_size += 1 + 8;
  }

  // optional .rf_phreaker.protobuf.rp_wcdma_layer_3 layer_3 = 7;
  if (this->has_layer_3()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->layer_3_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_wcdma::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_wcdma* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_wcdma>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_wcdma::MergeFrom(const rp_wcdma& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_base()) {
    mutable_base()->::rf_phreaker::protobuf::rp_base::MergeFrom(from.base());
  }
  if (from.uarfcn() != 0) {
    set_uarfcn(from.uarfcn());
  }
  if (from.operating_band() != 0) {
    set_operating_band(from.operating_band());
  }
  if (from.cpich() != 0) {
    set_cpich(from.cpich());
  }
  if (from.ecio() != 0) {
    set_ecio(from.ecio());
  }
  if (from.rscp() != 0) {
    set_rscp(from.rscp());
  }
  if (from.has_layer_3()) {
    mutable_layer_3()->::rf_phreaker::protobuf::rp_wcdma_layer_3::MergeFrom(from.layer_3());
  }
}

void rp_wcdma::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_wcdma::CopyFrom(const rp_wcdma& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_wcdma::IsInitialized() const {

  return true;
}

void rp_wcdma::Swap(rp_wcdma* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_wcdma::InternalSwap(rp_wcdma* other) {
  std::swap(base_, other->base_);
  std::swap(uarfcn_, other->uarfcn_);
  std::swap(operating_band_, other->operating_band_);
  std::swap(cpich_, other->cpich_);
  std::swap(ecio_, other->ecio_);
  std::swap(rscp_, other->rscp_);
  std::swap(layer_3_, other->layer_3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_wcdma::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_wcdma_descriptor_;
  metadata.reflection = rp_wcdma_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_wcdma

// optional .rf_phreaker.protobuf.rp_base base = 1;
bool rp_wcdma::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void rp_wcdma::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::rf_phreaker::protobuf::rp_base& rp_wcdma::base() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::rf_phreaker::protobuf::rp_base* rp_wcdma::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::rf_phreaker::protobuf::rp_base;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma.base)
  return base_;
}
::rf_phreaker::protobuf::rp_base* rp_wcdma::release_base() {
  
  ::rf_phreaker::protobuf::rp_base* temp = base_;
  base_ = NULL;
  return temp;
}
void rp_wcdma::set_allocated_base(::rf_phreaker::protobuf::rp_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma.base)
}

// optional int32 uarfcn = 2;
void rp_wcdma::clear_uarfcn() {
  uarfcn_ = 0;
}
 ::google::protobuf::int32 rp_wcdma::uarfcn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma.uarfcn)
  return uarfcn_;
}
 void rp_wcdma::set_uarfcn(::google::protobuf::int32 value) {
  
  uarfcn_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma.uarfcn)
}

// optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
void rp_wcdma::clear_operating_band() {
  operating_band_ = 0;
}
 ::rf_phreaker::protobuf::rp_operating_band rp_wcdma::operating_band() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma.operating_band)
  return static_cast< ::rf_phreaker::protobuf::rp_operating_band >(operating_band_);
}
 void rp_wcdma::set_operating_band(::rf_phreaker::protobuf::rp_operating_band value) {
  
  operating_band_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma.operating_band)
}

// optional int32 cpich = 4;
void rp_wcdma::clear_cpich() {
  cpich_ = 0;
}
 ::google::protobuf::int32 rp_wcdma::cpich() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma.cpich)
  return cpich_;
}
 void rp_wcdma::set_cpich(::google::protobuf::int32 value) {
  
  cpich_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma.cpich)
}

// optional double ecio = 5;
void rp_wcdma::clear_ecio() {
  ecio_ = 0;
}
 double rp_wcdma::ecio() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma.ecio)
  return ecio_;
}
 void rp_wcdma::set_ecio(double value) {
  
  ecio_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma.ecio)
}

// optional double rscp = 6;
void rp_wcdma::clear_rscp() {
  rscp_ = 0;
}
 double rp_wcdma::rscp() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma.rscp)
  return rscp_;
}
 void rp_wcdma::set_rscp(double value) {
  
  rscp_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma.rscp)
}

// optional .rf_phreaker.protobuf.rp_wcdma_layer_3 layer_3 = 7;
bool rp_wcdma::has_layer_3() const {
  return !_is_default_instance_ && layer_3_ != NULL;
}
void rp_wcdma::clear_layer_3() {
  if (GetArenaNoVirtual() == NULL && layer_3_ != NULL) delete layer_3_;
  layer_3_ = NULL;
}
const ::rf_phreaker::protobuf::rp_wcdma_layer_3& rp_wcdma::layer_3() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma.layer_3)
  return layer_3_ != NULL ? *layer_3_ : *default_instance_->layer_3_;
}
::rf_phreaker::protobuf::rp_wcdma_layer_3* rp_wcdma::mutable_layer_3() {
  
  if (layer_3_ == NULL) {
    layer_3_ = new ::rf_phreaker::protobuf::rp_wcdma_layer_3;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma.layer_3)
  return layer_3_;
}
::rf_phreaker::protobuf::rp_wcdma_layer_3* rp_wcdma::release_layer_3() {
  
  ::rf_phreaker::protobuf::rp_wcdma_layer_3* temp = layer_3_;
  layer_3_ = NULL;
  return temp;
}
void rp_wcdma::set_allocated_layer_3(::rf_phreaker::protobuf::rp_wcdma_layer_3* layer_3) {
  delete layer_3_;
  layer_3_ = layer_3;
  if (layer_3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma.layer_3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_wcdma_update::kBaseFieldNumber;
const int rp_wcdma_update::kWcdmaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_wcdma_update::rp_wcdma_update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_wcdma_update)
}

void rp_wcdma_update::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::rf_phreaker::protobuf::rp_base*>(&::rf_phreaker::protobuf::rp_base::default_instance());
}

rp_wcdma_update::rp_wcdma_update(const rp_wcdma_update& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_wcdma_update)
}

void rp_wcdma_update::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_ = NULL;
}

rp_wcdma_update::~rp_wcdma_update() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_wcdma_update)
  SharedDtor();
}

void rp_wcdma_update::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void rp_wcdma_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_wcdma_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_wcdma_update_descriptor_;
}

const rp_wcdma_update& rp_wcdma_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_wcdma_update* rp_wcdma_update::default_instance_ = NULL;

rp_wcdma_update* rp_wcdma_update::New(::google::protobuf::Arena* arena) const {
  rp_wcdma_update* n = new rp_wcdma_update;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_wcdma_update::Clear() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  wcdma_.Clear();
}

bool rp_wcdma_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_wcdma_update)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_base base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wcdma;
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_wcdma wcdma = 2;
      case 2: {
        if (tag == 18) {
         parse_wcdma:
          DO_(input->IncrementRecursionDepth());
         parse_loop_wcdma:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_wcdma()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_wcdma;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_wcdma_update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_wcdma_update)
  return false;
#undef DO_
}

void rp_wcdma_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_wcdma_update)
  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // repeated .rf_phreaker.protobuf.rp_wcdma wcdma = 2;
  for (unsigned int i = 0, n = this->wcdma_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wcdma(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_wcdma_update)
}

::google::protobuf::uint8* rp_wcdma_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_wcdma_update)
  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->base_, target);
  }

  // repeated .rf_phreaker.protobuf.rp_wcdma wcdma = 2;
  for (unsigned int i = 0, n = this->wcdma_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wcdma(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_wcdma_update)
  return target;
}

int rp_wcdma_update::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // repeated .rf_phreaker.protobuf.rp_wcdma wcdma = 2;
  total_size += 1 * this->wcdma_size();
  for (int i = 0; i < this->wcdma_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wcdma(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_wcdma_update::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_wcdma_update* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_wcdma_update>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_wcdma_update::MergeFrom(const rp_wcdma_update& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  wcdma_.MergeFrom(from.wcdma_);
  if (from.has_base()) {
    mutable_base()->::rf_phreaker::protobuf::rp_base::MergeFrom(from.base());
  }
}

void rp_wcdma_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_wcdma_update::CopyFrom(const rp_wcdma_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_wcdma_update::IsInitialized() const {

  return true;
}

void rp_wcdma_update::Swap(rp_wcdma_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_wcdma_update::InternalSwap(rp_wcdma_update* other) {
  std::swap(base_, other->base_);
  wcdma_.UnsafeArenaSwap(&other->wcdma_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_wcdma_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_wcdma_update_descriptor_;
  metadata.reflection = rp_wcdma_update_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_wcdma_update

// optional .rf_phreaker.protobuf.rp_base base = 1;
bool rp_wcdma_update::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void rp_wcdma_update::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::rf_phreaker::protobuf::rp_base& rp_wcdma_update::base() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_update.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::rf_phreaker::protobuf::rp_base* rp_wcdma_update::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::rf_phreaker::protobuf::rp_base;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_update.base)
  return base_;
}
::rf_phreaker::protobuf::rp_base* rp_wcdma_update::release_base() {
  
  ::rf_phreaker::protobuf::rp_base* temp = base_;
  base_ = NULL;
  return temp;
}
void rp_wcdma_update::set_allocated_base(::rf_phreaker::protobuf::rp_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma_update.base)
}

// repeated .rf_phreaker.protobuf.rp_wcdma wcdma = 2;
int rp_wcdma_update::wcdma_size() const {
  return wcdma_.size();
}
void rp_wcdma_update::clear_wcdma() {
  wcdma_.Clear();
}
const ::rf_phreaker::protobuf::rp_wcdma& rp_wcdma_update::wcdma(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_update.wcdma)
  return wcdma_.Get(index);
}
::rf_phreaker::protobuf::rp_wcdma* rp_wcdma_update::mutable_wcdma(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_update.wcdma)
  return wcdma_.Mutable(index);
}
::rf_phreaker::protobuf::rp_wcdma* rp_wcdma_update::add_wcdma() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_update.wcdma)
  return wcdma_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma >*
rp_wcdma_update::mutable_wcdma() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_update.wcdma)
  return &wcdma_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma >&
rp_wcdma_update::wcdma() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_update.wcdma)
  return wcdma_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_scheduling_info::kPeriodicityInFramesFieldNumber;
const int rp_lte_scheduling_info::kSibsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_scheduling_info::rp_lte_scheduling_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_scheduling_info)
}

void rp_lte_scheduling_info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_lte_scheduling_info::rp_lte_scheduling_info(const rp_lte_scheduling_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_scheduling_info)
}

void rp_lte_scheduling_info::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  periodicity_in_frames_ = 0;
}

rp_lte_scheduling_info::~rp_lte_scheduling_info() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_scheduling_info)
  SharedDtor();
}

void rp_lte_scheduling_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_lte_scheduling_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_scheduling_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_scheduling_info_descriptor_;
}

const rp_lte_scheduling_info& rp_lte_scheduling_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_scheduling_info* rp_lte_scheduling_info::default_instance_ = NULL;

rp_lte_scheduling_info* rp_lte_scheduling_info::New(::google::protobuf::Arena* arena) const {
  rp_lte_scheduling_info* n = new rp_lte_scheduling_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_scheduling_info::Clear() {
  periodicity_in_frames_ = 0;
  sibs_.Clear();
}

bool rp_lte_scheduling_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_scheduling_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 periodicity_in_frames = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &periodicity_in_frames_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sibs;
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_lte_sib_type sibs = 3;
      case 3: {
        if (tag == 26) {
         parse_sibs:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_sibs(static_cast< ::rf_phreaker::protobuf::rp_lte_sib_type >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 24) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_sibs(static_cast< ::rf_phreaker::protobuf::rp_lte_sib_type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_scheduling_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_scheduling_info)
  return false;
#undef DO_
}

void rp_lte_scheduling_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_scheduling_info)
  // optional int32 periodicity_in_frames = 1;
  if (this->periodicity_in_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->periodicity_in_frames(), output);
  }

  // repeated .rf_phreaker.protobuf.rp_lte_sib_type sibs = 3;
  if (this->sibs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_sibs_cached_byte_size_);
  }
  for (int i = 0; i < this->sibs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->sibs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_scheduling_info)
}

::google::protobuf::uint8* rp_lte_scheduling_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_scheduling_info)
  // optional int32 periodicity_in_frames = 1;
  if (this->periodicity_in_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->periodicity_in_frames(), target);
  }

  // repeated .rf_phreaker.protobuf.rp_lte_sib_type sibs = 3;
  if (this->sibs_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _sibs_cached_byte_size_, target);
  }
  for (int i = 0; i < this->sibs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->sibs(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_scheduling_info)
  return target;
}

int rp_lte_scheduling_info::ByteSize() const {
  int total_size = 0;

  // optional int32 periodicity_in_frames = 1;
  if (this->periodicity_in_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->periodicity_in_frames());
  }

  // repeated .rf_phreaker.protobuf.rp_lte_sib_type sibs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->sibs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->sibs(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sibs_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_scheduling_info::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_scheduling_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_scheduling_info>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_scheduling_info::MergeFrom(const rp_lte_scheduling_info& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  sibs_.MergeFrom(from.sibs_);
  if (from.periodicity_in_frames() != 0) {
    set_periodicity_in_frames(from.periodicity_in_frames());
  }
}

void rp_lte_scheduling_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_scheduling_info::CopyFrom(const rp_lte_scheduling_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_scheduling_info::IsInitialized() const {

  return true;
}

void rp_lte_scheduling_info::Swap(rp_lte_scheduling_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_scheduling_info::InternalSwap(rp_lte_scheduling_info* other) {
  std::swap(periodicity_in_frames_, other->periodicity_in_frames_);
  sibs_.UnsafeArenaSwap(&other->sibs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_scheduling_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_scheduling_info_descriptor_;
  metadata.reflection = rp_lte_scheduling_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_scheduling_info

// optional int32 periodicity_in_frames = 1;
void rp_lte_scheduling_info::clear_periodicity_in_frames() {
  periodicity_in_frames_ = 0;
}
 ::google::protobuf::int32 rp_lte_scheduling_info::periodicity_in_frames() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_scheduling_info.periodicity_in_frames)
  return periodicity_in_frames_;
}
 void rp_lte_scheduling_info::set_periodicity_in_frames(::google::protobuf::int32 value) {
  
  periodicity_in_frames_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_scheduling_info.periodicity_in_frames)
}

// repeated .rf_phreaker.protobuf.rp_lte_sib_type sibs = 3;
int rp_lte_scheduling_info::sibs_size() const {
  return sibs_.size();
}
void rp_lte_scheduling_info::clear_sibs() {
  sibs_.Clear();
}
 ::rf_phreaker::protobuf::rp_lte_sib_type rp_lte_scheduling_info::sibs(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_scheduling_info.sibs)
  return static_cast< ::rf_phreaker::protobuf::rp_lte_sib_type >(sibs_.Get(index));
}
 void rp_lte_scheduling_info::set_sibs(int index, ::rf_phreaker::protobuf::rp_lte_sib_type value) {
  sibs_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_scheduling_info.sibs)
}
 void rp_lte_scheduling_info::add_sibs(::rf_phreaker::protobuf::rp_lte_sib_type value) {
  sibs_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_scheduling_info.sibs)
}
 const ::google::protobuf::RepeatedField<int>&
rp_lte_scheduling_info::sibs() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_scheduling_info.sibs)
  return sibs_;
}
 ::google::protobuf::RepeatedField<int>*
rp_lte_scheduling_info::mutable_sibs() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_scheduling_info.sibs)
  return &sibs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_sib1::kMultiplePlmnsFieldNumber;
const int rp_lte_sib1::kTacFieldNumber;
const int rp_lte_sib1::kCidFieldNumber;
const int rp_lte_sib1::kSchedulingInfoFieldNumber;
const int rp_lte_sib1::kSiWindowLengthMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_sib1::rp_lte_sib1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_sib1)
}

void rp_lte_sib1::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_lte_sib1::rp_lte_sib1(const rp_lte_sib1& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_sib1)
}

void rp_lte_sib1::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  tac_ = 0;
  cid_ = 0;
  si_window_length_ms_ = 0;
}

rp_lte_sib1::~rp_lte_sib1() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_sib1)
  SharedDtor();
}

void rp_lte_sib1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_lte_sib1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_sib1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_sib1_descriptor_;
}

const rp_lte_sib1& rp_lte_sib1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_sib1* rp_lte_sib1::default_instance_ = NULL;

rp_lte_sib1* rp_lte_sib1::New(::google::protobuf::Arena* arena) const {
  rp_lte_sib1* n = new rp_lte_sib1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_sib1::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_lte_sib1*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(tac_, cid_);
  si_window_length_ms_ = 0;

#undef ZR_HELPER_
#undef ZR_

  multiple_plmns_.Clear();
  scheduling_info_.Clear();
}

bool rp_lte_sib1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_sib1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rf_phreaker.protobuf.rp_plmn multiple_plmns = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_multiple_plmns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_multiple_plmns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_multiple_plmns;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_tac;
        break;
      }

      // optional int32 tac = 3;
      case 3: {
        if (tag == 24) {
         parse_tac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tac_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cid;
        break;
      }

      // optional int32 cid = 4;
      case 4: {
        if (tag == 32) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_scheduling_info;
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_lte_scheduling_info scheduling_info = 5;
      case 5: {
        if (tag == 42) {
         parse_scheduling_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_scheduling_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_scheduling_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_scheduling_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_si_window_length_ms;
        break;
      }

      // optional int32 si_window_length_ms = 6;
      case 6: {
        if (tag == 48) {
         parse_si_window_length_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &si_window_length_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_sib1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_sib1)
  return false;
#undef DO_
}

void rp_lte_sib1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_sib1)
  // repeated .rf_phreaker.protobuf.rp_plmn multiple_plmns = 2;
  for (unsigned int i = 0, n = this->multiple_plmns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->multiple_plmns(i), output);
  }

  // optional int32 tac = 3;
  if (this->tac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tac(), output);
  }

  // optional int32 cid = 4;
  if (this->cid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cid(), output);
  }

  // repeated .rf_phreaker.protobuf.rp_lte_scheduling_info scheduling_info = 5;
  for (unsigned int i = 0, n = this->scheduling_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->scheduling_info(i), output);
  }

  // optional int32 si_window_length_ms = 6;
  if (this->si_window_length_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->si_window_length_ms(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_sib1)
}

::google::protobuf::uint8* rp_lte_sib1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_sib1)
  // repeated .rf_phreaker.protobuf.rp_plmn multiple_plmns = 2;
  for (unsigned int i = 0, n = this->multiple_plmns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->multiple_plmns(i), target);
  }

  // optional int32 tac = 3;
  if (this->tac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tac(), target);
  }

  // optional int32 cid = 4;
  if (this->cid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cid(), target);
  }

  // repeated .rf_phreaker.protobuf.rp_lte_scheduling_info scheduling_info = 5;
  for (unsigned int i = 0, n = this->scheduling_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->scheduling_info(i), target);
  }

  // optional int32 si_window_length_ms = 6;
  if (this->si_window_length_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->si_window_length_ms(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_sib1)
  return target;
}

int rp_lte_sib1::ByteSize() const {
  int total_size = 0;

  // optional int32 tac = 3;
  if (this->tac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tac());
  }

  // optional int32 cid = 4;
  if (this->cid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());
  }

  // optional int32 si_window_length_ms = 6;
  if (this->si_window_length_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->si_window_length_ms());
  }

  // repeated .rf_phreaker.protobuf.rp_plmn multiple_plmns = 2;
  total_size += 1 * this->multiple_plmns_size();
  for (int i = 0; i < this->multiple_plmns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->multiple_plmns(i));
  }

  // repeated .rf_phreaker.protobuf.rp_lte_scheduling_info scheduling_info = 5;
  total_size += 1 * this->scheduling_info_size();
  for (int i = 0; i < this->scheduling_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scheduling_info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_sib1::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_sib1* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_sib1>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_sib1::MergeFrom(const rp_lte_sib1& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  multiple_plmns_.MergeFrom(from.multiple_plmns_);
  scheduling_info_.MergeFrom(from.scheduling_info_);
  if (from.tac() != 0) {
    set_tac(from.tac());
  }
  if (from.cid() != 0) {
    set_cid(from.cid());
  }
  if (from.si_window_length_ms() != 0) {
    set_si_window_length_ms(from.si_window_length_ms());
  }
}

void rp_lte_sib1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_sib1::CopyFrom(const rp_lte_sib1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_sib1::IsInitialized() const {

  return true;
}

void rp_lte_sib1::Swap(rp_lte_sib1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_sib1::InternalSwap(rp_lte_sib1* other) {
  multiple_plmns_.UnsafeArenaSwap(&other->multiple_plmns_);
  std::swap(tac_, other->tac_);
  std::swap(cid_, other->cid_);
  scheduling_info_.UnsafeArenaSwap(&other->scheduling_info_);
  std::swap(si_window_length_ms_, other->si_window_length_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_sib1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_sib1_descriptor_;
  metadata.reflection = rp_lte_sib1_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_sib1

// repeated .rf_phreaker.protobuf.rp_plmn multiple_plmns = 2;
int rp_lte_sib1::multiple_plmns_size() const {
  return multiple_plmns_.size();
}
void rp_lte_sib1::clear_multiple_plmns() {
  multiple_plmns_.Clear();
}
const ::rf_phreaker::protobuf::rp_plmn& rp_lte_sib1::multiple_plmns(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib1.multiple_plmns)
  return multiple_plmns_.Get(index);
}
::rf_phreaker::protobuf::rp_plmn* rp_lte_sib1::mutable_multiple_plmns(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib1.multiple_plmns)
  return multiple_plmns_.Mutable(index);
}
::rf_phreaker::protobuf::rp_plmn* rp_lte_sib1::add_multiple_plmns() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_sib1.multiple_plmns)
  return multiple_plmns_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_plmn >*
rp_lte_sib1::mutable_multiple_plmns() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_sib1.multiple_plmns)
  return &multiple_plmns_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_plmn >&
rp_lte_sib1::multiple_plmns() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_sib1.multiple_plmns)
  return multiple_plmns_;
}

// optional int32 tac = 3;
void rp_lte_sib1::clear_tac() {
  tac_ = 0;
}
 ::google::protobuf::int32 rp_lte_sib1::tac() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib1.tac)
  return tac_;
}
 void rp_lte_sib1::set_tac(::google::protobuf::int32 value) {
  
  tac_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_sib1.tac)
}

// optional int32 cid = 4;
void rp_lte_sib1::clear_cid() {
  cid_ = 0;
}
 ::google::protobuf::int32 rp_lte_sib1::cid() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib1.cid)
  return cid_;
}
 void rp_lte_sib1::set_cid(::google::protobuf::int32 value) {
  
  cid_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_sib1.cid)
}

// repeated .rf_phreaker.protobuf.rp_lte_scheduling_info scheduling_info = 5;
int rp_lte_sib1::scheduling_info_size() const {
  return scheduling_info_.size();
}
void rp_lte_sib1::clear_scheduling_info() {
  scheduling_info_.Clear();
}
const ::rf_phreaker::protobuf::rp_lte_scheduling_info& rp_lte_sib1::scheduling_info(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib1.scheduling_info)
  return scheduling_info_.Get(index);
}
::rf_phreaker::protobuf::rp_lte_scheduling_info* rp_lte_sib1::mutable_scheduling_info(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib1.scheduling_info)
  return scheduling_info_.Mutable(index);
}
::rf_phreaker::protobuf::rp_lte_scheduling_info* rp_lte_sib1::add_scheduling_info() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_sib1.scheduling_info)
  return scheduling_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_scheduling_info >*
rp_lte_sib1::mutable_scheduling_info() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_sib1.scheduling_info)
  return &scheduling_info_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_scheduling_info >&
rp_lte_sib1::scheduling_info() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_sib1.scheduling_info)
  return scheduling_info_;
}

// optional int32 si_window_length_ms = 6;
void rp_lte_sib1::clear_si_window_length_ms() {
  si_window_length_ms_ = 0;
}
 ::google::protobuf::int32 rp_lte_sib1::si_window_length_ms() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib1.si_window_length_ms)
  return si_window_length_ms_;
}
 void rp_lte_sib1::set_si_window_length_ms(::google::protobuf::int32 value) {
  
  si_window_length_ms_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_sib1.si_window_length_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_cell_reselection_serving_freq_info::kSNonIntraSearchFieldNumber;
const int rp_lte_cell_reselection_serving_freq_info::kThresholdServingLowFieldNumber;
const int rp_lte_cell_reselection_serving_freq_info::kCellReselectionPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_cell_reselection_serving_freq_info::rp_lte_cell_reselection_serving_freq_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info)
}

void rp_lte_cell_reselection_serving_freq_info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_lte_cell_reselection_serving_freq_info::rp_lte_cell_reselection_serving_freq_info(const rp_lte_cell_reselection_serving_freq_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info)
}

void rp_lte_cell_reselection_serving_freq_info::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  s_non_intra_search_ = 0;
  threshold_serving_low_ = 0;
  cell_reselection_priority_ = 0;
}

rp_lte_cell_reselection_serving_freq_info::~rp_lte_cell_reselection_serving_freq_info() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info)
  SharedDtor();
}

void rp_lte_cell_reselection_serving_freq_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_lte_cell_reselection_serving_freq_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_cell_reselection_serving_freq_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_cell_reselection_serving_freq_info_descriptor_;
}

const rp_lte_cell_reselection_serving_freq_info& rp_lte_cell_reselection_serving_freq_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_cell_reselection_serving_freq_info* rp_lte_cell_reselection_serving_freq_info::default_instance_ = NULL;

rp_lte_cell_reselection_serving_freq_info* rp_lte_cell_reselection_serving_freq_info::New(::google::protobuf::Arena* arena) const {
  rp_lte_cell_reselection_serving_freq_info* n = new rp_lte_cell_reselection_serving_freq_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_cell_reselection_serving_freq_info::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_lte_cell_reselection_serving_freq_info*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(s_non_intra_search_, cell_reselection_priority_);

#undef ZR_HELPER_
#undef ZR_

}

bool rp_lte_cell_reselection_serving_freq_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 s_non_intra_search = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s_non_intra_search_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_threshold_serving_low;
        break;
      }

      // optional int32 threshold_serving_low = 2;
      case 2: {
        if (tag == 16) {
         parse_threshold_serving_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_serving_low_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cell_reselection_priority;
        break;
      }

      // optional int32 cell_reselection_priority = 3;
      case 3: {
        if (tag == 24) {
         parse_cell_reselection_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_reselection_priority_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info)
  return false;
#undef DO_
}

void rp_lte_cell_reselection_serving_freq_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info)
  // optional int32 s_non_intra_search = 1;
  if (this->s_non_intra_search() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->s_non_intra_search(), output);
  }

  // optional int32 threshold_serving_low = 2;
  if (this->threshold_serving_low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->threshold_serving_low(), output);
  }

  // optional int32 cell_reselection_priority = 3;
  if (this->cell_reselection_priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cell_reselection_priority(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info)
}

::google::protobuf::uint8* rp_lte_cell_reselection_serving_freq_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info)
  // optional int32 s_non_intra_search = 1;
  if (this->s_non_intra_search() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->s_non_intra_search(), target);
  }

  // optional int32 threshold_serving_low = 2;
  if (this->threshold_serving_low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->threshold_serving_low(), target);
  }

  // optional int32 cell_reselection_priority = 3;
  if (this->cell_reselection_priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cell_reselection_priority(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info)
  return target;
}

int rp_lte_cell_reselection_serving_freq_info::ByteSize() const {
  int total_size = 0;

  // optional int32 s_non_intra_search = 1;
  if (this->s_non_intra_search() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->s_non_intra_search());
  }

  // optional int32 threshold_serving_low = 2;
  if (this->threshold_serving_low() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshold_serving_low());
  }

  // optional int32 cell_reselection_priority = 3;
  if (this->cell_reselection_priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cell_reselection_priority());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_cell_reselection_serving_freq_info::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_cell_reselection_serving_freq_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_cell_reselection_serving_freq_info>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_cell_reselection_serving_freq_info::MergeFrom(const rp_lte_cell_reselection_serving_freq_info& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.s_non_intra_search() != 0) {
    set_s_non_intra_search(from.s_non_intra_search());
  }
  if (from.threshold_serving_low() != 0) {
    set_threshold_serving_low(from.threshold_serving_low());
  }
  if (from.cell_reselection_priority() != 0) {
    set_cell_reselection_priority(from.cell_reselection_priority());
  }
}

void rp_lte_cell_reselection_serving_freq_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_cell_reselection_serving_freq_info::CopyFrom(const rp_lte_cell_reselection_serving_freq_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_cell_reselection_serving_freq_info::IsInitialized() const {

  return true;
}

void rp_lte_cell_reselection_serving_freq_info::Swap(rp_lte_cell_reselection_serving_freq_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_cell_reselection_serving_freq_info::InternalSwap(rp_lte_cell_reselection_serving_freq_info* other) {
  std::swap(s_non_intra_search_, other->s_non_intra_search_);
  std::swap(threshold_serving_low_, other->threshold_serving_low_);
  std::swap(cell_reselection_priority_, other->cell_reselection_priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_cell_reselection_serving_freq_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_cell_reselection_serving_freq_info_descriptor_;
  metadata.reflection = rp_lte_cell_reselection_serving_freq_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_cell_reselection_serving_freq_info

// optional int32 s_non_intra_search = 1;
void rp_lte_cell_reselection_serving_freq_info::clear_s_non_intra_search() {
  s_non_intra_search_ = 0;
}
 ::google::protobuf::int32 rp_lte_cell_reselection_serving_freq_info::s_non_intra_search() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info.s_non_intra_search)
  return s_non_intra_search_;
}
 void rp_lte_cell_reselection_serving_freq_info::set_s_non_intra_search(::google::protobuf::int32 value) {
  
  s_non_intra_search_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info.s_non_intra_search)
}

// optional int32 threshold_serving_low = 2;
void rp_lte_cell_reselection_serving_freq_info::clear_threshold_serving_low() {
  threshold_serving_low_ = 0;
}
 ::google::protobuf::int32 rp_lte_cell_reselection_serving_freq_info::threshold_serving_low() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info.threshold_serving_low)
  return threshold_serving_low_;
}
 void rp_lte_cell_reselection_serving_freq_info::set_threshold_serving_low(::google::protobuf::int32 value) {
  
  threshold_serving_low_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info.threshold_serving_low)
}

// optional int32 cell_reselection_priority = 3;
void rp_lte_cell_reselection_serving_freq_info::clear_cell_reselection_priority() {
  cell_reselection_priority_ = 0;
}
 ::google::protobuf::int32 rp_lte_cell_reselection_serving_freq_info::cell_reselection_priority() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info.cell_reselection_priority)
  return cell_reselection_priority_;
}
 void rp_lte_cell_reselection_serving_freq_info::set_cell_reselection_priority(::google::protobuf::int32 value) {
  
  cell_reselection_priority_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info.cell_reselection_priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_s_search_v920::kPFieldNumber;
const int rp_lte_s_search_v920::kQFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_s_search_v920::rp_lte_s_search_v920()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_s_search_v920)
}

void rp_lte_s_search_v920::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_lte_s_search_v920::rp_lte_s_search_v920(const rp_lte_s_search_v920& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_s_search_v920)
}

void rp_lte_s_search_v920::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  p_ = 0;
  q_ = 0;
}

rp_lte_s_search_v920::~rp_lte_s_search_v920() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_s_search_v920)
  SharedDtor();
}

void rp_lte_s_search_v920::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_lte_s_search_v920::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_s_search_v920::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_s_search_v920_descriptor_;
}

const rp_lte_s_search_v920& rp_lte_s_search_v920::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_s_search_v920* rp_lte_s_search_v920::default_instance_ = NULL;

rp_lte_s_search_v920* rp_lte_s_search_v920::New(::google::protobuf::Arena* arena) const {
  rp_lte_s_search_v920* n = new rp_lte_s_search_v920;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_s_search_v920::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_lte_s_search_v920*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(p_, q_);

#undef ZR_HELPER_
#undef ZR_

}

bool rp_lte_s_search_v920::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_s_search_v920)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 p = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_q;
        break;
      }

      // optional int32 q = 2;
      case 2: {
        if (tag == 16) {
         parse_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &q_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_s_search_v920)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_s_search_v920)
  return false;
#undef DO_
}

void rp_lte_s_search_v920::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_s_search_v920)
  // optional int32 p = 1;
  if (this->p() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->p(), output);
  }

  // optional int32 q = 2;
  if (this->q() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->q(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_s_search_v920)
}

::google::protobuf::uint8* rp_lte_s_search_v920::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_s_search_v920)
  // optional int32 p = 1;
  if (this->p() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->p(), target);
  }

  // optional int32 q = 2;
  if (this->q() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->q(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_s_search_v920)
  return target;
}

int rp_lte_s_search_v920::ByteSize() const {
  int total_size = 0;

  // optional int32 p = 1;
  if (this->p() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->p());
  }

  // optional int32 q = 2;
  if (this->q() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->q());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_s_search_v920::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_s_search_v920* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_s_search_v920>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_s_search_v920::MergeFrom(const rp_lte_s_search_v920& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.p() != 0) {
    set_p(from.p());
  }
  if (from.q() != 0) {
    set_q(from.q());
  }
}

void rp_lte_s_search_v920::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_s_search_v920::CopyFrom(const rp_lte_s_search_v920& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_s_search_v920::IsInitialized() const {

  return true;
}

void rp_lte_s_search_v920::Swap(rp_lte_s_search_v920* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_s_search_v920::InternalSwap(rp_lte_s_search_v920* other) {
  std::swap(p_, other->p_);
  std::swap(q_, other->q_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_s_search_v920::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_s_search_v920_descriptor_;
  metadata.reflection = rp_lte_s_search_v920_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_s_search_v920

// optional int32 p = 1;
void rp_lte_s_search_v920::clear_p() {
  p_ = 0;
}
 ::google::protobuf::int32 rp_lte_s_search_v920::p() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_s_search_v920.p)
  return p_;
}
 void rp_lte_s_search_v920::set_p(::google::protobuf::int32 value) {
  
  p_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_s_search_v920.p)
}

// optional int32 q = 2;
void rp_lte_s_search_v920::clear_q() {
  q_ = 0;
}
 ::google::protobuf::int32 rp_lte_s_search_v920::q() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_s_search_v920.q)
  return q_;
}
 void rp_lte_s_search_v920::set_q(::google::protobuf::int32 value) {
  
  q_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_s_search_v920.q)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_sib3::kCellReselectionServingFreqInfoFieldNumber;
const int rp_lte_sib3::kIntraFreqCellReselectionInfoSIntraSearchFieldNumber;
const int rp_lte_sib3::kSIntraSearchV920FieldNumber;
const int rp_lte_sib3::kSNonIntraSearchV920FieldNumber;
const int rp_lte_sib3::kThresholdServingLowQFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_sib3::rp_lte_sib3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_sib3)
}

void rp_lte_sib3::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  cell_reselection_serving_freq_info_ = const_cast< ::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info*>(&::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info::default_instance());
  s_intra_search_v920_ = const_cast< ::rf_phreaker::protobuf::rp_lte_s_search_v920*>(&::rf_phreaker::protobuf::rp_lte_s_search_v920::default_instance());
  s_non_intra_search_v920_ = const_cast< ::rf_phreaker::protobuf::rp_lte_s_search_v920*>(&::rf_phreaker::protobuf::rp_lte_s_search_v920::default_instance());
}

rp_lte_sib3::rp_lte_sib3(const rp_lte_sib3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_sib3)
}

void rp_lte_sib3::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cell_reselection_serving_freq_info_ = NULL;
  intra_freq_cell_reselection_info_s_intra_search_ = 0;
  s_intra_search_v920_ = NULL;
  s_non_intra_search_v920_ = NULL;
  threshold_serving_low_q_ = 0;
}

rp_lte_sib3::~rp_lte_sib3() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_sib3)
  SharedDtor();
}

void rp_lte_sib3::SharedDtor() {
  if (this != default_instance_) {
    delete cell_reselection_serving_freq_info_;
    delete s_intra_search_v920_;
    delete s_non_intra_search_v920_;
  }
}

void rp_lte_sib3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_sib3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_sib3_descriptor_;
}

const rp_lte_sib3& rp_lte_sib3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_sib3* rp_lte_sib3::default_instance_ = NULL;

rp_lte_sib3* rp_lte_sib3::New(::google::protobuf::Arena* arena) const {
  rp_lte_sib3* n = new rp_lte_sib3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_sib3::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_lte_sib3*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(intra_freq_cell_reselection_info_s_intra_search_, threshold_serving_low_q_);
  if (GetArenaNoVirtual() == NULL && cell_reselection_serving_freq_info_ != NULL) delete cell_reselection_serving_freq_info_;
  cell_reselection_serving_freq_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && s_intra_search_v920_ != NULL) delete s_intra_search_v920_;
  s_intra_search_v920_ = NULL;
  if (GetArenaNoVirtual() == NULL && s_non_intra_search_v920_ != NULL) delete s_non_intra_search_v920_;
  s_non_intra_search_v920_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool rp_lte_sib3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_sib3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info cell_reselection_serving_freq_info = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_reselection_serving_freq_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_intra_freq_cell_reselection_info_s_intra_search;
        break;
      }

      // optional int32 intra_freq_cell_reselection_info_s_intra_search = 3;
      case 3: {
        if (tag == 24) {
         parse_intra_freq_cell_reselection_info_s_intra_search:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intra_freq_cell_reselection_info_s_intra_search_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_s_intra_search_v920;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_lte_s_search_v920 s_intra_search_v920 = 4;
      case 4: {
        if (tag == 34) {
         parse_s_intra_search_v920:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s_intra_search_v920()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_s_non_intra_search_v920;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_lte_s_search_v920 s_non_intra_search_v920 = 5;
      case 5: {
        if (tag == 42) {
         parse_s_non_intra_search_v920:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s_non_intra_search_v920()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_threshold_serving_low_q;
        break;
      }

      // optional int32 threshold_serving_low_q = 6;
      case 6: {
        if (tag == 48) {
         parse_threshold_serving_low_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_serving_low_q_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_sib3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_sib3)
  return false;
#undef DO_
}

void rp_lte_sib3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_sib3)
  // optional .rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info cell_reselection_serving_freq_info = 2;
  if (this->has_cell_reselection_serving_freq_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cell_reselection_serving_freq_info_, output);
  }

  // optional int32 intra_freq_cell_reselection_info_s_intra_search = 3;
  if (this->intra_freq_cell_reselection_info_s_intra_search() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->intra_freq_cell_reselection_info_s_intra_search(), output);
  }

  // optional .rf_phreaker.protobuf.rp_lte_s_search_v920 s_intra_search_v920 = 4;
  if (this->has_s_intra_search_v920()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->s_intra_search_v920_, output);
  }

  // optional .rf_phreaker.protobuf.rp_lte_s_search_v920 s_non_intra_search_v920 = 5;
  if (this->has_s_non_intra_search_v920()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->s_non_intra_search_v920_, output);
  }

  // optional int32 threshold_serving_low_q = 6;
  if (this->threshold_serving_low_q() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->threshold_serving_low_q(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_sib3)
}

::google::protobuf::uint8* rp_lte_sib3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_sib3)
  // optional .rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info cell_reselection_serving_freq_info = 2;
  if (this->has_cell_reselection_serving_freq_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->cell_reselection_serving_freq_info_, target);
  }

  // optional int32 intra_freq_cell_reselection_info_s_intra_search = 3;
  if (this->intra_freq_cell_reselection_info_s_intra_search() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->intra_freq_cell_reselection_info_s_intra_search(), target);
  }

  // optional .rf_phreaker.protobuf.rp_lte_s_search_v920 s_intra_search_v920 = 4;
  if (this->has_s_intra_search_v920()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->s_intra_search_v920_, target);
  }

  // optional .rf_phreaker.protobuf.rp_lte_s_search_v920 s_non_intra_search_v920 = 5;
  if (this->has_s_non_intra_search_v920()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->s_non_intra_search_v920_, target);
  }

  // optional int32 threshold_serving_low_q = 6;
  if (this->threshold_serving_low_q() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->threshold_serving_low_q(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_sib3)
  return target;
}

int rp_lte_sib3::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info cell_reselection_serving_freq_info = 2;
  if (this->has_cell_reselection_serving_freq_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cell_reselection_serving_freq_info_);
  }

  // optional int32 intra_freq_cell_reselection_info_s_intra_search = 3;
  if (this->intra_freq_cell_reselection_info_s_intra_search() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->intra_freq_cell_reselection_info_s_intra_search());
  }

  // optional .rf_phreaker.protobuf.rp_lte_s_search_v920 s_intra_search_v920 = 4;
  if (this->has_s_intra_search_v920()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->s_intra_search_v920_);
  }

  // optional .rf_phreaker.protobuf.rp_lte_s_search_v920 s_non_intra_search_v920 = 5;
  if (this->has_s_non_intra_search_v920()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->s_non_intra_search_v920_);
  }

  // optional int32 threshold_serving_low_q = 6;
  if (this->threshold_serving_low_q() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshold_serving_low_q());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_sib3::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_sib3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_sib3>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_sib3::MergeFrom(const rp_lte_sib3& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_cell_reselection_serving_freq_info()) {
    mutable_cell_reselection_serving_freq_info()->::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info::MergeFrom(from.cell_reselection_serving_freq_info());
  }
  if (from.intra_freq_cell_reselection_info_s_intra_search() != 0) {
    set_intra_freq_cell_reselection_info_s_intra_search(from.intra_freq_cell_reselection_info_s_intra_search());
  }
  if (from.has_s_intra_search_v920()) {
    mutable_s_intra_search_v920()->::rf_phreaker::protobuf::rp_lte_s_search_v920::MergeFrom(from.s_intra_search_v920());
  }
  if (from.has_s_non_intra_search_v920()) {
    mutable_s_non_intra_search_v920()->::rf_phreaker::protobuf::rp_lte_s_search_v920::MergeFrom(from.s_non_intra_search_v920());
  }
  if (from.threshold_serving_low_q() != 0) {
    set_threshold_serving_low_q(from.threshold_serving_low_q());
  }
}

void rp_lte_sib3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_sib3::CopyFrom(const rp_lte_sib3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_sib3::IsInitialized() const {

  return true;
}

void rp_lte_sib3::Swap(rp_lte_sib3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_sib3::InternalSwap(rp_lte_sib3* other) {
  std::swap(cell_reselection_serving_freq_info_, other->cell_reselection_serving_freq_info_);
  std::swap(intra_freq_cell_reselection_info_s_intra_search_, other->intra_freq_cell_reselection_info_s_intra_search_);
  std::swap(s_intra_search_v920_, other->s_intra_search_v920_);
  std::swap(s_non_intra_search_v920_, other->s_non_intra_search_v920_);
  std::swap(threshold_serving_low_q_, other->threshold_serving_low_q_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_sib3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_sib3_descriptor_;
  metadata.reflection = rp_lte_sib3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_sib3

// optional .rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info cell_reselection_serving_freq_info = 2;
bool rp_lte_sib3::has_cell_reselection_serving_freq_info() const {
  return !_is_default_instance_ && cell_reselection_serving_freq_info_ != NULL;
}
void rp_lte_sib3::clear_cell_reselection_serving_freq_info() {
  if (GetArenaNoVirtual() == NULL && cell_reselection_serving_freq_info_ != NULL) delete cell_reselection_serving_freq_info_;
  cell_reselection_serving_freq_info_ = NULL;
}
const ::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info& rp_lte_sib3::cell_reselection_serving_freq_info() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib3.cell_reselection_serving_freq_info)
  return cell_reselection_serving_freq_info_ != NULL ? *cell_reselection_serving_freq_info_ : *default_instance_->cell_reselection_serving_freq_info_;
}
::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info* rp_lte_sib3::mutable_cell_reselection_serving_freq_info() {
  
  if (cell_reselection_serving_freq_info_ == NULL) {
    cell_reselection_serving_freq_info_ = new ::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib3.cell_reselection_serving_freq_info)
  return cell_reselection_serving_freq_info_;
}
::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info* rp_lte_sib3::release_cell_reselection_serving_freq_info() {
  
  ::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info* temp = cell_reselection_serving_freq_info_;
  cell_reselection_serving_freq_info_ = NULL;
  return temp;
}
void rp_lte_sib3::set_allocated_cell_reselection_serving_freq_info(::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info* cell_reselection_serving_freq_info) {
  delete cell_reselection_serving_freq_info_;
  cell_reselection_serving_freq_info_ = cell_reselection_serving_freq_info;
  if (cell_reselection_serving_freq_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_sib3.cell_reselection_serving_freq_info)
}

// optional int32 intra_freq_cell_reselection_info_s_intra_search = 3;
void rp_lte_sib3::clear_intra_freq_cell_reselection_info_s_intra_search() {
  intra_freq_cell_reselection_info_s_intra_search_ = 0;
}
 ::google::protobuf::int32 rp_lte_sib3::intra_freq_cell_reselection_info_s_intra_search() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib3.intra_freq_cell_reselection_info_s_intra_search)
  return intra_freq_cell_reselection_info_s_intra_search_;
}
 void rp_lte_sib3::set_intra_freq_cell_reselection_info_s_intra_search(::google::protobuf::int32 value) {
  
  intra_freq_cell_reselection_info_s_intra_search_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_sib3.intra_freq_cell_reselection_info_s_intra_search)
}

// optional .rf_phreaker.protobuf.rp_lte_s_search_v920 s_intra_search_v920 = 4;
bool rp_lte_sib3::has_s_intra_search_v920() const {
  return !_is_default_instance_ && s_intra_search_v920_ != NULL;
}
void rp_lte_sib3::clear_s_intra_search_v920() {
  if (GetArenaNoVirtual() == NULL && s_intra_search_v920_ != NULL) delete s_intra_search_v920_;
  s_intra_search_v920_ = NULL;
}
const ::rf_phreaker::protobuf::rp_lte_s_search_v920& rp_lte_sib3::s_intra_search_v920() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib3.s_intra_search_v920)
  return s_intra_search_v920_ != NULL ? *s_intra_search_v920_ : *default_instance_->s_intra_search_v920_;
}
::rf_phreaker::protobuf::rp_lte_s_search_v920* rp_lte_sib3::mutable_s_intra_search_v920() {
  
  if (s_intra_search_v920_ == NULL) {
    s_intra_search_v920_ = new ::rf_phreaker::protobuf::rp_lte_s_search_v920;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib3.s_intra_search_v920)
  return s_intra_search_v920_;
}
::rf_phreaker::protobuf::rp_lte_s_search_v920* rp_lte_sib3::release_s_intra_search_v920() {
  
  ::rf_phreaker::protobuf::rp_lte_s_search_v920* temp = s_intra_search_v920_;
  s_intra_search_v920_ = NULL;
  return temp;
}
void rp_lte_sib3::set_allocated_s_intra_search_v920(::rf_phreaker::protobuf::rp_lte_s_search_v920* s_intra_search_v920) {
  delete s_intra_search_v920_;
  s_intra_search_v920_ = s_intra_search_v920;
  if (s_intra_search_v920) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_sib3.s_intra_search_v920)
}

// optional .rf_phreaker.protobuf.rp_lte_s_search_v920 s_non_intra_search_v920 = 5;
bool rp_lte_sib3::has_s_non_intra_search_v920() const {
  return !_is_default_instance_ && s_non_intra_search_v920_ != NULL;
}
void rp_lte_sib3::clear_s_non_intra_search_v920() {
  if (GetArenaNoVirtual() == NULL && s_non_intra_search_v920_ != NULL) delete s_non_intra_search_v920_;
  s_non_intra_search_v920_ = NULL;
}
const ::rf_phreaker::protobuf::rp_lte_s_search_v920& rp_lte_sib3::s_non_intra_search_v920() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib3.s_non_intra_search_v920)
  return s_non_intra_search_v920_ != NULL ? *s_non_intra_search_v920_ : *default_instance_->s_non_intra_search_v920_;
}
::rf_phreaker::protobuf::rp_lte_s_search_v920* rp_lte_sib3::mutable_s_non_intra_search_v920() {
  
  if (s_non_intra_search_v920_ == NULL) {
    s_non_intra_search_v920_ = new ::rf_phreaker::protobuf::rp_lte_s_search_v920;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib3.s_non_intra_search_v920)
  return s_non_intra_search_v920_;
}
::rf_phreaker::protobuf::rp_lte_s_search_v920* rp_lte_sib3::release_s_non_intra_search_v920() {
  
  ::rf_phreaker::protobuf::rp_lte_s_search_v920* temp = s_non_intra_search_v920_;
  s_non_intra_search_v920_ = NULL;
  return temp;
}
void rp_lte_sib3::set_allocated_s_non_intra_search_v920(::rf_phreaker::protobuf::rp_lte_s_search_v920* s_non_intra_search_v920) {
  delete s_non_intra_search_v920_;
  s_non_intra_search_v920_ = s_non_intra_search_v920;
  if (s_non_intra_search_v920) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_sib3.s_non_intra_search_v920)
}

// optional int32 threshold_serving_low_q = 6;
void rp_lte_sib3::clear_threshold_serving_low_q() {
  threshold_serving_low_q_ = 0;
}
 ::google::protobuf::int32 rp_lte_sib3::threshold_serving_low_q() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib3.threshold_serving_low_q)
  return threshold_serving_low_q_;
}
 void rp_lte_sib3::set_threshold_serving_low_q(::google::protobuf::int32 value) {
  
  threshold_serving_low_q_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_sib3.threshold_serving_low_q)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_physical_cellid_range::kStartFieldNumber;
const int rp_lte_physical_cellid_range::kRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_physical_cellid_range::rp_lte_physical_cellid_range()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_physical_cellid_range)
}

void rp_lte_physical_cellid_range::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_lte_physical_cellid_range::rp_lte_physical_cellid_range(const rp_lte_physical_cellid_range& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_physical_cellid_range)
}

void rp_lte_physical_cellid_range::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  start_ = 0;
  range_ = 0;
}

rp_lte_physical_cellid_range::~rp_lte_physical_cellid_range() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_physical_cellid_range)
  SharedDtor();
}

void rp_lte_physical_cellid_range::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_lte_physical_cellid_range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_physical_cellid_range::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_physical_cellid_range_descriptor_;
}

const rp_lte_physical_cellid_range& rp_lte_physical_cellid_range::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_physical_cellid_range* rp_lte_physical_cellid_range::default_instance_ = NULL;

rp_lte_physical_cellid_range* rp_lte_physical_cellid_range::New(::google::protobuf::Arena* arena) const {
  rp_lte_physical_cellid_range* n = new rp_lte_physical_cellid_range;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_physical_cellid_range::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_lte_physical_cellid_range*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_, range_);

#undef ZR_HELPER_
#undef ZR_

}

bool rp_lte_physical_cellid_range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_physical_cellid_range)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 start = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_range;
        break;
      }

      // optional int32 range = 2;
      case 2: {
        if (tag == 16) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_physical_cellid_range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_physical_cellid_range)
  return false;
#undef DO_
}

void rp_lte_physical_cellid_range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_physical_cellid_range)
  // optional int32 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start(), output);
  }

  // optional int32 range = 2;
  if (this->range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->range(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_physical_cellid_range)
}

::google::protobuf::uint8* rp_lte_physical_cellid_range::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_physical_cellid_range)
  // optional int32 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start(), target);
  }

  // optional int32 range = 2;
  if (this->range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->range(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_physical_cellid_range)
  return target;
}

int rp_lte_physical_cellid_range::ByteSize() const {
  int total_size = 0;

  // optional int32 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // optional int32 range = 2;
  if (this->range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->range());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_physical_cellid_range::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_physical_cellid_range* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_physical_cellid_range>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_physical_cellid_range::MergeFrom(const rp_lte_physical_cellid_range& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.range() != 0) {
    set_range(from.range());
  }
}

void rp_lte_physical_cellid_range::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_physical_cellid_range::CopyFrom(const rp_lte_physical_cellid_range& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_physical_cellid_range::IsInitialized() const {

  return true;
}

void rp_lte_physical_cellid_range::Swap(rp_lte_physical_cellid_range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_physical_cellid_range::InternalSwap(rp_lte_physical_cellid_range* other) {
  std::swap(start_, other->start_);
  std::swap(range_, other->range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_physical_cellid_range::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_physical_cellid_range_descriptor_;
  metadata.reflection = rp_lte_physical_cellid_range_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_physical_cellid_range

// optional int32 start = 1;
void rp_lte_physical_cellid_range::clear_start() {
  start_ = 0;
}
 ::google::protobuf::int32 rp_lte_physical_cellid_range::start() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_physical_cellid_range.start)
  return start_;
}
 void rp_lte_physical_cellid_range::set_start(::google::protobuf::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_physical_cellid_range.start)
}

// optional int32 range = 2;
void rp_lte_physical_cellid_range::clear_range() {
  range_ = 0;
}
 ::google::protobuf::int32 rp_lte_physical_cellid_range::range() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_physical_cellid_range.range)
  return range_;
}
 void rp_lte_physical_cellid_range::set_range(::google::protobuf::int32 value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_physical_cellid_range.range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_neighbor_cell::kPhysicalCellIdFieldNumber;
const int rp_lte_neighbor_cell::kQOffsetCellFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_neighbor_cell::rp_lte_neighbor_cell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_neighbor_cell)
}

void rp_lte_neighbor_cell::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_lte_neighbor_cell::rp_lte_neighbor_cell(const rp_lte_neighbor_cell& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_neighbor_cell)
}

void rp_lte_neighbor_cell::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  physical_cell_id_ = 0;
  q_offset_cell_ = 0;
}

rp_lte_neighbor_cell::~rp_lte_neighbor_cell() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_neighbor_cell)
  SharedDtor();
}

void rp_lte_neighbor_cell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_lte_neighbor_cell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_neighbor_cell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_neighbor_cell_descriptor_;
}

const rp_lte_neighbor_cell& rp_lte_neighbor_cell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_neighbor_cell* rp_lte_neighbor_cell::default_instance_ = NULL;

rp_lte_neighbor_cell* rp_lte_neighbor_cell::New(::google::protobuf::Arena* arena) const {
  rp_lte_neighbor_cell* n = new rp_lte_neighbor_cell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_neighbor_cell::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_lte_neighbor_cell*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(physical_cell_id_, q_offset_cell_);

#undef ZR_HELPER_
#undef ZR_

}

bool rp_lte_neighbor_cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_neighbor_cell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 physical_cell_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physical_cell_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_q_offset_cell;
        break;
      }

      // optional int32 q_offset_cell = 2;
      case 2: {
        if (tag == 16) {
         parse_q_offset_cell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &q_offset_cell_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_neighbor_cell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_neighbor_cell)
  return false;
#undef DO_
}

void rp_lte_neighbor_cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_neighbor_cell)
  // optional int32 physical_cell_id = 1;
  if (this->physical_cell_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->physical_cell_id(), output);
  }

  // optional int32 q_offset_cell = 2;
  if (this->q_offset_cell() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->q_offset_cell(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_neighbor_cell)
}

::google::protobuf::uint8* rp_lte_neighbor_cell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_neighbor_cell)
  // optional int32 physical_cell_id = 1;
  if (this->physical_cell_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->physical_cell_id(), target);
  }

  // optional int32 q_offset_cell = 2;
  if (this->q_offset_cell() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->q_offset_cell(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_neighbor_cell)
  return target;
}

int rp_lte_neighbor_cell::ByteSize() const {
  int total_size = 0;

  // optional int32 physical_cell_id = 1;
  if (this->physical_cell_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->physical_cell_id());
  }

  // optional int32 q_offset_cell = 2;
  if (this->q_offset_cell() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->q_offset_cell());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_neighbor_cell::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_neighbor_cell* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_neighbor_cell>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_neighbor_cell::MergeFrom(const rp_lte_neighbor_cell& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.physical_cell_id() != 0) {
    set_physical_cell_id(from.physical_cell_id());
  }
  if (from.q_offset_cell() != 0) {
    set_q_offset_cell(from.q_offset_cell());
  }
}

void rp_lte_neighbor_cell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_neighbor_cell::CopyFrom(const rp_lte_neighbor_cell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_neighbor_cell::IsInitialized() const {

  return true;
}

void rp_lte_neighbor_cell::Swap(rp_lte_neighbor_cell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_neighbor_cell::InternalSwap(rp_lte_neighbor_cell* other) {
  std::swap(physical_cell_id_, other->physical_cell_id_);
  std::swap(q_offset_cell_, other->q_offset_cell_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_neighbor_cell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_neighbor_cell_descriptor_;
  metadata.reflection = rp_lte_neighbor_cell_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_neighbor_cell

// optional int32 physical_cell_id = 1;
void rp_lte_neighbor_cell::clear_physical_cell_id() {
  physical_cell_id_ = 0;
}
 ::google::protobuf::int32 rp_lte_neighbor_cell::physical_cell_id() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_neighbor_cell.physical_cell_id)
  return physical_cell_id_;
}
 void rp_lte_neighbor_cell::set_physical_cell_id(::google::protobuf::int32 value) {
  
  physical_cell_id_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_neighbor_cell.physical_cell_id)
}

// optional int32 q_offset_cell = 2;
void rp_lte_neighbor_cell::clear_q_offset_cell() {
  q_offset_cell_ = 0;
}
 ::google::protobuf::int32 rp_lte_neighbor_cell::q_offset_cell() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_neighbor_cell.q_offset_cell)
  return q_offset_cell_;
}
 void rp_lte_neighbor_cell::set_q_offset_cell(::google::protobuf::int32 value) {
  
  q_offset_cell_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_neighbor_cell.q_offset_cell)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_sib4::kIntraFreqNeighborCellListFieldNumber;
const int rp_lte_sib4::kIntraFreqBlackCellListFieldNumber;
const int rp_lte_sib4::kCsgPhysicalCellidRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_sib4::rp_lte_sib4()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_sib4)
}

void rp_lte_sib4::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  csg_physical_cellid_range_ = const_cast< ::rf_phreaker::protobuf::rp_lte_physical_cellid_range*>(&::rf_phreaker::protobuf::rp_lte_physical_cellid_range::default_instance());
}

rp_lte_sib4::rp_lte_sib4(const rp_lte_sib4& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_sib4)
}

void rp_lte_sib4::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  csg_physical_cellid_range_ = NULL;
}

rp_lte_sib4::~rp_lte_sib4() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_sib4)
  SharedDtor();
}

void rp_lte_sib4::SharedDtor() {
  if (this != default_instance_) {
    delete csg_physical_cellid_range_;
  }
}

void rp_lte_sib4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_sib4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_sib4_descriptor_;
}

const rp_lte_sib4& rp_lte_sib4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_sib4* rp_lte_sib4::default_instance_ = NULL;

rp_lte_sib4* rp_lte_sib4::New(::google::protobuf::Arena* arena) const {
  rp_lte_sib4* n = new rp_lte_sib4;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_sib4::Clear() {
  if (GetArenaNoVirtual() == NULL && csg_physical_cellid_range_ != NULL) delete csg_physical_cellid_range_;
  csg_physical_cellid_range_ = NULL;
  intra_freq_neighbor_cell_list_.Clear();
  intra_freq_black_cell_list_.Clear();
}

bool rp_lte_sib4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_sib4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell intra_freq_neighbor_cell_list = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_intra_freq_neighbor_cell_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_intra_freq_neighbor_cell_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_intra_freq_neighbor_cell_list;
        if (input->ExpectTag(26)) goto parse_loop_intra_freq_black_cell_list;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_lte_physical_cellid_range intra_freq_black_cell_list = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_intra_freq_black_cell_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_intra_freq_black_cell_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_intra_freq_black_cell_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_csg_physical_cellid_range;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_lte_physical_cellid_range csg_physical_cellid_range = 4;
      case 4: {
        if (tag == 34) {
         parse_csg_physical_cellid_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_csg_physical_cellid_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_sib4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_sib4)
  return false;
#undef DO_
}

void rp_lte_sib4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_sib4)
  // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell intra_freq_neighbor_cell_list = 2;
  for (unsigned int i = 0, n = this->intra_freq_neighbor_cell_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->intra_freq_neighbor_cell_list(i), output);
  }

  // repeated .rf_phreaker.protobuf.rp_lte_physical_cellid_range intra_freq_black_cell_list = 3;
  for (unsigned int i = 0, n = this->intra_freq_black_cell_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->intra_freq_black_cell_list(i), output);
  }

  // optional .rf_phreaker.protobuf.rp_lte_physical_cellid_range csg_physical_cellid_range = 4;
  if (this->has_csg_physical_cellid_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->csg_physical_cellid_range_, output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_sib4)
}

::google::protobuf::uint8* rp_lte_sib4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_sib4)
  // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell intra_freq_neighbor_cell_list = 2;
  for (unsigned int i = 0, n = this->intra_freq_neighbor_cell_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->intra_freq_neighbor_cell_list(i), target);
  }

  // repeated .rf_phreaker.protobuf.rp_lte_physical_cellid_range intra_freq_black_cell_list = 3;
  for (unsigned int i = 0, n = this->intra_freq_black_cell_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->intra_freq_black_cell_list(i), target);
  }

  // optional .rf_phreaker.protobuf.rp_lte_physical_cellid_range csg_physical_cellid_range = 4;
  if (this->has_csg_physical_cellid_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->csg_physical_cellid_range_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_sib4)
  return target;
}

int rp_lte_sib4::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_lte_physical_cellid_range csg_physical_cellid_range = 4;
  if (this->has_csg_physical_cellid_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->csg_physical_cellid_range_);
  }

  // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell intra_freq_neighbor_cell_list = 2;
  total_size += 1 * this->intra_freq_neighbor_cell_list_size();
  for (int i = 0; i < this->intra_freq_neighbor_cell_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intra_freq_neighbor_cell_list(i));
  }

  // repeated .rf_phreaker.protobuf.rp_lte_physical_cellid_range intra_freq_black_cell_list = 3;
  total_size += 1 * this->intra_freq_black_cell_list_size();
  for (int i = 0; i < this->intra_freq_black_cell_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intra_freq_black_cell_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_sib4::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_sib4* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_sib4>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_sib4::MergeFrom(const rp_lte_sib4& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  intra_freq_neighbor_cell_list_.MergeFrom(from.intra_freq_neighbor_cell_list_);
  intra_freq_black_cell_list_.MergeFrom(from.intra_freq_black_cell_list_);
  if (from.has_csg_physical_cellid_range()) {
    mutable_csg_physical_cellid_range()->::rf_phreaker::protobuf::rp_lte_physical_cellid_range::MergeFrom(from.csg_physical_cellid_range());
  }
}

void rp_lte_sib4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_sib4::CopyFrom(const rp_lte_sib4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_sib4::IsInitialized() const {

  return true;
}

void rp_lte_sib4::Swap(rp_lte_sib4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_sib4::InternalSwap(rp_lte_sib4* other) {
  intra_freq_neighbor_cell_list_.UnsafeArenaSwap(&other->intra_freq_neighbor_cell_list_);
  intra_freq_black_cell_list_.UnsafeArenaSwap(&other->intra_freq_black_cell_list_);
  std::swap(csg_physical_cellid_range_, other->csg_physical_cellid_range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_sib4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_sib4_descriptor_;
  metadata.reflection = rp_lte_sib4_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_sib4

// repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell intra_freq_neighbor_cell_list = 2;
int rp_lte_sib4::intra_freq_neighbor_cell_list_size() const {
  return intra_freq_neighbor_cell_list_.size();
}
void rp_lte_sib4::clear_intra_freq_neighbor_cell_list() {
  intra_freq_neighbor_cell_list_.Clear();
}
const ::rf_phreaker::protobuf::rp_lte_neighbor_cell& rp_lte_sib4::intra_freq_neighbor_cell_list(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_neighbor_cell_list)
  return intra_freq_neighbor_cell_list_.Get(index);
}
::rf_phreaker::protobuf::rp_lte_neighbor_cell* rp_lte_sib4::mutable_intra_freq_neighbor_cell_list(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_neighbor_cell_list)
  return intra_freq_neighbor_cell_list_.Mutable(index);
}
::rf_phreaker::protobuf::rp_lte_neighbor_cell* rp_lte_sib4::add_intra_freq_neighbor_cell_list() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_neighbor_cell_list)
  return intra_freq_neighbor_cell_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell >*
rp_lte_sib4::mutable_intra_freq_neighbor_cell_list() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_neighbor_cell_list)
  return &intra_freq_neighbor_cell_list_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell >&
rp_lte_sib4::intra_freq_neighbor_cell_list() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_neighbor_cell_list)
  return intra_freq_neighbor_cell_list_;
}

// repeated .rf_phreaker.protobuf.rp_lte_physical_cellid_range intra_freq_black_cell_list = 3;
int rp_lte_sib4::intra_freq_black_cell_list_size() const {
  return intra_freq_black_cell_list_.size();
}
void rp_lte_sib4::clear_intra_freq_black_cell_list() {
  intra_freq_black_cell_list_.Clear();
}
const ::rf_phreaker::protobuf::rp_lte_physical_cellid_range& rp_lte_sib4::intra_freq_black_cell_list(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_black_cell_list)
  return intra_freq_black_cell_list_.Get(index);
}
::rf_phreaker::protobuf::rp_lte_physical_cellid_range* rp_lte_sib4::mutable_intra_freq_black_cell_list(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_black_cell_list)
  return intra_freq_black_cell_list_.Mutable(index);
}
::rf_phreaker::protobuf::rp_lte_physical_cellid_range* rp_lte_sib4::add_intra_freq_black_cell_list() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_black_cell_list)
  return intra_freq_black_cell_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_physical_cellid_range >*
rp_lte_sib4::mutable_intra_freq_black_cell_list() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_black_cell_list)
  return &intra_freq_black_cell_list_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_physical_cellid_range >&
rp_lte_sib4::intra_freq_black_cell_list() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_black_cell_list)
  return intra_freq_black_cell_list_;
}

// optional .rf_phreaker.protobuf.rp_lte_physical_cellid_range csg_physical_cellid_range = 4;
bool rp_lte_sib4::has_csg_physical_cellid_range() const {
  return !_is_default_instance_ && csg_physical_cellid_range_ != NULL;
}
void rp_lte_sib4::clear_csg_physical_cellid_range() {
  if (GetArenaNoVirtual() == NULL && csg_physical_cellid_range_ != NULL) delete csg_physical_cellid_range_;
  csg_physical_cellid_range_ = NULL;
}
const ::rf_phreaker::protobuf::rp_lte_physical_cellid_range& rp_lte_sib4::csg_physical_cellid_range() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib4.csg_physical_cellid_range)
  return csg_physical_cellid_range_ != NULL ? *csg_physical_cellid_range_ : *default_instance_->csg_physical_cellid_range_;
}
::rf_phreaker::protobuf::rp_lte_physical_cellid_range* rp_lte_sib4::mutable_csg_physical_cellid_range() {
  
  if (csg_physical_cellid_range_ == NULL) {
    csg_physical_cellid_range_ = new ::rf_phreaker::protobuf::rp_lte_physical_cellid_range;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib4.csg_physical_cellid_range)
  return csg_physical_cellid_range_;
}
::rf_phreaker::protobuf::rp_lte_physical_cellid_range* rp_lte_sib4::release_csg_physical_cellid_range() {
  
  ::rf_phreaker::protobuf::rp_lte_physical_cellid_range* temp = csg_physical_cellid_range_;
  csg_physical_cellid_range_ = NULL;
  return temp;
}
void rp_lte_sib4::set_allocated_csg_physical_cellid_range(::rf_phreaker::protobuf::rp_lte_physical_cellid_range* csg_physical_cellid_range) {
  delete csg_physical_cellid_range_;
  csg_physical_cellid_range_ = csg_physical_cellid_range;
  if (csg_physical_cellid_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_sib4.csg_physical_cellid_range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_inter_freq_carrier_freq_info::kDownlinkArfcnValueEutraFieldNumber;
const int rp_lte_inter_freq_carrier_freq_info::kQRxLevMinFieldNumber;
const int rp_lte_inter_freq_carrier_freq_info::kQOffsetFreqFieldNumber;
const int rp_lte_inter_freq_carrier_freq_info::kAllowedMeasurementBandwidthFieldNumber;
const int rp_lte_inter_freq_carrier_freq_info::kPresenceAntennaPort1FieldNumber;
const int rp_lte_inter_freq_carrier_freq_info::kThresholdXHighFieldNumber;
const int rp_lte_inter_freq_carrier_freq_info::kThresholdXLowFieldNumber;
const int rp_lte_inter_freq_carrier_freq_info::kThresholdXHighQR9FieldNumber;
const int rp_lte_inter_freq_carrier_freq_info::kThresholdXLowQR9FieldNumber;
const int rp_lte_inter_freq_carrier_freq_info::kCellReselectionPriorityFieldNumber;
const int rp_lte_inter_freq_carrier_freq_info::kInterFreqNeighborCellListFieldNumber;
const int rp_lte_inter_freq_carrier_freq_info::kInterFreqBlackCellListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_inter_freq_carrier_freq_info::rp_lte_inter_freq_carrier_freq_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info)
}

void rp_lte_inter_freq_carrier_freq_info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_lte_inter_freq_carrier_freq_info::rp_lte_inter_freq_carrier_freq_info(const rp_lte_inter_freq_carrier_freq_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info)
}

void rp_lte_inter_freq_carrier_freq_info::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  downlink_arfcn_value_eutra_ = 0;
  q_rx_lev_min_ = 0;
  q_offset_freq_ = 0;
  allowed_measurement_bandwidth_ = 0;
  presence_antenna_port_1_ = false;
  threshold_x_high_ = 0;
  threshold_x_low_ = 0;
  threshold_x_high_q_r9_ = 0;
  threshold_x_low_q_r9_ = 0;
  cell_reselection_priority_ = 0;
}

rp_lte_inter_freq_carrier_freq_info::~rp_lte_inter_freq_carrier_freq_info() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info)
  SharedDtor();
}

void rp_lte_inter_freq_carrier_freq_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_lte_inter_freq_carrier_freq_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_inter_freq_carrier_freq_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_inter_freq_carrier_freq_info_descriptor_;
}

const rp_lte_inter_freq_carrier_freq_info& rp_lte_inter_freq_carrier_freq_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_inter_freq_carrier_freq_info* rp_lte_inter_freq_carrier_freq_info::default_instance_ = NULL;

rp_lte_inter_freq_carrier_freq_info* rp_lte_inter_freq_carrier_freq_info::New(::google::protobuf::Arena* arena) const {
  rp_lte_inter_freq_carrier_freq_info* n = new rp_lte_inter_freq_carrier_freq_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_inter_freq_carrier_freq_info::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_lte_inter_freq_carrier_freq_info*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(downlink_arfcn_value_eutra_, threshold_x_high_q_r9_);
  ZR_(threshold_x_low_q_r9_, cell_reselection_priority_);

#undef ZR_HELPER_
#undef ZR_

  inter_freq_neighbor_cell_list_.Clear();
  inter_freq_black_cell_list_.Clear();
}

bool rp_lte_inter_freq_carrier_freq_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 downlink_arfcn_value_eutra = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downlink_arfcn_value_eutra_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_q_rx_lev_min;
        break;
      }

      // optional int32 q_rx_lev_min = 2;
      case 2: {
        if (tag == 16) {
         parse_q_rx_lev_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &q_rx_lev_min_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_q_offset_freq;
        break;
      }

      // optional int32 q_offset_freq = 3;
      case 3: {
        if (tag == 24) {
         parse_q_offset_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &q_offset_freq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_allowed_measurement_bandwidth;
        break;
      }

      // optional int32 allowed_measurement_bandwidth = 4;
      case 4: {
        if (tag == 32) {
         parse_allowed_measurement_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allowed_measurement_bandwidth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_presence_antenna_port_1;
        break;
      }

      // optional bool presence_antenna_port_1 = 5;
      case 5: {
        if (tag == 40) {
         parse_presence_antenna_port_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &presence_antenna_port_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_threshold_x_high;
        break;
      }

      // optional int32 threshold_x_high = 6;
      case 6: {
        if (tag == 48) {
         parse_threshold_x_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_x_high_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_threshold_x_low;
        break;
      }

      // optional int32 threshold_x_low = 7;
      case 7: {
        if (tag == 56) {
         parse_threshold_x_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_x_low_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_threshold_x_high_q_r9;
        break;
      }

      // optional int32 threshold_x_high_q_r9 = 8;
      case 8: {
        if (tag == 64) {
         parse_threshold_x_high_q_r9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_x_high_q_r9_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_threshold_x_low_q_r9;
        break;
      }

      // optional int32 threshold_x_low_q_r9 = 9;
      case 9: {
        if (tag == 72) {
         parse_threshold_x_low_q_r9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_x_low_q_r9_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_cell_reselection_priority;
        break;
      }

      // optional int32 cell_reselection_priority = 10;
      case 10: {
        if (tag == 80) {
         parse_cell_reselection_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_reselection_priority_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_inter_freq_neighbor_cell_list;
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell inter_freq_neighbor_cell_list = 11;
      case 11: {
        if (tag == 90) {
         parse_inter_freq_neighbor_cell_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_inter_freq_neighbor_cell_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_inter_freq_neighbor_cell_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_inter_freq_neighbor_cell_list;
        if (input->ExpectTag(98)) goto parse_loop_inter_freq_black_cell_list;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_lte_physical_cellid_range inter_freq_black_cell_list = 12;
      case 12: {
        if (tag == 98) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_inter_freq_black_cell_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_inter_freq_black_cell_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_inter_freq_black_cell_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info)
  return false;
#undef DO_
}

void rp_lte_inter_freq_carrier_freq_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info)
  // optional int32 downlink_arfcn_value_eutra = 1;
  if (this->downlink_arfcn_value_eutra() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->downlink_arfcn_value_eutra(), output);
  }

  // optional int32 q_rx_lev_min = 2;
  if (this->q_rx_lev_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->q_rx_lev_min(), output);
  }

  // optional int32 q_offset_freq = 3;
  if (this->q_offset_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->q_offset_freq(), output);
  }

  // optional int32 allowed_measurement_bandwidth = 4;
  if (this->allowed_measurement_bandwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->allowed_measurement_bandwidth(), output);
  }

  // optional bool presence_antenna_port_1 = 5;
  if (this->presence_antenna_port_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->presence_antenna_port_1(), output);
  }

  // optional int32 threshold_x_high = 6;
  if (this->threshold_x_high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->threshold_x_high(), output);
  }

  // optional int32 threshold_x_low = 7;
  if (this->threshold_x_low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->threshold_x_low(), output);
  }

  // optional int32 threshold_x_high_q_r9 = 8;
  if (this->threshold_x_high_q_r9() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->threshold_x_high_q_r9(), output);
  }

  // optional int32 threshold_x_low_q_r9 = 9;
  if (this->threshold_x_low_q_r9() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->threshold_x_low_q_r9(), output);
  }

  // optional int32 cell_reselection_priority = 10;
  if (this->cell_reselection_priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cell_reselection_priority(), output);
  }

  // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell inter_freq_neighbor_cell_list = 11;
  for (unsigned int i = 0, n = this->inter_freq_neighbor_cell_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->inter_freq_neighbor_cell_list(i), output);
  }

  // repeated .rf_phreaker.protobuf.rp_lte_physical_cellid_range inter_freq_black_cell_list = 12;
  for (unsigned int i = 0, n = this->inter_freq_black_cell_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->inter_freq_black_cell_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info)
}

::google::protobuf::uint8* rp_lte_inter_freq_carrier_freq_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info)
  // optional int32 downlink_arfcn_value_eutra = 1;
  if (this->downlink_arfcn_value_eutra() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->downlink_arfcn_value_eutra(), target);
  }

  // optional int32 q_rx_lev_min = 2;
  if (this->q_rx_lev_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->q_rx_lev_min(), target);
  }

  // optional int32 q_offset_freq = 3;
  if (this->q_offset_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->q_offset_freq(), target);
  }

  // optional int32 allowed_measurement_bandwidth = 4;
  if (this->allowed_measurement_bandwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->allowed_measurement_bandwidth(), target);
  }

  // optional bool presence_antenna_port_1 = 5;
  if (this->presence_antenna_port_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->presence_antenna_port_1(), target);
  }

  // optional int32 threshold_x_high = 6;
  if (this->threshold_x_high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->threshold_x_high(), target);
  }

  // optional int32 threshold_x_low = 7;
  if (this->threshold_x_low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->threshold_x_low(), target);
  }

  // optional int32 threshold_x_high_q_r9 = 8;
  if (this->threshold_x_high_q_r9() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->threshold_x_high_q_r9(), target);
  }

  // optional int32 threshold_x_low_q_r9 = 9;
  if (this->threshold_x_low_q_r9() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->threshold_x_low_q_r9(), target);
  }

  // optional int32 cell_reselection_priority = 10;
  if (this->cell_reselection_priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cell_reselection_priority(), target);
  }

  // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell inter_freq_neighbor_cell_list = 11;
  for (unsigned int i = 0, n = this->inter_freq_neighbor_cell_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->inter_freq_neighbor_cell_list(i), target);
  }

  // repeated .rf_phreaker.protobuf.rp_lte_physical_cellid_range inter_freq_black_cell_list = 12;
  for (unsigned int i = 0, n = this->inter_freq_black_cell_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->inter_freq_black_cell_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info)
  return target;
}

int rp_lte_inter_freq_carrier_freq_info::ByteSize() const {
  int total_size = 0;

  // optional int32 downlink_arfcn_value_eutra = 1;
  if (this->downlink_arfcn_value_eutra() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->downlink_arfcn_value_eutra());
  }

  // optional int32 q_rx_lev_min = 2;
  if (this->q_rx_lev_min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->q_rx_lev_min());
  }

  // optional int32 q_offset_freq = 3;
  if (this->q_offset_freq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->q_offset_freq());
  }

  // optional int32 allowed_measurement_bandwidth = 4;
  if (this->allowed_measurement_bandwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->allowed_measurement_bandwidth());
  }

  // optional bool presence_antenna_port_1 = 5;
  if (this->presence_antenna_port_1() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 threshold_x_high = 6;
  if (this->threshold_x_high() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshold_x_high());
  }

  // optional int32 threshold_x_low = 7;
  if (this->threshold_x_low() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshold_x_low());
  }

  // optional int32 threshold_x_high_q_r9 = 8;
  if (this->threshold_x_high_q_r9() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshold_x_high_q_r9());
  }

  // optional int32 threshold_x_low_q_r9 = 9;
  if (this->threshold_x_low_q_r9() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshold_x_low_q_r9());
  }

  // optional int32 cell_reselection_priority = 10;
  if (this->cell_reselection_priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cell_reselection_priority());
  }

  // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell inter_freq_neighbor_cell_list = 11;
  total_size += 1 * this->inter_freq_neighbor_cell_list_size();
  for (int i = 0; i < this->inter_freq_neighbor_cell_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inter_freq_neighbor_cell_list(i));
  }

  // repeated .rf_phreaker.protobuf.rp_lte_physical_cellid_range inter_freq_black_cell_list = 12;
  total_size += 1 * this->inter_freq_black_cell_list_size();
  for (int i = 0; i < this->inter_freq_black_cell_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inter_freq_black_cell_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_inter_freq_carrier_freq_info::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_inter_freq_carrier_freq_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_inter_freq_carrier_freq_info>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_inter_freq_carrier_freq_info::MergeFrom(const rp_lte_inter_freq_carrier_freq_info& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  inter_freq_neighbor_cell_list_.MergeFrom(from.inter_freq_neighbor_cell_list_);
  inter_freq_black_cell_list_.MergeFrom(from.inter_freq_black_cell_list_);
  if (from.downlink_arfcn_value_eutra() != 0) {
    set_downlink_arfcn_value_eutra(from.downlink_arfcn_value_eutra());
  }
  if (from.q_rx_lev_min() != 0) {
    set_q_rx_lev_min(from.q_rx_lev_min());
  }
  if (from.q_offset_freq() != 0) {
    set_q_offset_freq(from.q_offset_freq());
  }
  if (from.allowed_measurement_bandwidth() != 0) {
    set_allowed_measurement_bandwidth(from.allowed_measurement_bandwidth());
  }
  if (from.presence_antenna_port_1() != 0) {
    set_presence_antenna_port_1(from.presence_antenna_port_1());
  }
  if (from.threshold_x_high() != 0) {
    set_threshold_x_high(from.threshold_x_high());
  }
  if (from.threshold_x_low() != 0) {
    set_threshold_x_low(from.threshold_x_low());
  }
  if (from.threshold_x_high_q_r9() != 0) {
    set_threshold_x_high_q_r9(from.threshold_x_high_q_r9());
  }
  if (from.threshold_x_low_q_r9() != 0) {
    set_threshold_x_low_q_r9(from.threshold_x_low_q_r9());
  }
  if (from.cell_reselection_priority() != 0) {
    set_cell_reselection_priority(from.cell_reselection_priority());
  }
}

void rp_lte_inter_freq_carrier_freq_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_inter_freq_carrier_freq_info::CopyFrom(const rp_lte_inter_freq_carrier_freq_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_inter_freq_carrier_freq_info::IsInitialized() const {

  return true;
}

void rp_lte_inter_freq_carrier_freq_info::Swap(rp_lte_inter_freq_carrier_freq_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_inter_freq_carrier_freq_info::InternalSwap(rp_lte_inter_freq_carrier_freq_info* other) {
  std::swap(downlink_arfcn_value_eutra_, other->downlink_arfcn_value_eutra_);
  std::swap(q_rx_lev_min_, other->q_rx_lev_min_);
  std::swap(q_offset_freq_, other->q_offset_freq_);
  std::swap(allowed_measurement_bandwidth_, other->allowed_measurement_bandwidth_);
  std::swap(presence_antenna_port_1_, other->presence_antenna_port_1_);
  std::swap(threshold_x_high_, other->threshold_x_high_);
  std::swap(threshold_x_low_, other->threshold_x_low_);
  std::swap(threshold_x_high_q_r9_, other->threshold_x_high_q_r9_);
  std::swap(threshold_x_low_q_r9_, other->threshold_x_low_q_r9_);
  std::swap(cell_reselection_priority_, other->cell_reselection_priority_);
  inter_freq_neighbor_cell_list_.UnsafeArenaSwap(&other->inter_freq_neighbor_cell_list_);
  inter_freq_black_cell_list_.UnsafeArenaSwap(&other->inter_freq_black_cell_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_inter_freq_carrier_freq_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_inter_freq_carrier_freq_info_descriptor_;
  metadata.reflection = rp_lte_inter_freq_carrier_freq_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_inter_freq_carrier_freq_info

// optional int32 downlink_arfcn_value_eutra = 1;
void rp_lte_inter_freq_carrier_freq_info::clear_downlink_arfcn_value_eutra() {
  downlink_arfcn_value_eutra_ = 0;
}
 ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::downlink_arfcn_value_eutra() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.downlink_arfcn_value_eutra)
  return downlink_arfcn_value_eutra_;
}
 void rp_lte_inter_freq_carrier_freq_info::set_downlink_arfcn_value_eutra(::google::protobuf::int32 value) {
  
  downlink_arfcn_value_eutra_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.downlink_arfcn_value_eutra)
}

// optional int32 q_rx_lev_min = 2;
void rp_lte_inter_freq_carrier_freq_info::clear_q_rx_lev_min() {
  q_rx_lev_min_ = 0;
}
 ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::q_rx_lev_min() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.q_rx_lev_min)
  return q_rx_lev_min_;
}
 void rp_lte_inter_freq_carrier_freq_info::set_q_rx_lev_min(::google::protobuf::int32 value) {
  
  q_rx_lev_min_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.q_rx_lev_min)
}

// optional int32 q_offset_freq = 3;
void rp_lte_inter_freq_carrier_freq_info::clear_q_offset_freq() {
  q_offset_freq_ = 0;
}
 ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::q_offset_freq() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.q_offset_freq)
  return q_offset_freq_;
}
 void rp_lte_inter_freq_carrier_freq_info::set_q_offset_freq(::google::protobuf::int32 value) {
  
  q_offset_freq_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.q_offset_freq)
}

// optional int32 allowed_measurement_bandwidth = 4;
void rp_lte_inter_freq_carrier_freq_info::clear_allowed_measurement_bandwidth() {
  allowed_measurement_bandwidth_ = 0;
}
 ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::allowed_measurement_bandwidth() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.allowed_measurement_bandwidth)
  return allowed_measurement_bandwidth_;
}
 void rp_lte_inter_freq_carrier_freq_info::set_allowed_measurement_bandwidth(::google::protobuf::int32 value) {
  
  allowed_measurement_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.allowed_measurement_bandwidth)
}

// optional bool presence_antenna_port_1 = 5;
void rp_lte_inter_freq_carrier_freq_info::clear_presence_antenna_port_1() {
  presence_antenna_port_1_ = false;
}
 bool rp_lte_inter_freq_carrier_freq_info::presence_antenna_port_1() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.presence_antenna_port_1)
  return presence_antenna_port_1_;
}
 void rp_lte_inter_freq_carrier_freq_info::set_presence_antenna_port_1(bool value) {
  
  presence_antenna_port_1_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.presence_antenna_port_1)
}

// optional int32 threshold_x_high = 6;
void rp_lte_inter_freq_carrier_freq_info::clear_threshold_x_high() {
  threshold_x_high_ = 0;
}
 ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::threshold_x_high() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.threshold_x_high)
  return threshold_x_high_;
}
 void rp_lte_inter_freq_carrier_freq_info::set_threshold_x_high(::google::protobuf::int32 value) {
  
  threshold_x_high_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.threshold_x_high)
}

// optional int32 threshold_x_low = 7;
void rp_lte_inter_freq_carrier_freq_info::clear_threshold_x_low() {
  threshold_x_low_ = 0;
}
 ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::threshold_x_low() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.threshold_x_low)
  return threshold_x_low_;
}
 void rp_lte_inter_freq_carrier_freq_info::set_threshold_x_low(::google::protobuf::int32 value) {
  
  threshold_x_low_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.threshold_x_low)
}

// optional int32 threshold_x_high_q_r9 = 8;
void rp_lte_inter_freq_carrier_freq_info::clear_threshold_x_high_q_r9() {
  threshold_x_high_q_r9_ = 0;
}
 ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::threshold_x_high_q_r9() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.threshold_x_high_q_r9)
  return threshold_x_high_q_r9_;
}
 void rp_lte_inter_freq_carrier_freq_info::set_threshold_x_high_q_r9(::google::protobuf::int32 value) {
  
  threshold_x_high_q_r9_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.threshold_x_high_q_r9)
}

// optional int32 threshold_x_low_q_r9 = 9;
void rp_lte_inter_freq_carrier_freq_info::clear_threshold_x_low_q_r9() {
  threshold_x_low_q_r9_ = 0;
}
 ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::threshold_x_low_q_r9() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.threshold_x_low_q_r9)
  return threshold_x_low_q_r9_;
}
 void rp_lte_inter_freq_carrier_freq_info::set_threshold_x_low_q_r9(::google::protobuf::int32 value) {
  
  threshold_x_low_q_r9_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.threshold_x_low_q_r9)
}

// optional int32 cell_reselection_priority = 10;
void rp_lte_inter_freq_carrier_freq_info::clear_cell_reselection_priority() {
  cell_reselection_priority_ = 0;
}
 ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::cell_reselection_priority() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.cell_reselection_priority)
  return cell_reselection_priority_;
}
 void rp_lte_inter_freq_carrier_freq_info::set_cell_reselection_priority(::google::protobuf::int32 value) {
  
  cell_reselection_priority_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.cell_reselection_priority)
}

// repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell inter_freq_neighbor_cell_list = 11;
int rp_lte_inter_freq_carrier_freq_info::inter_freq_neighbor_cell_list_size() const {
  return inter_freq_neighbor_cell_list_.size();
}
void rp_lte_inter_freq_carrier_freq_info::clear_inter_freq_neighbor_cell_list() {
  inter_freq_neighbor_cell_list_.Clear();
}
const ::rf_phreaker::protobuf::rp_lte_neighbor_cell& rp_lte_inter_freq_carrier_freq_info::inter_freq_neighbor_cell_list(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_neighbor_cell_list)
  return inter_freq_neighbor_cell_list_.Get(index);
}
::rf_phreaker::protobuf::rp_lte_neighbor_cell* rp_lte_inter_freq_carrier_freq_info::mutable_inter_freq_neighbor_cell_list(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_neighbor_cell_list)
  return inter_freq_neighbor_cell_list_.Mutable(index);
}
::rf_phreaker::protobuf::rp_lte_neighbor_cell* rp_lte_inter_freq_carrier_freq_info::add_inter_freq_neighbor_cell_list() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_neighbor_cell_list)
  return inter_freq_neighbor_cell_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell >*
rp_lte_inter_freq_carrier_freq_info::mutable_inter_freq_neighbor_cell_list() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_neighbor_cell_list)
  return &inter_freq_neighbor_cell_list_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell >&
rp_lte_inter_freq_carrier_freq_info::inter_freq_neighbor_cell_list() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_neighbor_cell_list)
  return inter_freq_neighbor_cell_list_;
}

// repeated .rf_phreaker.protobuf.rp_lte_physical_cellid_range inter_freq_black_cell_list = 12;
int rp_lte_inter_freq_carrier_freq_info::inter_freq_black_cell_list_size() const {
  return inter_freq_black_cell_list_.size();
}
void rp_lte_inter_freq_carrier_freq_info::clear_inter_freq_black_cell_list() {
  inter_freq_black_cell_list_.Clear();
}
const ::rf_phreaker::protobuf::rp_lte_physical_cellid_range& rp_lte_inter_freq_carrier_freq_info::inter_freq_black_cell_list(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_black_cell_list)
  return inter_freq_black_cell_list_.Get(index);
}
::rf_phreaker::protobuf::rp_lte_physical_cellid_range* rp_lte_inter_freq_carrier_freq_info::mutable_inter_freq_black_cell_list(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_black_cell_list)
  return inter_freq_black_cell_list_.Mutable(index);
}
::rf_phreaker::protobuf::rp_lte_physical_cellid_range* rp_lte_inter_freq_carrier_freq_info::add_inter_freq_black_cell_list() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_black_cell_list)
  return inter_freq_black_cell_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_physical_cellid_range >*
rp_lte_inter_freq_carrier_freq_info::mutable_inter_freq_black_cell_list() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_black_cell_list)
  return &inter_freq_black_cell_list_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_physical_cellid_range >&
rp_lte_inter_freq_carrier_freq_info::inter_freq_black_cell_list() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_black_cell_list)
  return inter_freq_black_cell_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_sib5::kInterFreqCarrierInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_sib5::rp_lte_sib5()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_sib5)
}

void rp_lte_sib5::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_lte_sib5::rp_lte_sib5(const rp_lte_sib5& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_sib5)
}

void rp_lte_sib5::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

rp_lte_sib5::~rp_lte_sib5() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_sib5)
  SharedDtor();
}

void rp_lte_sib5::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_lte_sib5::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_sib5::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_sib5_descriptor_;
}

const rp_lte_sib5& rp_lte_sib5::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_sib5* rp_lte_sib5::default_instance_ = NULL;

rp_lte_sib5* rp_lte_sib5::New(::google::protobuf::Arena* arena) const {
  rp_lte_sib5* n = new rp_lte_sib5;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_sib5::Clear() {
  inter_freq_carrier_info_list_.Clear();
}

bool rp_lte_sib5::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_sib5)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info inter_freq_carrier_info_list = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_inter_freq_carrier_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_inter_freq_carrier_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_inter_freq_carrier_info_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_sib5)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_sib5)
  return false;
#undef DO_
}

void rp_lte_sib5::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_sib5)
  // repeated .rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info inter_freq_carrier_info_list = 2;
  for (unsigned int i = 0, n = this->inter_freq_carrier_info_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->inter_freq_carrier_info_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_sib5)
}

::google::protobuf::uint8* rp_lte_sib5::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_sib5)
  // repeated .rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info inter_freq_carrier_info_list = 2;
  for (unsigned int i = 0, n = this->inter_freq_carrier_info_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->inter_freq_carrier_info_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_sib5)
  return target;
}

int rp_lte_sib5::ByteSize() const {
  int total_size = 0;

  // repeated .rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info inter_freq_carrier_info_list = 2;
  total_size += 1 * this->inter_freq_carrier_info_list_size();
  for (int i = 0; i < this->inter_freq_carrier_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inter_freq_carrier_info_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_sib5::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_sib5* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_sib5>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_sib5::MergeFrom(const rp_lte_sib5& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  inter_freq_carrier_info_list_.MergeFrom(from.inter_freq_carrier_info_list_);
}

void rp_lte_sib5::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_sib5::CopyFrom(const rp_lte_sib5& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_sib5::IsInitialized() const {

  return true;
}

void rp_lte_sib5::Swap(rp_lte_sib5* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_sib5::InternalSwap(rp_lte_sib5* other) {
  inter_freq_carrier_info_list_.UnsafeArenaSwap(&other->inter_freq_carrier_info_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_sib5::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_sib5_descriptor_;
  metadata.reflection = rp_lte_sib5_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_sib5

// repeated .rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info inter_freq_carrier_info_list = 2;
int rp_lte_sib5::inter_freq_carrier_info_list_size() const {
  return inter_freq_carrier_info_list_.size();
}
void rp_lte_sib5::clear_inter_freq_carrier_info_list() {
  inter_freq_carrier_info_list_.Clear();
}
const ::rf_phreaker::protobuf::rp_lte_inter_freq_carrier_freq_info& rp_lte_sib5::inter_freq_carrier_info_list(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib5.inter_freq_carrier_info_list)
  return inter_freq_carrier_info_list_.Get(index);
}
::rf_phreaker::protobuf::rp_lte_inter_freq_carrier_freq_info* rp_lte_sib5::mutable_inter_freq_carrier_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib5.inter_freq_carrier_info_list)
  return inter_freq_carrier_info_list_.Mutable(index);
}
::rf_phreaker::protobuf::rp_lte_inter_freq_carrier_freq_info* rp_lte_sib5::add_inter_freq_carrier_info_list() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_sib5.inter_freq_carrier_info_list)
  return inter_freq_carrier_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_inter_freq_carrier_freq_info >*
rp_lte_sib5::mutable_inter_freq_carrier_info_list() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_sib5.inter_freq_carrier_info_list)
  return &inter_freq_carrier_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_inter_freq_carrier_freq_info >&
rp_lte_sib5::inter_freq_carrier_info_list() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_sib5.inter_freq_carrier_info_list)
  return inter_freq_carrier_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_carrier_freq_utra::kArfcnValueUtraFieldNumber;
const int rp_lte_carrier_freq_utra::kThresholdXLowFieldNumber;
const int rp_lte_carrier_freq_utra::kThresholdXHighFieldNumber;
const int rp_lte_carrier_freq_utra::kThresholdXLowQR9FieldNumber;
const int rp_lte_carrier_freq_utra::kThresholdXHighQR9FieldNumber;
const int rp_lte_carrier_freq_utra::kCellReselectionPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_carrier_freq_utra::rp_lte_carrier_freq_utra()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_carrier_freq_utra)
}

void rp_lte_carrier_freq_utra::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_lte_carrier_freq_utra::rp_lte_carrier_freq_utra(const rp_lte_carrier_freq_utra& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_carrier_freq_utra)
}

void rp_lte_carrier_freq_utra::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  arfcn_value_utra_ = 0;
  threshold_x_low_ = 0;
  threshold_x_high_ = 0;
  threshold_x_low_q_r9_ = 0;
  threshold_x_high_q_r9_ = 0;
  cell_reselection_priority_ = 0;
}

rp_lte_carrier_freq_utra::~rp_lte_carrier_freq_utra() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_carrier_freq_utra)
  SharedDtor();
}

void rp_lte_carrier_freq_utra::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_lte_carrier_freq_utra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_carrier_freq_utra::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_carrier_freq_utra_descriptor_;
}

const rp_lte_carrier_freq_utra& rp_lte_carrier_freq_utra::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_carrier_freq_utra* rp_lte_carrier_freq_utra::default_instance_ = NULL;

rp_lte_carrier_freq_utra* rp_lte_carrier_freq_utra::New(::google::protobuf::Arena* arena) const {
  rp_lte_carrier_freq_utra* n = new rp_lte_carrier_freq_utra;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_carrier_freq_utra::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_lte_carrier_freq_utra*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(arfcn_value_utra_, cell_reselection_priority_);

#undef ZR_HELPER_
#undef ZR_

}

bool rp_lte_carrier_freq_utra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_carrier_freq_utra)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 arfcn_value_utra = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arfcn_value_utra_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_threshold_x_low;
        break;
      }

      // optional int32 threshold_x_low = 2;
      case 2: {
        if (tag == 16) {
         parse_threshold_x_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_x_low_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_threshold_x_high;
        break;
      }

      // optional int32 threshold_x_high = 3;
      case 3: {
        if (tag == 24) {
         parse_threshold_x_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_x_high_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_threshold_x_low_q_r9;
        break;
      }

      // optional int32 threshold_x_low_q_r9 = 4;
      case 4: {
        if (tag == 32) {
         parse_threshold_x_low_q_r9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_x_low_q_r9_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_threshold_x_high_q_r9;
        break;
      }

      // optional int32 threshold_x_high_q_r9 = 5;
      case 5: {
        if (tag == 40) {
         parse_threshold_x_high_q_r9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_x_high_q_r9_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cell_reselection_priority;
        break;
      }

      // optional int32 cell_reselection_priority = 6;
      case 6: {
        if (tag == 48) {
         parse_cell_reselection_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_reselection_priority_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_carrier_freq_utra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_carrier_freq_utra)
  return false;
#undef DO_
}

void rp_lte_carrier_freq_utra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_carrier_freq_utra)
  // optional int32 arfcn_value_utra = 1;
  if (this->arfcn_value_utra() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->arfcn_value_utra(), output);
  }

  // optional int32 threshold_x_low = 2;
  if (this->threshold_x_low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->threshold_x_low(), output);
  }

  // optional int32 threshold_x_high = 3;
  if (this->threshold_x_high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->threshold_x_high(), output);
  }

  // optional int32 threshold_x_low_q_r9 = 4;
  if (this->threshold_x_low_q_r9() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->threshold_x_low_q_r9(), output);
  }

  // optional int32 threshold_x_high_q_r9 = 5;
  if (this->threshold_x_high_q_r9() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->threshold_x_high_q_r9(), output);
  }

  // optional int32 cell_reselection_priority = 6;
  if (this->cell_reselection_priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cell_reselection_priority(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_carrier_freq_utra)
}

::google::protobuf::uint8* rp_lte_carrier_freq_utra::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_carrier_freq_utra)
  // optional int32 arfcn_value_utra = 1;
  if (this->arfcn_value_utra() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->arfcn_value_utra(), target);
  }

  // optional int32 threshold_x_low = 2;
  if (this->threshold_x_low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->threshold_x_low(), target);
  }

  // optional int32 threshold_x_high = 3;
  if (this->threshold_x_high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->threshold_x_high(), target);
  }

  // optional int32 threshold_x_low_q_r9 = 4;
  if (this->threshold_x_low_q_r9() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->threshold_x_low_q_r9(), target);
  }

  // optional int32 threshold_x_high_q_r9 = 5;
  if (this->threshold_x_high_q_r9() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->threshold_x_high_q_r9(), target);
  }

  // optional int32 cell_reselection_priority = 6;
  if (this->cell_reselection_priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cell_reselection_priority(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_carrier_freq_utra)
  return target;
}

int rp_lte_carrier_freq_utra::ByteSize() const {
  int total_size = 0;

  // optional int32 arfcn_value_utra = 1;
  if (this->arfcn_value_utra() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->arfcn_value_utra());
  }

  // optional int32 threshold_x_low = 2;
  if (this->threshold_x_low() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshold_x_low());
  }

  // optional int32 threshold_x_high = 3;
  if (this->threshold_x_high() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshold_x_high());
  }

  // optional int32 threshold_x_low_q_r9 = 4;
  if (this->threshold_x_low_q_r9() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshold_x_low_q_r9());
  }

  // optional int32 threshold_x_high_q_r9 = 5;
  if (this->threshold_x_high_q_r9() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshold_x_high_q_r9());
  }

  // optional int32 cell_reselection_priority = 6;
  if (this->cell_reselection_priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cell_reselection_priority());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_carrier_freq_utra::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_carrier_freq_utra* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_carrier_freq_utra>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_carrier_freq_utra::MergeFrom(const rp_lte_carrier_freq_utra& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.arfcn_value_utra() != 0) {
    set_arfcn_value_utra(from.arfcn_value_utra());
  }
  if (from.threshold_x_low() != 0) {
    set_threshold_x_low(from.threshold_x_low());
  }
  if (from.threshold_x_high() != 0) {
    set_threshold_x_high(from.threshold_x_high());
  }
  if (from.threshold_x_low_q_r9() != 0) {
    set_threshold_x_low_q_r9(from.threshold_x_low_q_r9());
  }
  if (from.threshold_x_high_q_r9() != 0) {
    set_threshold_x_high_q_r9(from.threshold_x_high_q_r9());
  }
  if (from.cell_reselection_priority() != 0) {
    set_cell_reselection_priority(from.cell_reselection_priority());
  }
}

void rp_lte_carrier_freq_utra::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_carrier_freq_utra::CopyFrom(const rp_lte_carrier_freq_utra& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_carrier_freq_utra::IsInitialized() const {

  return true;
}

void rp_lte_carrier_freq_utra::Swap(rp_lte_carrier_freq_utra* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_carrier_freq_utra::InternalSwap(rp_lte_carrier_freq_utra* other) {
  std::swap(arfcn_value_utra_, other->arfcn_value_utra_);
  std::swap(threshold_x_low_, other->threshold_x_low_);
  std::swap(threshold_x_high_, other->threshold_x_high_);
  std::swap(threshold_x_low_q_r9_, other->threshold_x_low_q_r9_);
  std::swap(threshold_x_high_q_r9_, other->threshold_x_high_q_r9_);
  std::swap(cell_reselection_priority_, other->cell_reselection_priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_carrier_freq_utra::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_carrier_freq_utra_descriptor_;
  metadata.reflection = rp_lte_carrier_freq_utra_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_carrier_freq_utra

// optional int32 arfcn_value_utra = 1;
void rp_lte_carrier_freq_utra::clear_arfcn_value_utra() {
  arfcn_value_utra_ = 0;
}
 ::google::protobuf::int32 rp_lte_carrier_freq_utra::arfcn_value_utra() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.arfcn_value_utra)
  return arfcn_value_utra_;
}
 void rp_lte_carrier_freq_utra::set_arfcn_value_utra(::google::protobuf::int32 value) {
  
  arfcn_value_utra_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.arfcn_value_utra)
}

// optional int32 threshold_x_low = 2;
void rp_lte_carrier_freq_utra::clear_threshold_x_low() {
  threshold_x_low_ = 0;
}
 ::google::protobuf::int32 rp_lte_carrier_freq_utra::threshold_x_low() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.threshold_x_low)
  return threshold_x_low_;
}
 void rp_lte_carrier_freq_utra::set_threshold_x_low(::google::protobuf::int32 value) {
  
  threshold_x_low_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.threshold_x_low)
}

// optional int32 threshold_x_high = 3;
void rp_lte_carrier_freq_utra::clear_threshold_x_high() {
  threshold_x_high_ = 0;
}
 ::google::protobuf::int32 rp_lte_carrier_freq_utra::threshold_x_high() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.threshold_x_high)
  return threshold_x_high_;
}
 void rp_lte_carrier_freq_utra::set_threshold_x_high(::google::protobuf::int32 value) {
  
  threshold_x_high_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.threshold_x_high)
}

// optional int32 threshold_x_low_q_r9 = 4;
void rp_lte_carrier_freq_utra::clear_threshold_x_low_q_r9() {
  threshold_x_low_q_r9_ = 0;
}
 ::google::protobuf::int32 rp_lte_carrier_freq_utra::threshold_x_low_q_r9() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.threshold_x_low_q_r9)
  return threshold_x_low_q_r9_;
}
 void rp_lte_carrier_freq_utra::set_threshold_x_low_q_r9(::google::protobuf::int32 value) {
  
  threshold_x_low_q_r9_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.threshold_x_low_q_r9)
}

// optional int32 threshold_x_high_q_r9 = 5;
void rp_lte_carrier_freq_utra::clear_threshold_x_high_q_r9() {
  threshold_x_high_q_r9_ = 0;
}
 ::google::protobuf::int32 rp_lte_carrier_freq_utra::threshold_x_high_q_r9() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.threshold_x_high_q_r9)
  return threshold_x_high_q_r9_;
}
 void rp_lte_carrier_freq_utra::set_threshold_x_high_q_r9(::google::protobuf::int32 value) {
  
  threshold_x_high_q_r9_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.threshold_x_high_q_r9)
}

// optional int32 cell_reselection_priority = 6;
void rp_lte_carrier_freq_utra::clear_cell_reselection_priority() {
  cell_reselection_priority_ = 0;
}
 ::google::protobuf::int32 rp_lte_carrier_freq_utra::cell_reselection_priority() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.cell_reselection_priority)
  return cell_reselection_priority_;
}
 void rp_lte_carrier_freq_utra::set_cell_reselection_priority(::google::protobuf::int32 value) {
  
  cell_reselection_priority_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.cell_reselection_priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_sib6::kCarrierFreqListUtraFddFieldNumber;
const int rp_lte_sib6::kCarrierFreqListUtraTddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_sib6::rp_lte_sib6()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_sib6)
}

void rp_lte_sib6::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_lte_sib6::rp_lte_sib6(const rp_lte_sib6& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_sib6)
}

void rp_lte_sib6::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

rp_lte_sib6::~rp_lte_sib6() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_sib6)
  SharedDtor();
}

void rp_lte_sib6::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_lte_sib6::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_sib6::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_sib6_descriptor_;
}

const rp_lte_sib6& rp_lte_sib6::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_sib6* rp_lte_sib6::default_instance_ = NULL;

rp_lte_sib6* rp_lte_sib6::New(::google::protobuf::Arena* arena) const {
  rp_lte_sib6* n = new rp_lte_sib6;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_sib6::Clear() {
  carrier_freq_list_utra_fdd_.Clear();
  carrier_freq_list_utra_tdd_.Clear();
}

bool rp_lte_sib6::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_sib6)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rf_phreaker.protobuf.rp_lte_carrier_freq_utra carrier_freq_list_utra_fdd = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_carrier_freq_list_utra_fdd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_carrier_freq_list_utra_fdd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_carrier_freq_list_utra_fdd;
        if (input->ExpectTag(26)) goto parse_loop_carrier_freq_list_utra_tdd;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_lte_carrier_freq_utra carrier_freq_list_utra_tdd = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_carrier_freq_list_utra_tdd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_carrier_freq_list_utra_tdd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_carrier_freq_list_utra_tdd;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_sib6)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_sib6)
  return false;
#undef DO_
}

void rp_lte_sib6::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_sib6)
  // repeated .rf_phreaker.protobuf.rp_lte_carrier_freq_utra carrier_freq_list_utra_fdd = 2;
  for (unsigned int i = 0, n = this->carrier_freq_list_utra_fdd_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->carrier_freq_list_utra_fdd(i), output);
  }

  // repeated .rf_phreaker.protobuf.rp_lte_carrier_freq_utra carrier_freq_list_utra_tdd = 3;
  for (unsigned int i = 0, n = this->carrier_freq_list_utra_tdd_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->carrier_freq_list_utra_tdd(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_sib6)
}

::google::protobuf::uint8* rp_lte_sib6::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_sib6)
  // repeated .rf_phreaker.protobuf.rp_lte_carrier_freq_utra carrier_freq_list_utra_fdd = 2;
  for (unsigned int i = 0, n = this->carrier_freq_list_utra_fdd_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->carrier_freq_list_utra_fdd(i), target);
  }

  // repeated .rf_phreaker.protobuf.rp_lte_carrier_freq_utra carrier_freq_list_utra_tdd = 3;
  for (unsigned int i = 0, n = this->carrier_freq_list_utra_tdd_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->carrier_freq_list_utra_tdd(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_sib6)
  return target;
}

int rp_lte_sib6::ByteSize() const {
  int total_size = 0;

  // repeated .rf_phreaker.protobuf.rp_lte_carrier_freq_utra carrier_freq_list_utra_fdd = 2;
  total_size += 1 * this->carrier_freq_list_utra_fdd_size();
  for (int i = 0; i < this->carrier_freq_list_utra_fdd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->carrier_freq_list_utra_fdd(i));
  }

  // repeated .rf_phreaker.protobuf.rp_lte_carrier_freq_utra carrier_freq_list_utra_tdd = 3;
  total_size += 1 * this->carrier_freq_list_utra_tdd_size();
  for (int i = 0; i < this->carrier_freq_list_utra_tdd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->carrier_freq_list_utra_tdd(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_sib6::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_sib6* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_sib6>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_sib6::MergeFrom(const rp_lte_sib6& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  carrier_freq_list_utra_fdd_.MergeFrom(from.carrier_freq_list_utra_fdd_);
  carrier_freq_list_utra_tdd_.MergeFrom(from.carrier_freq_list_utra_tdd_);
}

void rp_lte_sib6::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_sib6::CopyFrom(const rp_lte_sib6& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_sib6::IsInitialized() const {

  return true;
}

void rp_lte_sib6::Swap(rp_lte_sib6* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_sib6::InternalSwap(rp_lte_sib6* other) {
  carrier_freq_list_utra_fdd_.UnsafeArenaSwap(&other->carrier_freq_list_utra_fdd_);
  carrier_freq_list_utra_tdd_.UnsafeArenaSwap(&other->carrier_freq_list_utra_tdd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_sib6::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_sib6_descriptor_;
  metadata.reflection = rp_lte_sib6_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_sib6

// repeated .rf_phreaker.protobuf.rp_lte_carrier_freq_utra carrier_freq_list_utra_fdd = 2;
int rp_lte_sib6::carrier_freq_list_utra_fdd_size() const {
  return carrier_freq_list_utra_fdd_.size();
}
void rp_lte_sib6::clear_carrier_freq_list_utra_fdd() {
  carrier_freq_list_utra_fdd_.Clear();
}
const ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra& rp_lte_sib6::carrier_freq_list_utra_fdd(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_fdd)
  return carrier_freq_list_utra_fdd_.Get(index);
}
::rf_phreaker::protobuf::rp_lte_carrier_freq_utra* rp_lte_sib6::mutable_carrier_freq_list_utra_fdd(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_fdd)
  return carrier_freq_list_utra_fdd_.Mutable(index);
}
::rf_phreaker::protobuf::rp_lte_carrier_freq_utra* rp_lte_sib6::add_carrier_freq_list_utra_fdd() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_fdd)
  return carrier_freq_list_utra_fdd_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra >*
rp_lte_sib6::mutable_carrier_freq_list_utra_fdd() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_fdd)
  return &carrier_freq_list_utra_fdd_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra >&
rp_lte_sib6::carrier_freq_list_utra_fdd() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_fdd)
  return carrier_freq_list_utra_fdd_;
}

// repeated .rf_phreaker.protobuf.rp_lte_carrier_freq_utra carrier_freq_list_utra_tdd = 3;
int rp_lte_sib6::carrier_freq_list_utra_tdd_size() const {
  return carrier_freq_list_utra_tdd_.size();
}
void rp_lte_sib6::clear_carrier_freq_list_utra_tdd() {
  carrier_freq_list_utra_tdd_.Clear();
}
const ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra& rp_lte_sib6::carrier_freq_list_utra_tdd(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_tdd)
  return carrier_freq_list_utra_tdd_.Get(index);
}
::rf_phreaker::protobuf::rp_lte_carrier_freq_utra* rp_lte_sib6::mutable_carrier_freq_list_utra_tdd(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_tdd)
  return carrier_freq_list_utra_tdd_.Mutable(index);
}
::rf_phreaker::protobuf::rp_lte_carrier_freq_utra* rp_lte_sib6::add_carrier_freq_list_utra_tdd() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_tdd)
  return carrier_freq_list_utra_tdd_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra >*
rp_lte_sib6::mutable_carrier_freq_list_utra_tdd() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_tdd)
  return &carrier_freq_list_utra_tdd_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra >&
rp_lte_sib6::carrier_freq_list_utra_tdd() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_tdd)
  return carrier_freq_list_utra_tdd_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_carrier_freqs_geran::kBandIndicatorFieldNumber;
const int rp_lte_carrier_freqs_geran::kArfcnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_carrier_freqs_geran::rp_lte_carrier_freqs_geran()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran)
}

void rp_lte_carrier_freqs_geran::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_lte_carrier_freqs_geran::rp_lte_carrier_freqs_geran(const rp_lte_carrier_freqs_geran& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran)
}

void rp_lte_carrier_freqs_geran::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  band_indicator_ = 0;
}

rp_lte_carrier_freqs_geran::~rp_lte_carrier_freqs_geran() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran)
  SharedDtor();
}

void rp_lte_carrier_freqs_geran::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_lte_carrier_freqs_geran::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_carrier_freqs_geran::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_carrier_freqs_geran_descriptor_;
}

const rp_lte_carrier_freqs_geran& rp_lte_carrier_freqs_geran::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_carrier_freqs_geran* rp_lte_carrier_freqs_geran::default_instance_ = NULL;

rp_lte_carrier_freqs_geran* rp_lte_carrier_freqs_geran::New(::google::protobuf::Arena* arena) const {
  rp_lte_carrier_freqs_geran* n = new rp_lte_carrier_freqs_geran;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_carrier_freqs_geran::Clear() {
  band_indicator_ = 0;
  arfcns_.Clear();
}

bool rp_lte_carrier_freqs_geran::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_band_indicator(static_cast< ::rf_phreaker::protobuf::rp_band_indicator_type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arfcns;
        break;
      }

      // repeated int32 arfcns = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_arfcns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arfcns())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_arfcns())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran)
  return false;
#undef DO_
}

void rp_lte_carrier_freqs_geran::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran)
  // optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 1;
  if (this->band_indicator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->band_indicator(), output);
  }

  // repeated int32 arfcns = 2 [packed = true];
  if (this->arfcns_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_arfcns_cached_byte_size_);
  }
  for (int i = 0; i < this->arfcns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->arfcns(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran)
}

::google::protobuf::uint8* rp_lte_carrier_freqs_geran::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran)
  // optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 1;
  if (this->band_indicator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->band_indicator(), target);
  }

  // repeated int32 arfcns = 2 [packed = true];
  if (this->arfcns_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _arfcns_cached_byte_size_, target);
  }
  for (int i = 0; i < this->arfcns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->arfcns(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran)
  return target;
}

int rp_lte_carrier_freqs_geran::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 1;
  if (this->band_indicator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->band_indicator());
  }

  // repeated int32 arfcns = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->arfcns_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->arfcns(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _arfcns_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_carrier_freqs_geran::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_carrier_freqs_geran* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_carrier_freqs_geran>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_carrier_freqs_geran::MergeFrom(const rp_lte_carrier_freqs_geran& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  arfcns_.MergeFrom(from.arfcns_);
  if (from.band_indicator() != 0) {
    set_band_indicator(from.band_indicator());
  }
}

void rp_lte_carrier_freqs_geran::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_carrier_freqs_geran::CopyFrom(const rp_lte_carrier_freqs_geran& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_carrier_freqs_geran::IsInitialized() const {

  return true;
}

void rp_lte_carrier_freqs_geran::Swap(rp_lte_carrier_freqs_geran* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_carrier_freqs_geran::InternalSwap(rp_lte_carrier_freqs_geran* other) {
  std::swap(band_indicator_, other->band_indicator_);
  arfcns_.UnsafeArenaSwap(&other->arfcns_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_carrier_freqs_geran::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_carrier_freqs_geran_descriptor_;
  metadata.reflection = rp_lte_carrier_freqs_geran_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_carrier_freqs_geran

// optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 1;
void rp_lte_carrier_freqs_geran::clear_band_indicator() {
  band_indicator_ = 0;
}
 ::rf_phreaker::protobuf::rp_band_indicator_type rp_lte_carrier_freqs_geran::band_indicator() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran.band_indicator)
  return static_cast< ::rf_phreaker::protobuf::rp_band_indicator_type >(band_indicator_);
}
 void rp_lte_carrier_freqs_geran::set_band_indicator(::rf_phreaker::protobuf::rp_band_indicator_type value) {
  
  band_indicator_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran.band_indicator)
}

// repeated int32 arfcns = 2 [packed = true];
int rp_lte_carrier_freqs_geran::arfcns_size() const {
  return arfcns_.size();
}
void rp_lte_carrier_freqs_geran::clear_arfcns() {
  arfcns_.Clear();
}
 ::google::protobuf::int32 rp_lte_carrier_freqs_geran::arfcns(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran.arfcns)
  return arfcns_.Get(index);
}
 void rp_lte_carrier_freqs_geran::set_arfcns(int index, ::google::protobuf::int32 value) {
  arfcns_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran.arfcns)
}
 void rp_lte_carrier_freqs_geran::add_arfcns(::google::protobuf::int32 value) {
  arfcns_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran.arfcns)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_lte_carrier_freqs_geran::arfcns() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran.arfcns)
  return arfcns_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_lte_carrier_freqs_geran::mutable_arfcns() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran.arfcns)
  return &arfcns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_geran_common_info::kCellReselectionPriorityFieldNumber;
const int rp_lte_geran_common_info::kThresholdXHighFieldNumber;
const int rp_lte_geran_common_info::kThresholdXLowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_geran_common_info::rp_lte_geran_common_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_geran_common_info)
}

void rp_lte_geran_common_info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_lte_geran_common_info::rp_lte_geran_common_info(const rp_lte_geran_common_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_geran_common_info)
}

void rp_lte_geran_common_info::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cell_reselection_priority_ = 0;
  threshold_x_high_ = 0;
  threshold_x_low_ = 0;
}

rp_lte_geran_common_info::~rp_lte_geran_common_info() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_geran_common_info)
  SharedDtor();
}

void rp_lte_geran_common_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_lte_geran_common_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_geran_common_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_geran_common_info_descriptor_;
}

const rp_lte_geran_common_info& rp_lte_geran_common_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_geran_common_info* rp_lte_geran_common_info::default_instance_ = NULL;

rp_lte_geran_common_info* rp_lte_geran_common_info::New(::google::protobuf::Arena* arena) const {
  rp_lte_geran_common_info* n = new rp_lte_geran_common_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_geran_common_info::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_lte_geran_common_info*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cell_reselection_priority_, threshold_x_low_);

#undef ZR_HELPER_
#undef ZR_

}

bool rp_lte_geran_common_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_geran_common_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cell_reselection_priority = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_reselection_priority_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_threshold_x_high;
        break;
      }

      // optional int32 threshold_x_high = 2;
      case 2: {
        if (tag == 16) {
         parse_threshold_x_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_x_high_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_threshold_x_low;
        break;
      }

      // optional int32 threshold_x_low = 3;
      case 3: {
        if (tag == 24) {
         parse_threshold_x_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_x_low_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_geran_common_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_geran_common_info)
  return false;
#undef DO_
}

void rp_lte_geran_common_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_geran_common_info)
  // optional int32 cell_reselection_priority = 1;
  if (this->cell_reselection_priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cell_reselection_priority(), output);
  }

  // optional int32 threshold_x_high = 2;
  if (this->threshold_x_high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->threshold_x_high(), output);
  }

  // optional int32 threshold_x_low = 3;
  if (this->threshold_x_low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->threshold_x_low(), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_geran_common_info)
}

::google::protobuf::uint8* rp_lte_geran_common_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_geran_common_info)
  // optional int32 cell_reselection_priority = 1;
  if (this->cell_reselection_priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cell_reselection_priority(), target);
  }

  // optional int32 threshold_x_high = 2;
  if (this->threshold_x_high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->threshold_x_high(), target);
  }

  // optional int32 threshold_x_low = 3;
  if (this->threshold_x_low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->threshold_x_low(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_geran_common_info)
  return target;
}

int rp_lte_geran_common_info::ByteSize() const {
  int total_size = 0;

  // optional int32 cell_reselection_priority = 1;
  if (this->cell_reselection_priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cell_reselection_priority());
  }

  // optional int32 threshold_x_high = 2;
  if (this->threshold_x_high() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshold_x_high());
  }

  // optional int32 threshold_x_low = 3;
  if (this->threshold_x_low() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshold_x_low());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_geran_common_info::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_geran_common_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_geran_common_info>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_geran_common_info::MergeFrom(const rp_lte_geran_common_info& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.cell_reselection_priority() != 0) {
    set_cell_reselection_priority(from.cell_reselection_priority());
  }
  if (from.threshold_x_high() != 0) {
    set_threshold_x_high(from.threshold_x_high());
  }
  if (from.threshold_x_low() != 0) {
    set_threshold_x_low(from.threshold_x_low());
  }
}

void rp_lte_geran_common_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_geran_common_info::CopyFrom(const rp_lte_geran_common_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_geran_common_info::IsInitialized() const {

  return true;
}

void rp_lte_geran_common_info::Swap(rp_lte_geran_common_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_geran_common_info::InternalSwap(rp_lte_geran_common_info* other) {
  std::swap(cell_reselection_priority_, other->cell_reselection_priority_);
  std::swap(threshold_x_high_, other->threshold_x_high_);
  std::swap(threshold_x_low_, other->threshold_x_low_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_geran_common_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_geran_common_info_descriptor_;
  metadata.reflection = rp_lte_geran_common_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_geran_common_info

// optional int32 cell_reselection_priority = 1;
void rp_lte_geran_common_info::clear_cell_reselection_priority() {
  cell_reselection_priority_ = 0;
}
 ::google::protobuf::int32 rp_lte_geran_common_info::cell_reselection_priority() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_geran_common_info.cell_reselection_priority)
  return cell_reselection_priority_;
}
 void rp_lte_geran_common_info::set_cell_reselection_priority(::google::protobuf::int32 value) {
  
  cell_reselection_priority_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_geran_common_info.cell_reselection_priority)
}

// optional int32 threshold_x_high = 2;
void rp_lte_geran_common_info::clear_threshold_x_high() {
  threshold_x_high_ = 0;
}
 ::google::protobuf::int32 rp_lte_geran_common_info::threshold_x_high() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_geran_common_info.threshold_x_high)
  return threshold_x_high_;
}
 void rp_lte_geran_common_info::set_threshold_x_high(::google::protobuf::int32 value) {
  
  threshold_x_high_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_geran_common_info.threshold_x_high)
}

// optional int32 threshold_x_low = 3;
void rp_lte_geran_common_info::clear_threshold_x_low() {
  threshold_x_low_ = 0;
}
 ::google::protobuf::int32 rp_lte_geran_common_info::threshold_x_low() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_geran_common_info.threshold_x_low)
  return threshold_x_low_;
}
 void rp_lte_geran_common_info::set_threshold_x_low(::google::protobuf::int32 value) {
  
  threshold_x_low_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_geran_common_info.threshold_x_low)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_carrier_freqs_info_geran::kCarrierFreqsFieldNumber;
const int rp_lte_carrier_freqs_info_geran::kCommonInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_carrier_freqs_info_geran::rp_lte_carrier_freqs_info_geran()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran)
}

void rp_lte_carrier_freqs_info_geran::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  carrier_freqs_ = const_cast< ::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran*>(&::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran::default_instance());
  common_info_ = const_cast< ::rf_phreaker::protobuf::rp_lte_geran_common_info*>(&::rf_phreaker::protobuf::rp_lte_geran_common_info::default_instance());
}

rp_lte_carrier_freqs_info_geran::rp_lte_carrier_freqs_info_geran(const rp_lte_carrier_freqs_info_geran& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran)
}

void rp_lte_carrier_freqs_info_geran::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  carrier_freqs_ = NULL;
  common_info_ = NULL;
}

rp_lte_carrier_freqs_info_geran::~rp_lte_carrier_freqs_info_geran() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran)
  SharedDtor();
}

void rp_lte_carrier_freqs_info_geran::SharedDtor() {
  if (this != default_instance_) {
    delete carrier_freqs_;
    delete common_info_;
  }
}

void rp_lte_carrier_freqs_info_geran::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_carrier_freqs_info_geran::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_carrier_freqs_info_geran_descriptor_;
}

const rp_lte_carrier_freqs_info_geran& rp_lte_carrier_freqs_info_geran::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_carrier_freqs_info_geran* rp_lte_carrier_freqs_info_geran::default_instance_ = NULL;

rp_lte_carrier_freqs_info_geran* rp_lte_carrier_freqs_info_geran::New(::google::protobuf::Arena* arena) const {
  rp_lte_carrier_freqs_info_geran* n = new rp_lte_carrier_freqs_info_geran;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_carrier_freqs_info_geran::Clear() {
  if (GetArenaNoVirtual() == NULL && carrier_freqs_ != NULL) delete carrier_freqs_;
  carrier_freqs_ = NULL;
  if (GetArenaNoVirtual() == NULL && common_info_ != NULL) delete common_info_;
  common_info_ = NULL;
}

bool rp_lte_carrier_freqs_info_geran::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_lte_carrier_freqs_geran carrier_freqs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_carrier_freqs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_common_info;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_lte_geran_common_info common_info = 2;
      case 2: {
        if (tag == 18) {
         parse_common_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran)
  return false;
#undef DO_
}

void rp_lte_carrier_freqs_info_geran::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran)
  // optional .rf_phreaker.protobuf.rp_lte_carrier_freqs_geran carrier_freqs = 1;
  if (this->has_carrier_freqs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->carrier_freqs_, output);
  }

  // optional .rf_phreaker.protobuf.rp_lte_geran_common_info common_info = 2;
  if (this->has_common_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->common_info_, output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran)
}

::google::protobuf::uint8* rp_lte_carrier_freqs_info_geran::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran)
  // optional .rf_phreaker.protobuf.rp_lte_carrier_freqs_geran carrier_freqs = 1;
  if (this->has_carrier_freqs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->carrier_freqs_, target);
  }

  // optional .rf_phreaker.protobuf.rp_lte_geran_common_info common_info = 2;
  if (this->has_common_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->common_info_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran)
  return target;
}

int rp_lte_carrier_freqs_info_geran::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_lte_carrier_freqs_geran carrier_freqs = 1;
  if (this->has_carrier_freqs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->carrier_freqs_);
  }

  // optional .rf_phreaker.protobuf.rp_lte_geran_common_info common_info = 2;
  if (this->has_common_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_info_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_carrier_freqs_info_geran::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_carrier_freqs_info_geran* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_carrier_freqs_info_geran>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_carrier_freqs_info_geran::MergeFrom(const rp_lte_carrier_freqs_info_geran& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_carrier_freqs()) {
    mutable_carrier_freqs()->::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran::MergeFrom(from.carrier_freqs());
  }
  if (from.has_common_info()) {
    mutable_common_info()->::rf_phreaker::protobuf::rp_lte_geran_common_info::MergeFrom(from.common_info());
  }
}

void rp_lte_carrier_freqs_info_geran::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_carrier_freqs_info_geran::CopyFrom(const rp_lte_carrier_freqs_info_geran& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_carrier_freqs_info_geran::IsInitialized() const {

  return true;
}

void rp_lte_carrier_freqs_info_geran::Swap(rp_lte_carrier_freqs_info_geran* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_carrier_freqs_info_geran::InternalSwap(rp_lte_carrier_freqs_info_geran* other) {
  std::swap(carrier_freqs_, other->carrier_freqs_);
  std::swap(common_info_, other->common_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_carrier_freqs_info_geran::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_carrier_freqs_info_geran_descriptor_;
  metadata.reflection = rp_lte_carrier_freqs_info_geran_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_carrier_freqs_info_geran

// optional .rf_phreaker.protobuf.rp_lte_carrier_freqs_geran carrier_freqs = 1;
bool rp_lte_carrier_freqs_info_geran::has_carrier_freqs() const {
  return !_is_default_instance_ && carrier_freqs_ != NULL;
}
void rp_lte_carrier_freqs_info_geran::clear_carrier_freqs() {
  if (GetArenaNoVirtual() == NULL && carrier_freqs_ != NULL) delete carrier_freqs_;
  carrier_freqs_ = NULL;
}
const ::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran& rp_lte_carrier_freqs_info_geran::carrier_freqs() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran.carrier_freqs)
  return carrier_freqs_ != NULL ? *carrier_freqs_ : *default_instance_->carrier_freqs_;
}
::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran* rp_lte_carrier_freqs_info_geran::mutable_carrier_freqs() {
  
  if (carrier_freqs_ == NULL) {
    carrier_freqs_ = new ::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran.carrier_freqs)
  return carrier_freqs_;
}
::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran* rp_lte_carrier_freqs_info_geran::release_carrier_freqs() {
  
  ::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran* temp = carrier_freqs_;
  carrier_freqs_ = NULL;
  return temp;
}
void rp_lte_carrier_freqs_info_geran::set_allocated_carrier_freqs(::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran* carrier_freqs) {
  delete carrier_freqs_;
  carrier_freqs_ = carrier_freqs;
  if (carrier_freqs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran.carrier_freqs)
}

// optional .rf_phreaker.protobuf.rp_lte_geran_common_info common_info = 2;
bool rp_lte_carrier_freqs_info_geran::has_common_info() const {
  return !_is_default_instance_ && common_info_ != NULL;
}
void rp_lte_carrier_freqs_info_geran::clear_common_info() {
  if (GetArenaNoVirtual() == NULL && common_info_ != NULL) delete common_info_;
  common_info_ = NULL;
}
const ::rf_phreaker::protobuf::rp_lte_geran_common_info& rp_lte_carrier_freqs_info_geran::common_info() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran.common_info)
  return common_info_ != NULL ? *common_info_ : *default_instance_->common_info_;
}
::rf_phreaker::protobuf::rp_lte_geran_common_info* rp_lte_carrier_freqs_info_geran::mutable_common_info() {
  
  if (common_info_ == NULL) {
    common_info_ = new ::rf_phreaker::protobuf::rp_lte_geran_common_info;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran.common_info)
  return common_info_;
}
::rf_phreaker::protobuf::rp_lte_geran_common_info* rp_lte_carrier_freqs_info_geran::release_common_info() {
  
  ::rf_phreaker::protobuf::rp_lte_geran_common_info* temp = common_info_;
  common_info_ = NULL;
  return temp;
}
void rp_lte_carrier_freqs_info_geran::set_allocated_common_info(::rf_phreaker::protobuf::rp_lte_geran_common_info* common_info) {
  delete common_info_;
  common_info_ = common_info;
  if (common_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran.common_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_sib7::kCarrierFreqsInfoListGeranFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_sib7::rp_lte_sib7()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_sib7)
}

void rp_lte_sib7::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_lte_sib7::rp_lte_sib7(const rp_lte_sib7& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_sib7)
}

void rp_lte_sib7::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

rp_lte_sib7::~rp_lte_sib7() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_sib7)
  SharedDtor();
}

void rp_lte_sib7::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_lte_sib7::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_sib7::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_sib7_descriptor_;
}

const rp_lte_sib7& rp_lte_sib7::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_sib7* rp_lte_sib7::default_instance_ = NULL;

rp_lte_sib7* rp_lte_sib7::New(::google::protobuf::Arena* arena) const {
  rp_lte_sib7* n = new rp_lte_sib7;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_sib7::Clear() {
  carrier_freqs_info_list_geran_.Clear();
}

bool rp_lte_sib7::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_sib7)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran carrier_freqs_info_list_geran = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_carrier_freqs_info_list_geran:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_carrier_freqs_info_list_geran()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_carrier_freqs_info_list_geran;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_sib7)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_sib7)
  return false;
#undef DO_
}

void rp_lte_sib7::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_sib7)
  // repeated .rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran carrier_freqs_info_list_geran = 2;
  for (unsigned int i = 0, n = this->carrier_freqs_info_list_geran_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->carrier_freqs_info_list_geran(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_sib7)
}

::google::protobuf::uint8* rp_lte_sib7::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_sib7)
  // repeated .rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran carrier_freqs_info_list_geran = 2;
  for (unsigned int i = 0, n = this->carrier_freqs_info_list_geran_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->carrier_freqs_info_list_geran(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_sib7)
  return target;
}

int rp_lte_sib7::ByteSize() const {
  int total_size = 0;

  // repeated .rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran carrier_freqs_info_list_geran = 2;
  total_size += 1 * this->carrier_freqs_info_list_geran_size();
  for (int i = 0; i < this->carrier_freqs_info_list_geran_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->carrier_freqs_info_list_geran(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_sib7::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_sib7* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_sib7>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_sib7::MergeFrom(const rp_lte_sib7& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  carrier_freqs_info_list_geran_.MergeFrom(from.carrier_freqs_info_list_geran_);
}

void rp_lte_sib7::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_sib7::CopyFrom(const rp_lte_sib7& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_sib7::IsInitialized() const {

  return true;
}

void rp_lte_sib7::Swap(rp_lte_sib7* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_sib7::InternalSwap(rp_lte_sib7* other) {
  carrier_freqs_info_list_geran_.UnsafeArenaSwap(&other->carrier_freqs_info_list_geran_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_sib7::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_sib7_descriptor_;
  metadata.reflection = rp_lte_sib7_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_sib7

// repeated .rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran carrier_freqs_info_list_geran = 2;
int rp_lte_sib7::carrier_freqs_info_list_geran_size() const {
  return carrier_freqs_info_list_geran_.size();
}
void rp_lte_sib7::clear_carrier_freqs_info_list_geran() {
  carrier_freqs_info_list_geran_.Clear();
}
const ::rf_phreaker::protobuf::rp_lte_carrier_freqs_info_geran& rp_lte_sib7::carrier_freqs_info_list_geran(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib7.carrier_freqs_info_list_geran)
  return carrier_freqs_info_list_geran_.Get(index);
}
::rf_phreaker::protobuf::rp_lte_carrier_freqs_info_geran* rp_lte_sib7::mutable_carrier_freqs_info_list_geran(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib7.carrier_freqs_info_list_geran)
  return carrier_freqs_info_list_geran_.Mutable(index);
}
::rf_phreaker::protobuf::rp_lte_carrier_freqs_info_geran* rp_lte_sib7::add_carrier_freqs_info_list_geran() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_sib7.carrier_freqs_info_list_geran)
  return carrier_freqs_info_list_geran_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freqs_info_geran >*
rp_lte_sib7::mutable_carrier_freqs_info_list_geran() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_sib7.carrier_freqs_info_list_geran)
  return &carrier_freqs_info_list_geran_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freqs_info_geran >&
rp_lte_sib7::carrier_freqs_info_list_geran() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_sib7.carrier_freqs_info_list_geran)
  return carrier_freqs_info_list_geran_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_neighbor_cells_per_band_class_cdma_2000::kArfcnValueCdma2000FieldNumber;
const int rp_lte_neighbor_cells_per_band_class_cdma_2000::kPhysicalCellIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_neighbor_cells_per_band_class_cdma_2000::rp_lte_neighbor_cells_per_band_class_cdma_2000()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000)
}

void rp_lte_neighbor_cells_per_band_class_cdma_2000::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_lte_neighbor_cells_per_band_class_cdma_2000::rp_lte_neighbor_cells_per_band_class_cdma_2000(const rp_lte_neighbor_cells_per_band_class_cdma_2000& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000)
}

void rp_lte_neighbor_cells_per_band_class_cdma_2000::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  arfcn_value_cdma_2000_ = 0;
}

rp_lte_neighbor_cells_per_band_class_cdma_2000::~rp_lte_neighbor_cells_per_band_class_cdma_2000() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000)
  SharedDtor();
}

void rp_lte_neighbor_cells_per_band_class_cdma_2000::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_lte_neighbor_cells_per_band_class_cdma_2000::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_neighbor_cells_per_band_class_cdma_2000::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_neighbor_cells_per_band_class_cdma_2000_descriptor_;
}

const rp_lte_neighbor_cells_per_band_class_cdma_2000& rp_lte_neighbor_cells_per_band_class_cdma_2000::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_neighbor_cells_per_band_class_cdma_2000* rp_lte_neighbor_cells_per_band_class_cdma_2000::default_instance_ = NULL;

rp_lte_neighbor_cells_per_band_class_cdma_2000* rp_lte_neighbor_cells_per_band_class_cdma_2000::New(::google::protobuf::Arena* arena) const {
  rp_lte_neighbor_cells_per_band_class_cdma_2000* n = new rp_lte_neighbor_cells_per_band_class_cdma_2000;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_neighbor_cells_per_band_class_cdma_2000::Clear() {
  arfcn_value_cdma_2000_ = 0;
  physical_cell_ids_.Clear();
}

bool rp_lte_neighbor_cells_per_band_class_cdma_2000::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 arfcn_value_cdma_2000 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arfcn_value_cdma_2000_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_physical_cell_ids;
        break;
      }

      // repeated int32 physical_cell_ids = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_physical_cell_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_physical_cell_ids())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_physical_cell_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000)
  return false;
#undef DO_
}

void rp_lte_neighbor_cells_per_band_class_cdma_2000::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000)
  // optional int32 arfcn_value_cdma_2000 = 1;
  if (this->arfcn_value_cdma_2000() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->arfcn_value_cdma_2000(), output);
  }

  // repeated int32 physical_cell_ids = 2 [packed = true];
  if (this->physical_cell_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_physical_cell_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->physical_cell_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->physical_cell_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000)
}

::google::protobuf::uint8* rp_lte_neighbor_cells_per_band_class_cdma_2000::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000)
  // optional int32 arfcn_value_cdma_2000 = 1;
  if (this->arfcn_value_cdma_2000() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->arfcn_value_cdma_2000(), target);
  }

  // repeated int32 physical_cell_ids = 2 [packed = true];
  if (this->physical_cell_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _physical_cell_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->physical_cell_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->physical_cell_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000)
  return target;
}

int rp_lte_neighbor_cells_per_band_class_cdma_2000::ByteSize() const {
  int total_size = 0;

  // optional int32 arfcn_value_cdma_2000 = 1;
  if (this->arfcn_value_cdma_2000() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->arfcn_value_cdma_2000());
  }

  // repeated int32 physical_cell_ids = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->physical_cell_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->physical_cell_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _physical_cell_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_neighbor_cells_per_band_class_cdma_2000::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_neighbor_cells_per_band_class_cdma_2000* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_neighbor_cells_per_band_class_cdma_2000>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_neighbor_cells_per_band_class_cdma_2000::MergeFrom(const rp_lte_neighbor_cells_per_band_class_cdma_2000& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  physical_cell_ids_.MergeFrom(from.physical_cell_ids_);
  if (from.arfcn_value_cdma_2000() != 0) {
    set_arfcn_value_cdma_2000(from.arfcn_value_cdma_2000());
  }
}

void rp_lte_neighbor_cells_per_band_class_cdma_2000::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_neighbor_cells_per_band_class_cdma_2000::CopyFrom(const rp_lte_neighbor_cells_per_band_class_cdma_2000& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_neighbor_cells_per_band_class_cdma_2000::IsInitialized() const {

  return true;
}

void rp_lte_neighbor_cells_per_band_class_cdma_2000::Swap(rp_lte_neighbor_cells_per_band_class_cdma_2000* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_neighbor_cells_per_band_class_cdma_2000::InternalSwap(rp_lte_neighbor_cells_per_band_class_cdma_2000* other) {
  std::swap(arfcn_value_cdma_2000_, other->arfcn_value_cdma_2000_);
  physical_cell_ids_.UnsafeArenaSwap(&other->physical_cell_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_neighbor_cells_per_band_class_cdma_2000::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_neighbor_cells_per_band_class_cdma_2000_descriptor_;
  metadata.reflection = rp_lte_neighbor_cells_per_band_class_cdma_2000_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_neighbor_cells_per_band_class_cdma_2000

// optional int32 arfcn_value_cdma_2000 = 1;
void rp_lte_neighbor_cells_per_band_class_cdma_2000::clear_arfcn_value_cdma_2000() {
  arfcn_value_cdma_2000_ = 0;
}
 ::google::protobuf::int32 rp_lte_neighbor_cells_per_band_class_cdma_2000::arfcn_value_cdma_2000() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000.arfcn_value_cdma_2000)
  return arfcn_value_cdma_2000_;
}
 void rp_lte_neighbor_cells_per_band_class_cdma_2000::set_arfcn_value_cdma_2000(::google::protobuf::int32 value) {
  
  arfcn_value_cdma_2000_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000.arfcn_value_cdma_2000)
}

// repeated int32 physical_cell_ids = 2 [packed = true];
int rp_lte_neighbor_cells_per_band_class_cdma_2000::physical_cell_ids_size() const {
  return physical_cell_ids_.size();
}
void rp_lte_neighbor_cells_per_band_class_cdma_2000::clear_physical_cell_ids() {
  physical_cell_ids_.Clear();
}
 ::google::protobuf::int32 rp_lte_neighbor_cells_per_band_class_cdma_2000::physical_cell_ids(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000.physical_cell_ids)
  return physical_cell_ids_.Get(index);
}
 void rp_lte_neighbor_cells_per_band_class_cdma_2000::set_physical_cell_ids(int index, ::google::protobuf::int32 value) {
  physical_cell_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000.physical_cell_ids)
}
 void rp_lte_neighbor_cells_per_band_class_cdma_2000::add_physical_cell_ids(::google::protobuf::int32 value) {
  physical_cell_ids_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000.physical_cell_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_lte_neighbor_cells_per_band_class_cdma_2000::physical_cell_ids() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000.physical_cell_ids)
  return physical_cell_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_lte_neighbor_cells_per_band_class_cdma_2000::mutable_physical_cell_ids() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000.physical_cell_ids)
  return &physical_cell_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_neighbor_cell_cdma_2000::kBandFieldNumber;
const int rp_lte_neighbor_cell_cdma_2000::kNeighborCellsPerFreqListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_neighbor_cell_cdma_2000::rp_lte_neighbor_cell_cdma_2000()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000)
}

void rp_lte_neighbor_cell_cdma_2000::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_lte_neighbor_cell_cdma_2000::rp_lte_neighbor_cell_cdma_2000(const rp_lte_neighbor_cell_cdma_2000& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000)
}

void rp_lte_neighbor_cell_cdma_2000::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  band_ = 0;
}

rp_lte_neighbor_cell_cdma_2000::~rp_lte_neighbor_cell_cdma_2000() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000)
  SharedDtor();
}

void rp_lte_neighbor_cell_cdma_2000::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_lte_neighbor_cell_cdma_2000::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_neighbor_cell_cdma_2000::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_neighbor_cell_cdma_2000_descriptor_;
}

const rp_lte_neighbor_cell_cdma_2000& rp_lte_neighbor_cell_cdma_2000::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_neighbor_cell_cdma_2000* rp_lte_neighbor_cell_cdma_2000::default_instance_ = NULL;

rp_lte_neighbor_cell_cdma_2000* rp_lte_neighbor_cell_cdma_2000::New(::google::protobuf::Arena* arena) const {
  rp_lte_neighbor_cell_cdma_2000* n = new rp_lte_neighbor_cell_cdma_2000;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_neighbor_cell_cdma_2000::Clear() {
  band_ = 0;
  neighbor_cells_per_freq_list_.Clear();
}

bool rp_lte_neighbor_cell_cdma_2000::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_lte_band_class_cdma_2000_type band = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_band(static_cast< ::rf_phreaker::protobuf::rp_lte_band_class_cdma_2000_type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_neighbor_cells_per_freq_list;
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000 neighbor_cells_per_freq_list = 2;
      case 2: {
        if (tag == 18) {
         parse_neighbor_cells_per_freq_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_neighbor_cells_per_freq_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_neighbor_cells_per_freq_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_neighbor_cells_per_freq_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000)
  return false;
#undef DO_
}

void rp_lte_neighbor_cell_cdma_2000::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000)
  // optional .rf_phreaker.protobuf.rp_lte_band_class_cdma_2000_type band = 1;
  if (this->band() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->band(), output);
  }

  // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000 neighbor_cells_per_freq_list = 2;
  for (unsigned int i = 0, n = this->neighbor_cells_per_freq_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->neighbor_cells_per_freq_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000)
}

::google::protobuf::uint8* rp_lte_neighbor_cell_cdma_2000::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000)
  // optional .rf_phreaker.protobuf.rp_lte_band_class_cdma_2000_type band = 1;
  if (this->band() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->band(), target);
  }

  // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000 neighbor_cells_per_freq_list = 2;
  for (unsigned int i = 0, n = this->neighbor_cells_per_freq_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->neighbor_cells_per_freq_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000)
  return target;
}

int rp_lte_neighbor_cell_cdma_2000::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_lte_band_class_cdma_2000_type band = 1;
  if (this->band() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->band());
  }

  // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000 neighbor_cells_per_freq_list = 2;
  total_size += 1 * this->neighbor_cells_per_freq_list_size();
  for (int i = 0; i < this->neighbor_cells_per_freq_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->neighbor_cells_per_freq_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_neighbor_cell_cdma_2000::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_neighbor_cell_cdma_2000* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_neighbor_cell_cdma_2000>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_neighbor_cell_cdma_2000::MergeFrom(const rp_lte_neighbor_cell_cdma_2000& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  neighbor_cells_per_freq_list_.MergeFrom(from.neighbor_cells_per_freq_list_);
  if (from.band() != 0) {
    set_band(from.band());
  }
}

void rp_lte_neighbor_cell_cdma_2000::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_neighbor_cell_cdma_2000::CopyFrom(const rp_lte_neighbor_cell_cdma_2000& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_neighbor_cell_cdma_2000::IsInitialized() const {

  return true;
}

void rp_lte_neighbor_cell_cdma_2000::Swap(rp_lte_neighbor_cell_cdma_2000* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_neighbor_cell_cdma_2000::InternalSwap(rp_lte_neighbor_cell_cdma_2000* other) {
  std::swap(band_, other->band_);
  neighbor_cells_per_freq_list_.UnsafeArenaSwap(&other->neighbor_cells_per_freq_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_neighbor_cell_cdma_2000::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_neighbor_cell_cdma_2000_descriptor_;
  metadata.reflection = rp_lte_neighbor_cell_cdma_2000_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_neighbor_cell_cdma_2000

// optional .rf_phreaker.protobuf.rp_lte_band_class_cdma_2000_type band = 1;
void rp_lte_neighbor_cell_cdma_2000::clear_band() {
  band_ = 0;
}
 ::rf_phreaker::protobuf::rp_lte_band_class_cdma_2000_type rp_lte_neighbor_cell_cdma_2000::band() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000.band)
  return static_cast< ::rf_phreaker::protobuf::rp_lte_band_class_cdma_2000_type >(band_);
}
 void rp_lte_neighbor_cell_cdma_2000::set_band(::rf_phreaker::protobuf::rp_lte_band_class_cdma_2000_type value) {
  
  band_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000.band)
}

// repeated .rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000 neighbor_cells_per_freq_list = 2;
int rp_lte_neighbor_cell_cdma_2000::neighbor_cells_per_freq_list_size() const {
  return neighbor_cells_per_freq_list_.size();
}
void rp_lte_neighbor_cell_cdma_2000::clear_neighbor_cells_per_freq_list() {
  neighbor_cells_per_freq_list_.Clear();
}
const ::rf_phreaker::protobuf::rp_lte_neighbor_cells_per_band_class_cdma_2000& rp_lte_neighbor_cell_cdma_2000::neighbor_cells_per_freq_list(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000.neighbor_cells_per_freq_list)
  return neighbor_cells_per_freq_list_.Get(index);
}
::rf_phreaker::protobuf::rp_lte_neighbor_cells_per_band_class_cdma_2000* rp_lte_neighbor_cell_cdma_2000::mutable_neighbor_cells_per_freq_list(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000.neighbor_cells_per_freq_list)
  return neighbor_cells_per_freq_list_.Mutable(index);
}
::rf_phreaker::protobuf::rp_lte_neighbor_cells_per_band_class_cdma_2000* rp_lte_neighbor_cell_cdma_2000::add_neighbor_cells_per_freq_list() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000.neighbor_cells_per_freq_list)
  return neighbor_cells_per_freq_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cells_per_band_class_cdma_2000 >*
rp_lte_neighbor_cell_cdma_2000::mutable_neighbor_cells_per_freq_list() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000.neighbor_cells_per_freq_list)
  return &neighbor_cells_per_freq_list_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cells_per_band_class_cdma_2000 >&
rp_lte_neighbor_cell_cdma_2000::neighbor_cells_per_freq_list() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000.neighbor_cells_per_freq_list)
  return neighbor_cells_per_freq_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_cell_reselection_parameters_cmda_2000::kNeighborCellListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_cell_reselection_parameters_cmda_2000::rp_lte_cell_reselection_parameters_cmda_2000()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000)
}

void rp_lte_cell_reselection_parameters_cmda_2000::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rp_lte_cell_reselection_parameters_cmda_2000::rp_lte_cell_reselection_parameters_cmda_2000(const rp_lte_cell_reselection_parameters_cmda_2000& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000)
}

void rp_lte_cell_reselection_parameters_cmda_2000::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

rp_lte_cell_reselection_parameters_cmda_2000::~rp_lte_cell_reselection_parameters_cmda_2000() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000)
  SharedDtor();
}

void rp_lte_cell_reselection_parameters_cmda_2000::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rp_lte_cell_reselection_parameters_cmda_2000::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_cell_reselection_parameters_cmda_2000::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_cell_reselection_parameters_cmda_2000_descriptor_;
}

const rp_lte_cell_reselection_parameters_cmda_2000& rp_lte_cell_reselection_parameters_cmda_2000::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_cell_reselection_parameters_cmda_2000* rp_lte_cell_reselection_parameters_cmda_2000::default_instance_ = NULL;

rp_lte_cell_reselection_parameters_cmda_2000* rp_lte_cell_reselection_parameters_cmda_2000::New(::google::protobuf::Arena* arena) const {
  rp_lte_cell_reselection_parameters_cmda_2000* n = new rp_lte_cell_reselection_parameters_cmda_2000;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_cell_reselection_parameters_cmda_2000::Clear() {
  neighbor_cell_list_.Clear();
}

bool rp_lte_cell_reselection_parameters_cmda_2000::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000 neighbor_cell_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_neighbor_cell_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_neighbor_cell_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_neighbor_cell_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000)
  return false;
#undef DO_
}

void rp_lte_cell_reselection_parameters_cmda_2000::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000)
  // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000 neighbor_cell_list = 1;
  for (unsigned int i = 0, n = this->neighbor_cell_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->neighbor_cell_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000)
}

::google::protobuf::uint8* rp_lte_cell_reselection_parameters_cmda_2000::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000)
  // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000 neighbor_cell_list = 1;
  for (unsigned int i = 0, n = this->neighbor_cell_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->neighbor_cell_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000)
  return target;
}

int rp_lte_cell_reselection_parameters_cmda_2000::ByteSize() const {
  int total_size = 0;

  // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000 neighbor_cell_list = 1;
  total_size += 1 * this->neighbor_cell_list_size();
  for (int i = 0; i < this->neighbor_cell_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->neighbor_cell_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_cell_reselection_parameters_cmda_2000::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_cell_reselection_parameters_cmda_2000* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_cell_reselection_parameters_cmda_2000>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_cell_reselection_parameters_cmda_2000::MergeFrom(const rp_lte_cell_reselection_parameters_cmda_2000& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  neighbor_cell_list_.MergeFrom(from.neighbor_cell_list_);
}

void rp_lte_cell_reselection_parameters_cmda_2000::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_cell_reselection_parameters_cmda_2000::CopyFrom(const rp_lte_cell_reselection_parameters_cmda_2000& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_cell_reselection_parameters_cmda_2000::IsInitialized() const {

  return true;
}

void rp_lte_cell_reselection_parameters_cmda_2000::Swap(rp_lte_cell_reselection_parameters_cmda_2000* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_cell_reselection_parameters_cmda_2000::InternalSwap(rp_lte_cell_reselection_parameters_cmda_2000* other) {
  neighbor_cell_list_.UnsafeArenaSwap(&other->neighbor_cell_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_cell_reselection_parameters_cmda_2000::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_cell_reselection_parameters_cmda_2000_descriptor_;
  metadata.reflection = rp_lte_cell_reselection_parameters_cmda_2000_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_cell_reselection_parameters_cmda_2000

// repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000 neighbor_cell_list = 1;
int rp_lte_cell_reselection_parameters_cmda_2000::neighbor_cell_list_size() const {
  return neighbor_cell_list_.size();
}
void rp_lte_cell_reselection_parameters_cmda_2000::clear_neighbor_cell_list() {
  neighbor_cell_list_.Clear();
}
const ::rf_phreaker::protobuf::rp_lte_neighbor_cell_cdma_2000& rp_lte_cell_reselection_parameters_cmda_2000::neighbor_cell_list(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000.neighbor_cell_list)
  return neighbor_cell_list_.Get(index);
}
::rf_phreaker::protobuf::rp_lte_neighbor_cell_cdma_2000* rp_lte_cell_reselection_parameters_cmda_2000::mutable_neighbor_cell_list(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000.neighbor_cell_list)
  return neighbor_cell_list_.Mutable(index);
}
::rf_phreaker::protobuf::rp_lte_neighbor_cell_cdma_2000* rp_lte_cell_reselection_parameters_cmda_2000::add_neighbor_cell_list() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000.neighbor_cell_list)
  return neighbor_cell_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell_cdma_2000 >*
rp_lte_cell_reselection_parameters_cmda_2000::mutable_neighbor_cell_list() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000.neighbor_cell_list)
  return &neighbor_cell_list_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell_cdma_2000 >&
rp_lte_cell_reselection_parameters_cmda_2000::neighbor_cell_list() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000.neighbor_cell_list)
  return neighbor_cell_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_sib8::kParametersHrpdFieldNumber;
const int rp_lte_sib8::kParameters1XrttFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_sib8::rp_lte_sib8()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_sib8)
}

void rp_lte_sib8::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  parameters_hrpd_ = const_cast< ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000*>(&::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000::default_instance());
  parameters_1xrtt_ = const_cast< ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000*>(&::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000::default_instance());
}

rp_lte_sib8::rp_lte_sib8(const rp_lte_sib8& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_sib8)
}

void rp_lte_sib8::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  parameters_hrpd_ = NULL;
  parameters_1xrtt_ = NULL;
}

rp_lte_sib8::~rp_lte_sib8() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_sib8)
  SharedDtor();
}

void rp_lte_sib8::SharedDtor() {
  if (this != default_instance_) {
    delete parameters_hrpd_;
    delete parameters_1xrtt_;
  }
}

void rp_lte_sib8::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_sib8::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_sib8_descriptor_;
}

const rp_lte_sib8& rp_lte_sib8::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_sib8* rp_lte_sib8::default_instance_ = NULL;

rp_lte_sib8* rp_lte_sib8::New(::google::protobuf::Arena* arena) const {
  rp_lte_sib8* n = new rp_lte_sib8;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_sib8::Clear() {
  if (GetArenaNoVirtual() == NULL && parameters_hrpd_ != NULL) delete parameters_hrpd_;
  parameters_hrpd_ = NULL;
  if (GetArenaNoVirtual() == NULL && parameters_1xrtt_ != NULL) delete parameters_1xrtt_;
  parameters_1xrtt_ = NULL;
}

bool rp_lte_sib8::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_sib8)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000 parameters_hrpd = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parameters_hrpd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parameters_1xrtt;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000 parameters_1xrtt = 3;
      case 3: {
        if (tag == 26) {
         parse_parameters_1xrtt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parameters_1xrtt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_sib8)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_sib8)
  return false;
#undef DO_
}

void rp_lte_sib8::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_sib8)
  // optional .rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000 parameters_hrpd = 2;
  if (this->has_parameters_hrpd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->parameters_hrpd_, output);
  }

  // optional .rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000 parameters_1xrtt = 3;
  if (this->has_parameters_1xrtt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->parameters_1xrtt_, output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_sib8)
}

::google::protobuf::uint8* rp_lte_sib8::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_sib8)
  // optional .rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000 parameters_hrpd = 2;
  if (this->has_parameters_hrpd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->parameters_hrpd_, target);
  }

  // optional .rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000 parameters_1xrtt = 3;
  if (this->has_parameters_1xrtt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->parameters_1xrtt_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_sib8)
  return target;
}

int rp_lte_sib8::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000 parameters_hrpd = 2;
  if (this->has_parameters_hrpd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parameters_hrpd_);
  }

  // optional .rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000 parameters_1xrtt = 3;
  if (this->has_parameters_1xrtt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parameters_1xrtt_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_sib8::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_sib8* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_sib8>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_sib8::MergeFrom(const rp_lte_sib8& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_parameters_hrpd()) {
    mutable_parameters_hrpd()->::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000::MergeFrom(from.parameters_hrpd());
  }
  if (from.has_parameters_1xrtt()) {
    mutable_parameters_1xrtt()->::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000::MergeFrom(from.parameters_1xrtt());
  }
}

void rp_lte_sib8::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_sib8::CopyFrom(const rp_lte_sib8& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_sib8::IsInitialized() const {

  return true;
}

void rp_lte_sib8::Swap(rp_lte_sib8* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_sib8::InternalSwap(rp_lte_sib8* other) {
  std::swap(parameters_hrpd_, other->parameters_hrpd_);
  std::swap(parameters_1xrtt_, other->parameters_1xrtt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_sib8::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_sib8_descriptor_;
  metadata.reflection = rp_lte_sib8_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_sib8

// optional .rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000 parameters_hrpd = 2;
bool rp_lte_sib8::has_parameters_hrpd() const {
  return !_is_default_instance_ && parameters_hrpd_ != NULL;
}
void rp_lte_sib8::clear_parameters_hrpd() {
  if (GetArenaNoVirtual() == NULL && parameters_hrpd_ != NULL) delete parameters_hrpd_;
  parameters_hrpd_ = NULL;
}
const ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000& rp_lte_sib8::parameters_hrpd() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib8.parameters_hrpd)
  return parameters_hrpd_ != NULL ? *parameters_hrpd_ : *default_instance_->parameters_hrpd_;
}
::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* rp_lte_sib8::mutable_parameters_hrpd() {
  
  if (parameters_hrpd_ == NULL) {
    parameters_hrpd_ = new ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib8.parameters_hrpd)
  return parameters_hrpd_;
}
::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* rp_lte_sib8::release_parameters_hrpd() {
  
  ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* temp = parameters_hrpd_;
  parameters_hrpd_ = NULL;
  return temp;
}
void rp_lte_sib8::set_allocated_parameters_hrpd(::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* parameters_hrpd) {
  delete parameters_hrpd_;
  parameters_hrpd_ = parameters_hrpd;
  if (parameters_hrpd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_sib8.parameters_hrpd)
}

// optional .rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000 parameters_1xrtt = 3;
bool rp_lte_sib8::has_parameters_1xrtt() const {
  return !_is_default_instance_ && parameters_1xrtt_ != NULL;
}
void rp_lte_sib8::clear_parameters_1xrtt() {
  if (GetArenaNoVirtual() == NULL && parameters_1xrtt_ != NULL) delete parameters_1xrtt_;
  parameters_1xrtt_ = NULL;
}
const ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000& rp_lte_sib8::parameters_1xrtt() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib8.parameters_1xrtt)
  return parameters_1xrtt_ != NULL ? *parameters_1xrtt_ : *default_instance_->parameters_1xrtt_;
}
::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* rp_lte_sib8::mutable_parameters_1xrtt() {
  
  if (parameters_1xrtt_ == NULL) {
    parameters_1xrtt_ = new ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib8.parameters_1xrtt)
  return parameters_1xrtt_;
}
::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* rp_lte_sib8::release_parameters_1xrtt() {
  
  ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* temp = parameters_1xrtt_;
  parameters_1xrtt_ = NULL;
  return temp;
}
void rp_lte_sib8::set_allocated_parameters_1xrtt(::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* parameters_1xrtt) {
  delete parameters_1xrtt_;
  parameters_1xrtt_ = parameters_1xrtt;
  if (parameters_1xrtt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_sib8.parameters_1xrtt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_layer_3::kRawLayer3FieldNumber;
const int rp_lte_layer_3::kSib1FieldNumber;
const int rp_lte_layer_3::kSib3FieldNumber;
const int rp_lte_layer_3::kSib4FieldNumber;
const int rp_lte_layer_3::kSib5FieldNumber;
const int rp_lte_layer_3::kSib6FieldNumber;
const int rp_lte_layer_3::kSib7FieldNumber;
const int rp_lte_layer_3::kSib8FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_layer_3::rp_lte_layer_3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_layer_3)
}

void rp_lte_layer_3::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  sib1_ = const_cast< ::rf_phreaker::protobuf::rp_lte_sib1*>(&::rf_phreaker::protobuf::rp_lte_sib1::default_instance());
  sib3_ = const_cast< ::rf_phreaker::protobuf::rp_lte_sib3*>(&::rf_phreaker::protobuf::rp_lte_sib3::default_instance());
  sib4_ = const_cast< ::rf_phreaker::protobuf::rp_lte_sib4*>(&::rf_phreaker::protobuf::rp_lte_sib4::default_instance());
  sib5_ = const_cast< ::rf_phreaker::protobuf::rp_lte_sib5*>(&::rf_phreaker::protobuf::rp_lte_sib5::default_instance());
  sib6_ = const_cast< ::rf_phreaker::protobuf::rp_lte_sib6*>(&::rf_phreaker::protobuf::rp_lte_sib6::default_instance());
  sib7_ = const_cast< ::rf_phreaker::protobuf::rp_lte_sib7*>(&::rf_phreaker::protobuf::rp_lte_sib7::default_instance());
  sib8_ = const_cast< ::rf_phreaker::protobuf::rp_lte_sib8*>(&::rf_phreaker::protobuf::rp_lte_sib8::default_instance());
}

rp_lte_layer_3::rp_lte_layer_3(const rp_lte_layer_3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_layer_3)
}

void rp_lte_layer_3::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  sib1_ = NULL;
  sib3_ = NULL;
  sib4_ = NULL;
  sib5_ = NULL;
  sib6_ = NULL;
  sib7_ = NULL;
  sib8_ = NULL;
}

rp_lte_layer_3::~rp_lte_layer_3() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_layer_3)
  SharedDtor();
}

void rp_lte_layer_3::SharedDtor() {
  if (this != default_instance_) {
    delete sib1_;
    delete sib3_;
    delete sib4_;
    delete sib5_;
    delete sib6_;
    delete sib7_;
    delete sib8_;
  }
}

void rp_lte_layer_3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_layer_3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_layer_3_descriptor_;
}

const rp_lte_layer_3& rp_lte_layer_3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_layer_3* rp_lte_layer_3::default_instance_ = NULL;

rp_lte_layer_3* rp_lte_layer_3::New(::google::protobuf::Arena* arena) const {
  rp_lte_layer_3* n = new rp_lte_layer_3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_layer_3::Clear() {
  if (GetArenaNoVirtual() == NULL && sib1_ != NULL) delete sib1_;
  sib1_ = NULL;
  if (GetArenaNoVirtual() == NULL && sib3_ != NULL) delete sib3_;
  sib3_ = NULL;
  if (GetArenaNoVirtual() == NULL && sib4_ != NULL) delete sib4_;
  sib4_ = NULL;
  if (GetArenaNoVirtual() == NULL && sib5_ != NULL) delete sib5_;
  sib5_ = NULL;
  if (GetArenaNoVirtual() == NULL && sib6_ != NULL) delete sib6_;
  sib6_ = NULL;
  if (GetArenaNoVirtual() == NULL && sib7_ != NULL) delete sib7_;
  sib7_ = NULL;
  if (GetArenaNoVirtual() == NULL && sib8_ != NULL) delete sib8_;
  sib8_ = NULL;
  raw_layer_3_.Clear();
}

bool rp_lte_layer_3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_layer_3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_raw_layer_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_raw_layer_3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_raw_layer_3;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_sib1;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_lte_sib1 sib1 = 2;
      case 2: {
        if (tag == 18) {
         parse_sib1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sib1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sib3;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_lte_sib3 sib3 = 4;
      case 4: {
        if (tag == 34) {
         parse_sib3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sib3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sib4;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_lte_sib4 sib4 = 5;
      case 5: {
        if (tag == 42) {
         parse_sib4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sib4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sib5;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_lte_sib5 sib5 = 6;
      case 6: {
        if (tag == 50) {
         parse_sib5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sib5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sib6;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_lte_sib6 sib6 = 7;
      case 7: {
        if (tag == 58) {
         parse_sib6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sib6()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sib7;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_lte_sib7 sib7 = 8;
      case 8: {
        if (tag == 66) {
         parse_sib7:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sib7()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_sib8;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_lte_sib8 sib8 = 9;
      case 9: {
        if (tag == 74) {
         parse_sib8:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sib8()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_layer_3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_layer_3)
  return false;
#undef DO_
}

void rp_lte_layer_3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_layer_3)
  // repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
  for (unsigned int i = 0, n = this->raw_layer_3_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->raw_layer_3(i), output);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib1 sib1 = 2;
  if (this->has_sib1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sib1_, output);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib3 sib3 = 4;
  if (this->has_sib3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->sib3_, output);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib4 sib4 = 5;
  if (this->has_sib4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->sib4_, output);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib5 sib5 = 6;
  if (this->has_sib5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->sib5_, output);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib6 sib6 = 7;
  if (this->has_sib6()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->sib6_, output);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib7 sib7 = 8;
  if (this->has_sib7()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->sib7_, output);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib8 sib8 = 9;
  if (this->has_sib8()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->sib8_, output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_layer_3)
}

::google::protobuf::uint8* rp_lte_layer_3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_layer_3)
  // repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
  for (unsigned int i = 0, n = this->raw_layer_3_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->raw_layer_3(i), target);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib1 sib1 = 2;
  if (this->has_sib1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->sib1_, target);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib3 sib3 = 4;
  if (this->has_sib3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->sib3_, target);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib4 sib4 = 5;
  if (this->has_sib4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->sib4_, target);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib5 sib5 = 6;
  if (this->has_sib5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->sib5_, target);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib6 sib6 = 7;
  if (this->has_sib6()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->sib6_, target);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib7 sib7 = 8;
  if (this->has_sib7()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->sib7_, target);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib8 sib8 = 9;
  if (this->has_sib8()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->sib8_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_layer_3)
  return target;
}

int rp_lte_layer_3::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_lte_sib1 sib1 = 2;
  if (this->has_sib1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sib1_);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib3 sib3 = 4;
  if (this->has_sib3()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sib3_);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib4 sib4 = 5;
  if (this->has_sib4()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sib4_);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib5 sib5 = 6;
  if (this->has_sib5()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sib5_);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib6 sib6 = 7;
  if (this->has_sib6()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sib6_);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib7 sib7 = 8;
  if (this->has_sib7()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sib7_);
  }

  // optional .rf_phreaker.protobuf.rp_lte_sib8 sib8 = 9;
  if (this->has_sib8()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sib8_);
  }

  // repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
  total_size += 1 * this->raw_layer_3_size();
  for (int i = 0; i < this->raw_layer_3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raw_layer_3(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_layer_3::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_layer_3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_layer_3>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_layer_3::MergeFrom(const rp_lte_layer_3& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  raw_layer_3_.MergeFrom(from.raw_layer_3_);
  if (from.has_sib1()) {
    mutable_sib1()->::rf_phreaker::protobuf::rp_lte_sib1::MergeFrom(from.sib1());
  }
  if (from.has_sib3()) {
    mutable_sib3()->::rf_phreaker::protobuf::rp_lte_sib3::MergeFrom(from.sib3());
  }
  if (from.has_sib4()) {
    mutable_sib4()->::rf_phreaker::protobuf::rp_lte_sib4::MergeFrom(from.sib4());
  }
  if (from.has_sib5()) {
    mutable_sib5()->::rf_phreaker::protobuf::rp_lte_sib5::MergeFrom(from.sib5());
  }
  if (from.has_sib6()) {
    mutable_sib6()->::rf_phreaker::protobuf::rp_lte_sib6::MergeFrom(from.sib6());
  }
  if (from.has_sib7()) {
    mutable_sib7()->::rf_phreaker::protobuf::rp_lte_sib7::MergeFrom(from.sib7());
  }
  if (from.has_sib8()) {
    mutable_sib8()->::rf_phreaker::protobuf::rp_lte_sib8::MergeFrom(from.sib8());
  }
}

void rp_lte_layer_3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_layer_3::CopyFrom(const rp_lte_layer_3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_layer_3::IsInitialized() const {

  return true;
}

void rp_lte_layer_3::Swap(rp_lte_layer_3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_layer_3::InternalSwap(rp_lte_layer_3* other) {
  raw_layer_3_.UnsafeArenaSwap(&other->raw_layer_3_);
  std::swap(sib1_, other->sib1_);
  std::swap(sib3_, other->sib3_);
  std::swap(sib4_, other->sib4_);
  std::swap(sib5_, other->sib5_);
  std::swap(sib6_, other->sib6_);
  std::swap(sib7_, other->sib7_);
  std::swap(sib8_, other->sib8_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_layer_3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_layer_3_descriptor_;
  metadata.reflection = rp_lte_layer_3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_layer_3

// repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
int rp_lte_layer_3::raw_layer_3_size() const {
  return raw_layer_3_.size();
}
void rp_lte_layer_3::clear_raw_layer_3() {
  raw_layer_3_.Clear();
}
const ::rf_phreaker::protobuf::rp_raw_layer_3& rp_lte_layer_3::raw_layer_3(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_layer_3.raw_layer_3)
  return raw_layer_3_.Get(index);
}
::rf_phreaker::protobuf::rp_raw_layer_3* rp_lte_layer_3::mutable_raw_layer_3(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_layer_3.raw_layer_3)
  return raw_layer_3_.Mutable(index);
}
::rf_phreaker::protobuf::rp_raw_layer_3* rp_lte_layer_3::add_raw_layer_3() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_layer_3.raw_layer_3)
  return raw_layer_3_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >*
rp_lte_layer_3::mutable_raw_layer_3() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_layer_3.raw_layer_3)
  return &raw_layer_3_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >&
rp_lte_layer_3::raw_layer_3() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_layer_3.raw_layer_3)
  return raw_layer_3_;
}

// optional .rf_phreaker.protobuf.rp_lte_sib1 sib1 = 2;
bool rp_lte_layer_3::has_sib1() const {
  return !_is_default_instance_ && sib1_ != NULL;
}
void rp_lte_layer_3::clear_sib1() {
  if (GetArenaNoVirtual() == NULL && sib1_ != NULL) delete sib1_;
  sib1_ = NULL;
}
const ::rf_phreaker::protobuf::rp_lte_sib1& rp_lte_layer_3::sib1() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_layer_3.sib1)
  return sib1_ != NULL ? *sib1_ : *default_instance_->sib1_;
}
::rf_phreaker::protobuf::rp_lte_sib1* rp_lte_layer_3::mutable_sib1() {
  
  if (sib1_ == NULL) {
    sib1_ = new ::rf_phreaker::protobuf::rp_lte_sib1;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_layer_3.sib1)
  return sib1_;
}
::rf_phreaker::protobuf::rp_lte_sib1* rp_lte_layer_3::release_sib1() {
  
  ::rf_phreaker::protobuf::rp_lte_sib1* temp = sib1_;
  sib1_ = NULL;
  return temp;
}
void rp_lte_layer_3::set_allocated_sib1(::rf_phreaker::protobuf::rp_lte_sib1* sib1) {
  delete sib1_;
  sib1_ = sib1;
  if (sib1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_layer_3.sib1)
}

// optional .rf_phreaker.protobuf.rp_lte_sib3 sib3 = 4;
bool rp_lte_layer_3::has_sib3() const {
  return !_is_default_instance_ && sib3_ != NULL;
}
void rp_lte_layer_3::clear_sib3() {
  if (GetArenaNoVirtual() == NULL && sib3_ != NULL) delete sib3_;
  sib3_ = NULL;
}
const ::rf_phreaker::protobuf::rp_lte_sib3& rp_lte_layer_3::sib3() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_layer_3.sib3)
  return sib3_ != NULL ? *sib3_ : *default_instance_->sib3_;
}
::rf_phreaker::protobuf::rp_lte_sib3* rp_lte_layer_3::mutable_sib3() {
  
  if (sib3_ == NULL) {
    sib3_ = new ::rf_phreaker::protobuf::rp_lte_sib3;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_layer_3.sib3)
  return sib3_;
}
::rf_phreaker::protobuf::rp_lte_sib3* rp_lte_layer_3::release_sib3() {
  
  ::rf_phreaker::protobuf::rp_lte_sib3* temp = sib3_;
  sib3_ = NULL;
  return temp;
}
void rp_lte_layer_3::set_allocated_sib3(::rf_phreaker::protobuf::rp_lte_sib3* sib3) {
  delete sib3_;
  sib3_ = sib3;
  if (sib3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_layer_3.sib3)
}

// optional .rf_phreaker.protobuf.rp_lte_sib4 sib4 = 5;
bool rp_lte_layer_3::has_sib4() const {
  return !_is_default_instance_ && sib4_ != NULL;
}
void rp_lte_layer_3::clear_sib4() {
  if (GetArenaNoVirtual() == NULL && sib4_ != NULL) delete sib4_;
  sib4_ = NULL;
}
const ::rf_phreaker::protobuf::rp_lte_sib4& rp_lte_layer_3::sib4() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_layer_3.sib4)
  return sib4_ != NULL ? *sib4_ : *default_instance_->sib4_;
}
::rf_phreaker::protobuf::rp_lte_sib4* rp_lte_layer_3::mutable_sib4() {
  
  if (sib4_ == NULL) {
    sib4_ = new ::rf_phreaker::protobuf::rp_lte_sib4;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_layer_3.sib4)
  return sib4_;
}
::rf_phreaker::protobuf::rp_lte_sib4* rp_lte_layer_3::release_sib4() {
  
  ::rf_phreaker::protobuf::rp_lte_sib4* temp = sib4_;
  sib4_ = NULL;
  return temp;
}
void rp_lte_layer_3::set_allocated_sib4(::rf_phreaker::protobuf::rp_lte_sib4* sib4) {
  delete sib4_;
  sib4_ = sib4;
  if (sib4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_layer_3.sib4)
}

// optional .rf_phreaker.protobuf.rp_lte_sib5 sib5 = 6;
bool rp_lte_layer_3::has_sib5() const {
  return !_is_default_instance_ && sib5_ != NULL;
}
void rp_lte_layer_3::clear_sib5() {
  if (GetArenaNoVirtual() == NULL && sib5_ != NULL) delete sib5_;
  sib5_ = NULL;
}
const ::rf_phreaker::protobuf::rp_lte_sib5& rp_lte_layer_3::sib5() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_layer_3.sib5)
  return sib5_ != NULL ? *sib5_ : *default_instance_->sib5_;
}
::rf_phreaker::protobuf::rp_lte_sib5* rp_lte_layer_3::mutable_sib5() {
  
  if (sib5_ == NULL) {
    sib5_ = new ::rf_phreaker::protobuf::rp_lte_sib5;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_layer_3.sib5)
  return sib5_;
}
::rf_phreaker::protobuf::rp_lte_sib5* rp_lte_layer_3::release_sib5() {
  
  ::rf_phreaker::protobuf::rp_lte_sib5* temp = sib5_;
  sib5_ = NULL;
  return temp;
}
void rp_lte_layer_3::set_allocated_sib5(::rf_phreaker::protobuf::rp_lte_sib5* sib5) {
  delete sib5_;
  sib5_ = sib5;
  if (sib5) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_layer_3.sib5)
}

// optional .rf_phreaker.protobuf.rp_lte_sib6 sib6 = 7;
bool rp_lte_layer_3::has_sib6() const {
  return !_is_default_instance_ && sib6_ != NULL;
}
void rp_lte_layer_3::clear_sib6() {
  if (GetArenaNoVirtual() == NULL && sib6_ != NULL) delete sib6_;
  sib6_ = NULL;
}
const ::rf_phreaker::protobuf::rp_lte_sib6& rp_lte_layer_3::sib6() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_layer_3.sib6)
  return sib6_ != NULL ? *sib6_ : *default_instance_->sib6_;
}
::rf_phreaker::protobuf::rp_lte_sib6* rp_lte_layer_3::mutable_sib6() {
  
  if (sib6_ == NULL) {
    sib6_ = new ::rf_phreaker::protobuf::rp_lte_sib6;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_layer_3.sib6)
  return sib6_;
}
::rf_phreaker::protobuf::rp_lte_sib6* rp_lte_layer_3::release_sib6() {
  
  ::rf_phreaker::protobuf::rp_lte_sib6* temp = sib6_;
  sib6_ = NULL;
  return temp;
}
void rp_lte_layer_3::set_allocated_sib6(::rf_phreaker::protobuf::rp_lte_sib6* sib6) {
  delete sib6_;
  sib6_ = sib6;
  if (sib6) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_layer_3.sib6)
}

// optional .rf_phreaker.protobuf.rp_lte_sib7 sib7 = 8;
bool rp_lte_layer_3::has_sib7() const {
  return !_is_default_instance_ && sib7_ != NULL;
}
void rp_lte_layer_3::clear_sib7() {
  if (GetArenaNoVirtual() == NULL && sib7_ != NULL) delete sib7_;
  sib7_ = NULL;
}
const ::rf_phreaker::protobuf::rp_lte_sib7& rp_lte_layer_3::sib7() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_layer_3.sib7)
  return sib7_ != NULL ? *sib7_ : *default_instance_->sib7_;
}
::rf_phreaker::protobuf::rp_lte_sib7* rp_lte_layer_3::mutable_sib7() {
  
  if (sib7_ == NULL) {
    sib7_ = new ::rf_phreaker::protobuf::rp_lte_sib7;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_layer_3.sib7)
  return sib7_;
}
::rf_phreaker::protobuf::rp_lte_sib7* rp_lte_layer_3::release_sib7() {
  
  ::rf_phreaker::protobuf::rp_lte_sib7* temp = sib7_;
  sib7_ = NULL;
  return temp;
}
void rp_lte_layer_3::set_allocated_sib7(::rf_phreaker::protobuf::rp_lte_sib7* sib7) {
  delete sib7_;
  sib7_ = sib7;
  if (sib7) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_layer_3.sib7)
}

// optional .rf_phreaker.protobuf.rp_lte_sib8 sib8 = 9;
bool rp_lte_layer_3::has_sib8() const {
  return !_is_default_instance_ && sib8_ != NULL;
}
void rp_lte_layer_3::clear_sib8() {
  if (GetArenaNoVirtual() == NULL && sib8_ != NULL) delete sib8_;
  sib8_ = NULL;
}
const ::rf_phreaker::protobuf::rp_lte_sib8& rp_lte_layer_3::sib8() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_layer_3.sib8)
  return sib8_ != NULL ? *sib8_ : *default_instance_->sib8_;
}
::rf_phreaker::protobuf::rp_lte_sib8* rp_lte_layer_3::mutable_sib8() {
  
  if (sib8_ == NULL) {
    sib8_ = new ::rf_phreaker::protobuf::rp_lte_sib8;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_layer_3.sib8)
  return sib8_;
}
::rf_phreaker::protobuf::rp_lte_sib8* rp_lte_layer_3::release_sib8() {
  
  ::rf_phreaker::protobuf::rp_lte_sib8* temp = sib8_;
  sib8_ = NULL;
  return temp;
}
void rp_lte_layer_3::set_allocated_sib8(::rf_phreaker::protobuf::rp_lte_sib8* sib8) {
  delete sib8_;
  sib8_ = sib8;
  if (sib8) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_layer_3.sib8)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte::kBaseFieldNumber;
const int rp_lte::kEarfcnFieldNumber;
const int rp_lte::kOperatingBandFieldNumber;
const int rp_lte::kPhysicalCellIdFieldNumber;
const int rp_lte::kRsrpFieldNumber;
const int rp_lte::kRsrqFieldNumber;
const int rp_lte::kRssiFieldNumber;
const int rp_lte::kPschIdFieldNumber;
const int rp_lte::kPschQualityFieldNumber;
const int rp_lte::kSschIdFieldNumber;
const int rp_lte::kSschQualityFieldNumber;
const int rp_lte::kSyncQualityFieldNumber;
const int rp_lte::kCyclicPrefixFieldNumber;
const int rp_lte::kNumAntennaPortsFieldNumber;
const int rp_lte::kDownlinkBandwidthFieldNumber;
const int rp_lte::kFrameNumberFieldNumber;
const int rp_lte::kLayer3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte::rp_lte()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte)
}

void rp_lte::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::rf_phreaker::protobuf::rp_base*>(&::rf_phreaker::protobuf::rp_base::default_instance());
  layer_3_ = const_cast< ::rf_phreaker::protobuf::rp_lte_layer_3*>(&::rf_phreaker::protobuf::rp_lte_layer_3::default_instance());
}

rp_lte::rp_lte(const rp_lte& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte)
}

void rp_lte::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_ = NULL;
  earfcn_ = 0;
  operating_band_ = 0;
  physical_cell_id_ = 0;
  rsrp_ = 0;
  rsrq_ = 0;
  rssi_ = 0;
  psch_id_ = 0;
  psch_quality_ = 0;
  ssch_id_ = 0;
  ssch_quality_ = 0;
  sync_quality_ = 0;
  cyclic_prefix_ = 0;
  num_antenna_ports_ = 0;
  downlink_bandwidth_ = 0;
  frame_number_ = 0;
  layer_3_ = NULL;
}

rp_lte::~rp_lte() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte)
  SharedDtor();
}

void rp_lte::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete layer_3_;
  }
}

void rp_lte::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_descriptor_;
}

const rp_lte& rp_lte::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte* rp_lte::default_instance_ = NULL;

rp_lte* rp_lte::New(::google::protobuf::Arena* arena) const {
  rp_lte* n = new rp_lte;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_lte*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(earfcn_, rssi_);
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  ZR_(psch_quality_, downlink_bandwidth_);
  frame_number_ = 0;
  if (GetArenaNoVirtual() == NULL && layer_3_ != NULL) delete layer_3_;
  layer_3_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool rp_lte::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_base base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_earfcn;
        break;
      }

      // optional int32 earfcn = 2;
      case 2: {
        if (tag == 16) {
         parse_earfcn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &earfcn_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operating_band;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
      case 3: {
        if (tag == 24) {
         parse_operating_band:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operating_band(static_cast< ::rf_phreaker::protobuf::rp_operating_band >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_physical_cell_id;
        break;
      }

      // optional int32 physical_cell_id = 4;
      case 4: {
        if (tag == 32) {
         parse_physical_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physical_cell_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_rsrp;
        break;
      }

      // optional double rsrp = 5;
      case 5: {
        if (tag == 41) {
         parse_rsrp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rsrp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_rsrq;
        break;
      }

      // optional double rsrq = 6;
      case 6: {
        if (tag == 49) {
         parse_rsrq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rsrq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_rssi;
        break;
      }

      // optional double rssi = 7;
      case 7: {
        if (tag == 57) {
         parse_rssi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rssi_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_psch_id;
        break;
      }

      // optional int32 psch_id = 8;
      case 8: {
        if (tag == 64) {
         parse_psch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &psch_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_psch_quality;
        break;
      }

      // optional double psch_quality = 9;
      case 9: {
        if (tag == 73) {
         parse_psch_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &psch_quality_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ssch_id;
        break;
      }

      // optional int32 ssch_id = 10;
      case 10: {
        if (tag == 80) {
         parse_ssch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssch_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_ssch_quality;
        break;
      }

      // optional double ssch_quality = 11;
      case 11: {
        if (tag == 89) {
         parse_ssch_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ssch_quality_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_sync_quality;
        break;
      }

      // optional double sync_quality = 12;
      case 12: {
        if (tag == 97) {
         parse_sync_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sync_quality_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_cyclic_prefix;
        break;
      }

      // optional int32 cyclic_prefix = 13;
      case 13: {
        if (tag == 104) {
         parse_cyclic_prefix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cyclic_prefix_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_num_antenna_ports;
        break;
      }

      // optional int32 num_antenna_ports = 14;
      case 14: {
        if (tag == 112) {
         parse_num_antenna_ports:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_antenna_ports_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_downlink_bandwidth;
        break;
      }

      // optional int32 downlink_bandwidth = 15;
      case 15: {
        if (tag == 120) {
         parse_downlink_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downlink_bandwidth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_frame_number;
        break;
      }

      // optional int32 frame_number = 16;
      case 16: {
        if (tag == 128) {
         parse_frame_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_layer_3;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_lte_layer_3 layer_3 = 17;
      case 17: {
        if (tag == 138) {
         parse_layer_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer_3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte)
  return false;
#undef DO_
}

void rp_lte::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte)
  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // optional int32 earfcn = 2;
  if (this->earfcn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->earfcn(), output);
  }

  // optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
  if (this->operating_band() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operating_band(), output);
  }

  // optional int32 physical_cell_id = 4;
  if (this->physical_cell_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->physical_cell_id(), output);
  }

  // optional double rsrp = 5;
  if (this->rsrp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->rsrp(), output);
  }

  // optional double rsrq = 6;
  if (this->rsrq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rsrq(), output);
  }

  // optional double rssi = 7;
  if (this->rssi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->rssi(), output);
  }

  // optional int32 psch_id = 8;
  if (this->psch_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->psch_id(), output);
  }

  // optional double psch_quality = 9;
  if (this->psch_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->psch_quality(), output);
  }

  // optional int32 ssch_id = 10;
  if (this->ssch_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ssch_id(), output);
  }

  // optional double ssch_quality = 11;
  if (this->ssch_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->ssch_quality(), output);
  }

  // optional double sync_quality = 12;
  if (this->sync_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->sync_quality(), output);
  }

  // optional int32 cyclic_prefix = 13;
  if (this->cyclic_prefix() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->cyclic_prefix(), output);
  }

  // optional int32 num_antenna_ports = 14;
  if (this->num_antenna_ports() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->num_antenna_ports(), output);
  }

  // optional int32 downlink_bandwidth = 15;
  if (this->downlink_bandwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->downlink_bandwidth(), output);
  }

  // optional int32 frame_number = 16;
  if (this->frame_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->frame_number(), output);
  }

  // optional .rf_phreaker.protobuf.rp_lte_layer_3 layer_3 = 17;
  if (this->has_layer_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->layer_3_, output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte)
}

::google::protobuf::uint8* rp_lte::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte)
  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->base_, target);
  }

  // optional int32 earfcn = 2;
  if (this->earfcn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->earfcn(), target);
  }

  // optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
  if (this->operating_band() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operating_band(), target);
  }

  // optional int32 physical_cell_id = 4;
  if (this->physical_cell_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->physical_cell_id(), target);
  }

  // optional double rsrp = 5;
  if (this->rsrp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->rsrp(), target);
  }

  // optional double rsrq = 6;
  if (this->rsrq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->rsrq(), target);
  }

  // optional double rssi = 7;
  if (this->rssi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->rssi(), target);
  }

  // optional int32 psch_id = 8;
  if (this->psch_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->psch_id(), target);
  }

  // optional double psch_quality = 9;
  if (this->psch_quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->psch_quality(), target);
  }

  // optional int32 ssch_id = 10;
  if (this->ssch_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ssch_id(), target);
  }

  // optional double ssch_quality = 11;
  if (this->ssch_quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->ssch_quality(), target);
  }

  // optional double sync_quality = 12;
  if (this->sync_quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->sync_quality(), target);
  }

  // optional int32 cyclic_prefix = 13;
  if (this->cyclic_prefix() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->cyclic_prefix(), target);
  }

  // optional int32 num_antenna_ports = 14;
  if (this->num_antenna_ports() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->num_antenna_ports(), target);
  }

  // optional int32 downlink_bandwidth = 15;
  if (this->downlink_bandwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->downlink_bandwidth(), target);
  }

  // optional int32 frame_number = 16;
  if (this->frame_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->frame_number(), target);
  }

  // optional .rf_phreaker.protobuf.rp_lte_layer_3 layer_3 = 17;
  if (this->has_layer_3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, *this->layer_3_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte)
  return target;
}

int rp_lte::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional int32 earfcn = 2;
  if (this->earfcn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->earfcn());
  }

  // optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
  if (this->operating_band() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operating_band());
  }

  // optional int32 physical_cell_id = 4;
  if (this->physical_cell_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->physical_cell_id());
  }

  // optional double rsrp = 5;
  if (this->rsrp() != 0) {
    total_size += 1 + 8;
  }

  // optional double rsrq = 6;
  if (this->rsrq() != 0) {
    total_size += 1 + 8;
  }

  // optional double rssi = 7;
  if (this->rssi() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 psch_id = 8;
  if (this->psch_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->psch_id());
  }

  // optional double psch_quality = 9;
  if (this->psch_quality() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 ssch_id = 10;
  if (this->ssch_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ssch_id());
  }

  // optional double ssch_quality = 11;
  if (this->ssch_quality() != 0) {
    total_size += 1 + 8;
  }

  // optional double sync_quality = 12;
  if (this->sync_quality() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 cyclic_prefix = 13;
  if (this->cyclic_prefix() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cyclic_prefix());
  }

  // optional int32 num_antenna_ports = 14;
  if (this->num_antenna_ports() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_antenna_ports());
  }

  // optional int32 downlink_bandwidth = 15;
  if (this->downlink_bandwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->downlink_bandwidth());
  }

  // optional int32 frame_number = 16;
  if (this->frame_number() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame_number());
  }

  // optional .rf_phreaker.protobuf.rp_lte_layer_3 layer_3 = 17;
  if (this->has_layer_3()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->layer_3_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte::MergeFrom(const rp_lte& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_base()) {
    mutable_base()->::rf_phreaker::protobuf::rp_base::MergeFrom(from.base());
  }
  if (from.earfcn() != 0) {
    set_earfcn(from.earfcn());
  }
  if (from.operating_band() != 0) {
    set_operating_band(from.operating_band());
  }
  if (from.physical_cell_id() != 0) {
    set_physical_cell_id(from.physical_cell_id());
  }
  if (from.rsrp() != 0) {
    set_rsrp(from.rsrp());
  }
  if (from.rsrq() != 0) {
    set_rsrq(from.rsrq());
  }
  if (from.rssi() != 0) {
    set_rssi(from.rssi());
  }
  if (from.psch_id() != 0) {
    set_psch_id(from.psch_id());
  }
  if (from.psch_quality() != 0) {
    set_psch_quality(from.psch_quality());
  }
  if (from.ssch_id() != 0) {
    set_ssch_id(from.ssch_id());
  }
  if (from.ssch_quality() != 0) {
    set_ssch_quality(from.ssch_quality());
  }
  if (from.sync_quality() != 0) {
    set_sync_quality(from.sync_quality());
  }
  if (from.cyclic_prefix() != 0) {
    set_cyclic_prefix(from.cyclic_prefix());
  }
  if (from.num_antenna_ports() != 0) {
    set_num_antenna_ports(from.num_antenna_ports());
  }
  if (from.downlink_bandwidth() != 0) {
    set_downlink_bandwidth(from.downlink_bandwidth());
  }
  if (from.frame_number() != 0) {
    set_frame_number(from.frame_number());
  }
  if (from.has_layer_3()) {
    mutable_layer_3()->::rf_phreaker::protobuf::rp_lte_layer_3::MergeFrom(from.layer_3());
  }
}

void rp_lte::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte::CopyFrom(const rp_lte& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte::IsInitialized() const {

  return true;
}

void rp_lte::Swap(rp_lte* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte::InternalSwap(rp_lte* other) {
  std::swap(base_, other->base_);
  std::swap(earfcn_, other->earfcn_);
  std::swap(operating_band_, other->operating_band_);
  std::swap(physical_cell_id_, other->physical_cell_id_);
  std::swap(rsrp_, other->rsrp_);
  std::swap(rsrq_, other->rsrq_);
  std::swap(rssi_, other->rssi_);
  std::swap(psch_id_, other->psch_id_);
  std::swap(psch_quality_, other->psch_quality_);
  std::swap(ssch_id_, other->ssch_id_);
  std::swap(ssch_quality_, other->ssch_quality_);
  std::swap(sync_quality_, other->sync_quality_);
  std::swap(cyclic_prefix_, other->cyclic_prefix_);
  std::swap(num_antenna_ports_, other->num_antenna_ports_);
  std::swap(downlink_bandwidth_, other->downlink_bandwidth_);
  std::swap(frame_number_, other->frame_number_);
  std::swap(layer_3_, other->layer_3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_descriptor_;
  metadata.reflection = rp_lte_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte

// optional .rf_phreaker.protobuf.rp_base base = 1;
bool rp_lte::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void rp_lte::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::rf_phreaker::protobuf::rp_base& rp_lte::base() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::rf_phreaker::protobuf::rp_base* rp_lte::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::rf_phreaker::protobuf::rp_base;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte.base)
  return base_;
}
::rf_phreaker::protobuf::rp_base* rp_lte::release_base() {
  
  ::rf_phreaker::protobuf::rp_base* temp = base_;
  base_ = NULL;
  return temp;
}
void rp_lte::set_allocated_base(::rf_phreaker::protobuf::rp_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte.base)
}

// optional int32 earfcn = 2;
void rp_lte::clear_earfcn() {
  earfcn_ = 0;
}
 ::google::protobuf::int32 rp_lte::earfcn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.earfcn)
  return earfcn_;
}
 void rp_lte::set_earfcn(::google::protobuf::int32 value) {
  
  earfcn_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.earfcn)
}

// optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
void rp_lte::clear_operating_band() {
  operating_band_ = 0;
}
 ::rf_phreaker::protobuf::rp_operating_band rp_lte::operating_band() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.operating_band)
  return static_cast< ::rf_phreaker::protobuf::rp_operating_band >(operating_band_);
}
 void rp_lte::set_operating_band(::rf_phreaker::protobuf::rp_operating_band value) {
  
  operating_band_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.operating_band)
}

// optional int32 physical_cell_id = 4;
void rp_lte::clear_physical_cell_id() {
  physical_cell_id_ = 0;
}
 ::google::protobuf::int32 rp_lte::physical_cell_id() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.physical_cell_id)
  return physical_cell_id_;
}
 void rp_lte::set_physical_cell_id(::google::protobuf::int32 value) {
  
  physical_cell_id_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.physical_cell_id)
}

// optional double rsrp = 5;
void rp_lte::clear_rsrp() {
  rsrp_ = 0;
}
 double rp_lte::rsrp() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.rsrp)
  return rsrp_;
}
 void rp_lte::set_rsrp(double value) {
  
  rsrp_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.rsrp)
}

// optional double rsrq = 6;
void rp_lte::clear_rsrq() {
  rsrq_ = 0;
}
 double rp_lte::rsrq() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.rsrq)
  return rsrq_;
}
 void rp_lte::set_rsrq(double value) {
  
  rsrq_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.rsrq)
}

// optional double rssi = 7;
void rp_lte::clear_rssi() {
  rssi_ = 0;
}
 double rp_lte::rssi() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.rssi)
  return rssi_;
}
 void rp_lte::set_rssi(double value) {
  
  rssi_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.rssi)
}

// optional int32 psch_id = 8;
void rp_lte::clear_psch_id() {
  psch_id_ = 0;
}
 ::google::protobuf::int32 rp_lte::psch_id() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.psch_id)
  return psch_id_;
}
 void rp_lte::set_psch_id(::google::protobuf::int32 value) {
  
  psch_id_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.psch_id)
}

// optional double psch_quality = 9;
void rp_lte::clear_psch_quality() {
  psch_quality_ = 0;
}
 double rp_lte::psch_quality() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.psch_quality)
  return psch_quality_;
}
 void rp_lte::set_psch_quality(double value) {
  
  psch_quality_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.psch_quality)
}

// optional int32 ssch_id = 10;
void rp_lte::clear_ssch_id() {
  ssch_id_ = 0;
}
 ::google::protobuf::int32 rp_lte::ssch_id() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.ssch_id)
  return ssch_id_;
}
 void rp_lte::set_ssch_id(::google::protobuf::int32 value) {
  
  ssch_id_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.ssch_id)
}

// optional double ssch_quality = 11;
void rp_lte::clear_ssch_quality() {
  ssch_quality_ = 0;
}
 double rp_lte::ssch_quality() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.ssch_quality)
  return ssch_quality_;
}
 void rp_lte::set_ssch_quality(double value) {
  
  ssch_quality_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.ssch_quality)
}

// optional double sync_quality = 12;
void rp_lte::clear_sync_quality() {
  sync_quality_ = 0;
}
 double rp_lte::sync_quality() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.sync_quality)
  return sync_quality_;
}
 void rp_lte::set_sync_quality(double value) {
  
  sync_quality_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.sync_quality)
}

// optional int32 cyclic_prefix = 13;
void rp_lte::clear_cyclic_prefix() {
  cyclic_prefix_ = 0;
}
 ::google::protobuf::int32 rp_lte::cyclic_prefix() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.cyclic_prefix)
  return cyclic_prefix_;
}
 void rp_lte::set_cyclic_prefix(::google::protobuf::int32 value) {
  
  cyclic_prefix_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.cyclic_prefix)
}

// optional int32 num_antenna_ports = 14;
void rp_lte::clear_num_antenna_ports() {
  num_antenna_ports_ = 0;
}
 ::google::protobuf::int32 rp_lte::num_antenna_ports() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.num_antenna_ports)
  return num_antenna_ports_;
}
 void rp_lte::set_num_antenna_ports(::google::protobuf::int32 value) {
  
  num_antenna_ports_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.num_antenna_ports)
}

// optional int32 downlink_bandwidth = 15;
void rp_lte::clear_downlink_bandwidth() {
  downlink_bandwidth_ = 0;
}
 ::google::protobuf::int32 rp_lte::downlink_bandwidth() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.downlink_bandwidth)
  return downlink_bandwidth_;
}
 void rp_lte::set_downlink_bandwidth(::google::protobuf::int32 value) {
  
  downlink_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.downlink_bandwidth)
}

// optional int32 frame_number = 16;
void rp_lte::clear_frame_number() {
  frame_number_ = 0;
}
 ::google::protobuf::int32 rp_lte::frame_number() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.frame_number)
  return frame_number_;
}
 void rp_lte::set_frame_number(::google::protobuf::int32 value) {
  
  frame_number_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.frame_number)
}

// optional .rf_phreaker.protobuf.rp_lte_layer_3 layer_3 = 17;
bool rp_lte::has_layer_3() const {
  return !_is_default_instance_ && layer_3_ != NULL;
}
void rp_lte::clear_layer_3() {
  if (GetArenaNoVirtual() == NULL && layer_3_ != NULL) delete layer_3_;
  layer_3_ = NULL;
}
const ::rf_phreaker::protobuf::rp_lte_layer_3& rp_lte::layer_3() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.layer_3)
  return layer_3_ != NULL ? *layer_3_ : *default_instance_->layer_3_;
}
::rf_phreaker::protobuf::rp_lte_layer_3* rp_lte::mutable_layer_3() {
  
  if (layer_3_ == NULL) {
    layer_3_ = new ::rf_phreaker::protobuf::rp_lte_layer_3;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte.layer_3)
  return layer_3_;
}
::rf_phreaker::protobuf::rp_lte_layer_3* rp_lte::release_layer_3() {
  
  ::rf_phreaker::protobuf::rp_lte_layer_3* temp = layer_3_;
  layer_3_ = NULL;
  return temp;
}
void rp_lte::set_allocated_layer_3(::rf_phreaker::protobuf::rp_lte_layer_3* layer_3) {
  delete layer_3_;
  layer_3_ = layer_3;
  if (layer_3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte.layer_3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_lte_update::kBaseFieldNumber;
const int rp_lte_update::kLteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_lte_update::rp_lte_update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_lte_update)
}

void rp_lte_update::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::rf_phreaker::protobuf::rp_base*>(&::rf_phreaker::protobuf::rp_base::default_instance());
}

rp_lte_update::rp_lte_update(const rp_lte_update& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_lte_update)
}

void rp_lte_update::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_ = NULL;
}

rp_lte_update::~rp_lte_update() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_lte_update)
  SharedDtor();
}

void rp_lte_update::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void rp_lte_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_lte_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_lte_update_descriptor_;
}

const rp_lte_update& rp_lte_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_lte_update* rp_lte_update::default_instance_ = NULL;

rp_lte_update* rp_lte_update::New(::google::protobuf::Arena* arena) const {
  rp_lte_update* n = new rp_lte_update;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_lte_update::Clear() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  lte_.Clear();
}

bool rp_lte_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_lte_update)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_base base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lte;
        break;
      }

      // repeated .rf_phreaker.protobuf.rp_lte lte = 2;
      case 2: {
        if (tag == 18) {
         parse_lte:
          DO_(input->IncrementRecursionDepth());
         parse_loop_lte:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lte()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_lte;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_lte_update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_lte_update)
  return false;
#undef DO_
}

void rp_lte_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_lte_update)
  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // repeated .rf_phreaker.protobuf.rp_lte lte = 2;
  for (unsigned int i = 0, n = this->lte_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lte(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_lte_update)
}

::google::protobuf::uint8* rp_lte_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_lte_update)
  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->base_, target);
  }

  // repeated .rf_phreaker.protobuf.rp_lte lte = 2;
  for (unsigned int i = 0, n = this->lte_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lte(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_lte_update)
  return target;
}

int rp_lte_update::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // repeated .rf_phreaker.protobuf.rp_lte lte = 2;
  total_size += 1 * this->lte_size();
  for (int i = 0; i < this->lte_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lte(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_lte_update::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_lte_update* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_lte_update>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_lte_update::MergeFrom(const rp_lte_update& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  lte_.MergeFrom(from.lte_);
  if (from.has_base()) {
    mutable_base()->::rf_phreaker::protobuf::rp_base::MergeFrom(from.base());
  }
}

void rp_lte_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_lte_update::CopyFrom(const rp_lte_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_lte_update::IsInitialized() const {

  return true;
}

void rp_lte_update::Swap(rp_lte_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_lte_update::InternalSwap(rp_lte_update* other) {
  std::swap(base_, other->base_);
  lte_.UnsafeArenaSwap(&other->lte_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_lte_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_lte_update_descriptor_;
  metadata.reflection = rp_lte_update_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_lte_update

// optional .rf_phreaker.protobuf.rp_base base = 1;
bool rp_lte_update::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void rp_lte_update::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::rf_phreaker::protobuf::rp_base& rp_lte_update::base() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_update.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::rf_phreaker::protobuf::rp_base* rp_lte_update::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::rf_phreaker::protobuf::rp_base;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_update.base)
  return base_;
}
::rf_phreaker::protobuf::rp_base* rp_lte_update::release_base() {
  
  ::rf_phreaker::protobuf::rp_base* temp = base_;
  base_ = NULL;
  return temp;
}
void rp_lte_update::set_allocated_base(::rf_phreaker::protobuf::rp_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_update.base)
}

// repeated .rf_phreaker.protobuf.rp_lte lte = 2;
int rp_lte_update::lte_size() const {
  return lte_.size();
}
void rp_lte_update::clear_lte() {
  lte_.Clear();
}
const ::rf_phreaker::protobuf::rp_lte& rp_lte_update::lte(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_update.lte)
  return lte_.Get(index);
}
::rf_phreaker::protobuf::rp_lte* rp_lte_update::mutable_lte(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_update.lte)
  return lte_.Mutable(index);
}
::rf_phreaker::protobuf::rp_lte* rp_lte_update::add_lte() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_update.lte)
  return lte_.Add();
}
::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte >*
rp_lte_update::mutable_lte() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_update.lte)
  return &lte_;
}
const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte >&
rp_lte_update::lte() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_update.lte)
  return lte_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_power_spectrum::kBaseFieldNumber;
const int rp_power_spectrum::kDwellTimeFieldNumber;
const int rp_power_spectrum::kSamplingRateFieldNumber;
const int rp_power_spectrum::kStartFrequencyFieldNumber;
const int rp_power_spectrum::kEndFrequencyFieldNumber;
const int rp_power_spectrum::kSpanFieldNumber;
const int rp_power_spectrum::kWindowLengthFieldNumber;
const int rp_power_spectrum::kNumWindowsFieldNumber;
const int rp_power_spectrum::kBinSizeFieldNumber;
const int rp_power_spectrum::kStepSizeFieldNumber;
const int rp_power_spectrum::kIdentifierFieldNumber;
const int rp_power_spectrum::kPowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_power_spectrum::rp_power_spectrum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_power_spectrum)
}

void rp_power_spectrum::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::rf_phreaker::protobuf::rp_base*>(&::rf_phreaker::protobuf::rp_base::default_instance());
}

rp_power_spectrum::rp_power_spectrum(const rp_power_spectrum& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_power_spectrum)
}

void rp_power_spectrum::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_ = NULL;
  dwell_time_ = GOOGLE_LONGLONG(0);
  sampling_rate_ = GOOGLE_LONGLONG(0);
  start_frequency_ = GOOGLE_LONGLONG(0);
  end_frequency_ = GOOGLE_LONGLONG(0);
  span_ = GOOGLE_LONGLONG(0);
  window_length_ = 0;
  num_windows_ = 0;
  bin_size_ = 0;
  step_size_ = 0;
  identifier_ = GOOGLE_LONGLONG(0);
}

rp_power_spectrum::~rp_power_spectrum() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_power_spectrum)
  SharedDtor();
}

void rp_power_spectrum::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void rp_power_spectrum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_power_spectrum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_power_spectrum_descriptor_;
}

const rp_power_spectrum& rp_power_spectrum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_power_spectrum* rp_power_spectrum::default_instance_ = NULL;

rp_power_spectrum* rp_power_spectrum::New(::google::protobuf::Arena* arena) const {
  rp_power_spectrum* n = new rp_power_spectrum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_power_spectrum::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_power_spectrum*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(dwell_time_, num_windows_);
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  ZR_(bin_size_, identifier_);

#undef ZR_HELPER_
#undef ZR_

  power_.Clear();
}

bool rp_power_spectrum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_power_spectrum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_base base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dwell_time;
        break;
      }

      // optional int64 dwell_time = 2;
      case 2: {
        if (tag == 16) {
         parse_dwell_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwell_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sampling_rate;
        break;
      }

      // optional int64 sampling_rate = 3;
      case 3: {
        if (tag == 24) {
         parse_sampling_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sampling_rate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_frequency;
        break;
      }

      // optional int64 start_frequency = 4;
      case 4: {
        if (tag == 32) {
         parse_start_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_frequency_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end_frequency;
        break;
      }

      // optional int64 end_frequency = 5;
      case 5: {
        if (tag == 40) {
         parse_end_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_frequency_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_span;
        break;
      }

      // optional int64 span = 6;
      case 6: {
        if (tag == 48) {
         parse_span:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &span_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_window_length;
        break;
      }

      // optional int32 window_length = 7;
      case 7: {
        if (tag == 56) {
         parse_window_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_windows;
        break;
      }

      // optional int32 num_windows = 8;
      case 8: {
        if (tag == 64) {
         parse_num_windows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_windows_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_bin_size;
        break;
      }

      // optional double bin_size = 9;
      case 9: {
        if (tag == 73) {
         parse_bin_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bin_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_step_size;
        break;
      }

      // optional double step_size = 10;
      case 10: {
        if (tag == 81) {
         parse_step_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_identifier;
        break;
      }

      // optional int64 identifier = 11;
      case 11: {
        if (tag == 88) {
         parse_identifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &identifier_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_power;
        break;
      }

      // repeated double power = 12 [packed = true];
      case 12: {
        if (tag == 98) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_power())));
        } else if (tag == 97) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 98, input, this->mutable_power())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_power_spectrum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_power_spectrum)
  return false;
#undef DO_
}

void rp_power_spectrum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_power_spectrum)
  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // optional int64 dwell_time = 2;
  if (this->dwell_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dwell_time(), output);
  }

  // optional int64 sampling_rate = 3;
  if (this->sampling_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sampling_rate(), output);
  }

  // optional int64 start_frequency = 4;
  if (this->start_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start_frequency(), output);
  }

  // optional int64 end_frequency = 5;
  if (this->end_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end_frequency(), output);
  }

  // optional int64 span = 6;
  if (this->span() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->span(), output);
  }

  // optional int32 window_length = 7;
  if (this->window_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->window_length(), output);
  }

  // optional int32 num_windows = 8;
  if (this->num_windows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num_windows(), output);
  }

  // optional double bin_size = 9;
  if (this->bin_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->bin_size(), output);
  }

  // optional double step_size = 10;
  if (this->step_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->step_size(), output);
  }

  // optional int64 identifier = 11;
  if (this->identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->identifier(), output);
  }

  // repeated double power = 12 [packed = true];
  if (this->power_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_power_cached_byte_size_);
  }
  for (int i = 0; i < this->power_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->power(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_power_spectrum)
}

::google::protobuf::uint8* rp_power_spectrum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_power_spectrum)
  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->base_, target);
  }

  // optional int64 dwell_time = 2;
  if (this->dwell_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dwell_time(), target);
  }

  // optional int64 sampling_rate = 3;
  if (this->sampling_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sampling_rate(), target);
  }

  // optional int64 start_frequency = 4;
  if (this->start_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->start_frequency(), target);
  }

  // optional int64 end_frequency = 5;
  if (this->end_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end_frequency(), target);
  }

  // optional int64 span = 6;
  if (this->span() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->span(), target);
  }

  // optional int32 window_length = 7;
  if (this->window_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->window_length(), target);
  }

  // optional int32 num_windows = 8;
  if (this->num_windows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->num_windows(), target);
  }

  // optional double bin_size = 9;
  if (this->bin_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->bin_size(), target);
  }

  // optional double step_size = 10;
  if (this->step_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->step_size(), target);
  }

  // optional int64 identifier = 11;
  if (this->identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->identifier(), target);
  }

  // repeated double power = 12 [packed = true];
  if (this->power_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _power_cached_byte_size_, target);
  }
  for (int i = 0; i < this->power_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->power(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_power_spectrum)
  return target;
}

int rp_power_spectrum::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional int64 dwell_time = 2;
  if (this->dwell_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dwell_time());
  }

  // optional int64 sampling_rate = 3;
  if (this->sampling_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sampling_rate());
  }

  // optional int64 start_frequency = 4;
  if (this->start_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_frequency());
  }

  // optional int64 end_frequency = 5;
  if (this->end_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end_frequency());
  }

  // optional int64 span = 6;
  if (this->span() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->span());
  }

  // optional int32 window_length = 7;
  if (this->window_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->window_length());
  }

  // optional int32 num_windows = 8;
  if (this->num_windows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_windows());
  }

  // optional double bin_size = 9;
  if (this->bin_size() != 0) {
    total_size += 1 + 8;
  }

  // optional double step_size = 10;
  if (this->step_size() != 0) {
    total_size += 1 + 8;
  }

  // optional int64 identifier = 11;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->identifier());
  }

  // repeated double power = 12 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->power_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _power_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_power_spectrum::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_power_spectrum* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_power_spectrum>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_power_spectrum::MergeFrom(const rp_power_spectrum& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  power_.MergeFrom(from.power_);
  if (from.has_base()) {
    mutable_base()->::rf_phreaker::protobuf::rp_base::MergeFrom(from.base());
  }
  if (from.dwell_time() != 0) {
    set_dwell_time(from.dwell_time());
  }
  if (from.sampling_rate() != 0) {
    set_sampling_rate(from.sampling_rate());
  }
  if (from.start_frequency() != 0) {
    set_start_frequency(from.start_frequency());
  }
  if (from.end_frequency() != 0) {
    set_end_frequency(from.end_frequency());
  }
  if (from.span() != 0) {
    set_span(from.span());
  }
  if (from.window_length() != 0) {
    set_window_length(from.window_length());
  }
  if (from.num_windows() != 0) {
    set_num_windows(from.num_windows());
  }
  if (from.bin_size() != 0) {
    set_bin_size(from.bin_size());
  }
  if (from.step_size() != 0) {
    set_step_size(from.step_size());
  }
  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
}

void rp_power_spectrum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_power_spectrum::CopyFrom(const rp_power_spectrum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_power_spectrum::IsInitialized() const {

  return true;
}

void rp_power_spectrum::Swap(rp_power_spectrum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_power_spectrum::InternalSwap(rp_power_spectrum* other) {
  std::swap(base_, other->base_);
  std::swap(dwell_time_, other->dwell_time_);
  std::swap(sampling_rate_, other->sampling_rate_);
  std::swap(start_frequency_, other->start_frequency_);
  std::swap(end_frequency_, other->end_frequency_);
  std::swap(span_, other->span_);
  std::swap(window_length_, other->window_length_);
  std::swap(num_windows_, other->num_windows_);
  std::swap(bin_size_, other->bin_size_);
  std::swap(step_size_, other->step_size_);
  std::swap(identifier_, other->identifier_);
  power_.UnsafeArenaSwap(&other->power_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_power_spectrum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_power_spectrum_descriptor_;
  metadata.reflection = rp_power_spectrum_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_power_spectrum

// optional .rf_phreaker.protobuf.rp_base base = 1;
bool rp_power_spectrum::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void rp_power_spectrum::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::rf_phreaker::protobuf::rp_base& rp_power_spectrum::base() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_power_spectrum.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::rf_phreaker::protobuf::rp_base* rp_power_spectrum::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::rf_phreaker::protobuf::rp_base;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_power_spectrum.base)
  return base_;
}
::rf_phreaker::protobuf::rp_base* rp_power_spectrum::release_base() {
  
  ::rf_phreaker::protobuf::rp_base* temp = base_;
  base_ = NULL;
  return temp;
}
void rp_power_spectrum::set_allocated_base(::rf_phreaker::protobuf::rp_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_power_spectrum.base)
}

// optional int64 dwell_time = 2;
void rp_power_spectrum::clear_dwell_time() {
  dwell_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_power_spectrum::dwell_time() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_power_spectrum.dwell_time)
  return dwell_time_;
}
 void rp_power_spectrum::set_dwell_time(::google::protobuf::int64 value) {
  
  dwell_time_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_power_spectrum.dwell_time)
}

// optional int64 sampling_rate = 3;
void rp_power_spectrum::clear_sampling_rate() {
  sampling_rate_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_power_spectrum::sampling_rate() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_power_spectrum.sampling_rate)
  return sampling_rate_;
}
 void rp_power_spectrum::set_sampling_rate(::google::protobuf::int64 value) {
  
  sampling_rate_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_power_spectrum.sampling_rate)
}

// optional int64 start_frequency = 4;
void rp_power_spectrum::clear_start_frequency() {
  start_frequency_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_power_spectrum::start_frequency() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_power_spectrum.start_frequency)
  return start_frequency_;
}
 void rp_power_spectrum::set_start_frequency(::google::protobuf::int64 value) {
  
  start_frequency_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_power_spectrum.start_frequency)
}

// optional int64 end_frequency = 5;
void rp_power_spectrum::clear_end_frequency() {
  end_frequency_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_power_spectrum::end_frequency() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_power_spectrum.end_frequency)
  return end_frequency_;
}
 void rp_power_spectrum::set_end_frequency(::google::protobuf::int64 value) {
  
  end_frequency_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_power_spectrum.end_frequency)
}

// optional int64 span = 6;
void rp_power_spectrum::clear_span() {
  span_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_power_spectrum::span() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_power_spectrum.span)
  return span_;
}
 void rp_power_spectrum::set_span(::google::protobuf::int64 value) {
  
  span_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_power_spectrum.span)
}

// optional int32 window_length = 7;
void rp_power_spectrum::clear_window_length() {
  window_length_ = 0;
}
 ::google::protobuf::int32 rp_power_spectrum::window_length() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_power_spectrum.window_length)
  return window_length_;
}
 void rp_power_spectrum::set_window_length(::google::protobuf::int32 value) {
  
  window_length_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_power_spectrum.window_length)
}

// optional int32 num_windows = 8;
void rp_power_spectrum::clear_num_windows() {
  num_windows_ = 0;
}
 ::google::protobuf::int32 rp_power_spectrum::num_windows() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_power_spectrum.num_windows)
  return num_windows_;
}
 void rp_power_spectrum::set_num_windows(::google::protobuf::int32 value) {
  
  num_windows_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_power_spectrum.num_windows)
}

// optional double bin_size = 9;
void rp_power_spectrum::clear_bin_size() {
  bin_size_ = 0;
}
 double rp_power_spectrum::bin_size() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_power_spectrum.bin_size)
  return bin_size_;
}
 void rp_power_spectrum::set_bin_size(double value) {
  
  bin_size_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_power_spectrum.bin_size)
}

// optional double step_size = 10;
void rp_power_spectrum::clear_step_size() {
  step_size_ = 0;
}
 double rp_power_spectrum::step_size() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_power_spectrum.step_size)
  return step_size_;
}
 void rp_power_spectrum::set_step_size(double value) {
  
  step_size_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_power_spectrum.step_size)
}

// optional int64 identifier = 11;
void rp_power_spectrum::clear_identifier() {
  identifier_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_power_spectrum::identifier() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_power_spectrum.identifier)
  return identifier_;
}
 void rp_power_spectrum::set_identifier(::google::protobuf::int64 value) {
  
  identifier_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_power_spectrum.identifier)
}

// repeated double power = 12 [packed = true];
int rp_power_spectrum::power_size() const {
  return power_.size();
}
void rp_power_spectrum::clear_power() {
  power_.Clear();
}
 double rp_power_spectrum::power(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_power_spectrum.power)
  return power_.Get(index);
}
 void rp_power_spectrum::set_power(int index, double value) {
  power_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_power_spectrum.power)
}
 void rp_power_spectrum::add_power(double value) {
  power_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_power_spectrum.power)
}
 const ::google::protobuf::RepeatedField< double >&
rp_power_spectrum::power() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_power_spectrum.power)
  return power_;
}
 ::google::protobuf::RepeatedField< double >*
rp_power_spectrum::mutable_power() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_power_spectrum.power)
  return &power_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_power_adjustment::kPathFieldNumber;
const int rp_power_adjustment::kStepSizeFieldNumber;
const int rp_power_adjustment::kPowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_power_adjustment::rp_power_adjustment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_power_adjustment)
}

void rp_power_adjustment::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  path_ = const_cast< ::rf_phreaker::protobuf::rp_frequency_path*>(&::rf_phreaker::protobuf::rp_frequency_path::default_instance());
}

rp_power_adjustment::rp_power_adjustment(const rp_power_adjustment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_power_adjustment)
}

void rp_power_adjustment::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  path_ = NULL;
  step_size_ = GOOGLE_LONGLONG(0);
}

rp_power_adjustment::~rp_power_adjustment() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_power_adjustment)
  SharedDtor();
}

void rp_power_adjustment::SharedDtor() {
  if (this != default_instance_) {
    delete path_;
  }
}

void rp_power_adjustment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_power_adjustment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_power_adjustment_descriptor_;
}

const rp_power_adjustment& rp_power_adjustment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_power_adjustment* rp_power_adjustment::default_instance_ = NULL;

rp_power_adjustment* rp_power_adjustment::New(::google::protobuf::Arena* arena) const {
  rp_power_adjustment* n = new rp_power_adjustment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_power_adjustment::Clear() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
  step_size_ = GOOGLE_LONGLONG(0);
  power_.Clear();
}

bool rp_power_adjustment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_power_adjustment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_frequency_path path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_step_size;
        break;
      }

      // optional int64 step_size = 2;
      case 2: {
        if (tag == 16) {
         parse_step_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_power;
        break;
      }

      // repeated double power = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_power())));
        } else if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_power())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_power_adjustment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_power_adjustment)
  return false;
#undef DO_
}

void rp_power_adjustment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_power_adjustment)
  // optional .rf_phreaker.protobuf.rp_frequency_path path = 1;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_, output);
  }

  // optional int64 step_size = 2;
  if (this->step_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->step_size(), output);
  }

  // repeated double power = 3 [packed = true];
  if (this->power_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_power_cached_byte_size_);
  }
  for (int i = 0; i < this->power_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->power(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_power_adjustment)
}

::google::protobuf::uint8* rp_power_adjustment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_power_adjustment)
  // optional .rf_phreaker.protobuf.rp_frequency_path path = 1;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->path_, target);
  }

  // optional int64 step_size = 2;
  if (this->step_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->step_size(), target);
  }

  // repeated double power = 3 [packed = true];
  if (this->power_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _power_cached_byte_size_, target);
  }
  for (int i = 0; i < this->power_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->power(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_power_adjustment)
  return target;
}

int rp_power_adjustment::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_frequency_path path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  // optional int64 step_size = 2;
  if (this->step_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_size());
  }

  // repeated double power = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->power_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _power_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_power_adjustment::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_power_adjustment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_power_adjustment>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_power_adjustment::MergeFrom(const rp_power_adjustment& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  power_.MergeFrom(from.power_);
  if (from.has_path()) {
    mutable_path()->::rf_phreaker::protobuf::rp_frequency_path::MergeFrom(from.path());
  }
  if (from.step_size() != 0) {
    set_step_size(from.step_size());
  }
}

void rp_power_adjustment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_power_adjustment::CopyFrom(const rp_power_adjustment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_power_adjustment::IsInitialized() const {

  return true;
}

void rp_power_adjustment::Swap(rp_power_adjustment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_power_adjustment::InternalSwap(rp_power_adjustment* other) {
  std::swap(path_, other->path_);
  std::swap(step_size_, other->step_size_);
  power_.UnsafeArenaSwap(&other->power_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_power_adjustment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_power_adjustment_descriptor_;
  metadata.reflection = rp_power_adjustment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_power_adjustment

// optional .rf_phreaker.protobuf.rp_frequency_path path = 1;
bool rp_power_adjustment::has_path() const {
  return !_is_default_instance_ && path_ != NULL;
}
void rp_power_adjustment::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::rf_phreaker::protobuf::rp_frequency_path& rp_power_adjustment::path() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_power_adjustment.path)
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
::rf_phreaker::protobuf::rp_frequency_path* rp_power_adjustment::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::rf_phreaker::protobuf::rp_frequency_path;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_power_adjustment.path)
  return path_;
}
::rf_phreaker::protobuf::rp_frequency_path* rp_power_adjustment::release_path() {
  
  ::rf_phreaker::protobuf::rp_frequency_path* temp = path_;
  path_ = NULL;
  return temp;
}
void rp_power_adjustment::set_allocated_path(::rf_phreaker::protobuf::rp_frequency_path* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_power_adjustment.path)
}

// optional int64 step_size = 2;
void rp_power_adjustment::clear_step_size() {
  step_size_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_power_adjustment::step_size() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_power_adjustment.step_size)
  return step_size_;
}
 void rp_power_adjustment::set_step_size(::google::protobuf::int64 value) {
  
  step_size_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_power_adjustment.step_size)
}

// repeated double power = 3 [packed = true];
int rp_power_adjustment::power_size() const {
  return power_.size();
}
void rp_power_adjustment::clear_power() {
  power_.Clear();
}
 double rp_power_adjustment::power(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_power_adjustment.power)
  return power_.Get(index);
}
 void rp_power_adjustment::set_power(int index, double value) {
  power_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_power_adjustment.power)
}
 void rp_power_adjustment::add_power(double value) {
  power_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_power_adjustment.power)
}
 const ::google::protobuf::RepeatedField< double >&
rp_power_adjustment::power() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_power_adjustment.power)
  return power_;
}
 ::google::protobuf::RepeatedField< double >*
rp_power_adjustment::mutable_power() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_power_adjustment.power)
  return &power_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rp_iq_data::kBaseFieldNumber;
const int rp_iq_data::kPowerAdjustmentFieldNumber;
const int rp_iq_data::kSamplingRateFieldNumber;
const int rp_iq_data::kDwellTimeFieldNumber;
const int rp_iq_data::kSamplesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rp_iq_data::rp_iq_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rf_phreaker.protobuf.rp_iq_data)
}

void rp_iq_data::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::rf_phreaker::protobuf::rp_base*>(&::rf_phreaker::protobuf::rp_base::default_instance());
  power_adjustment_ = const_cast< ::rf_phreaker::protobuf::rp_power_adjustment*>(&::rf_phreaker::protobuf::rp_power_adjustment::default_instance());
}

rp_iq_data::rp_iq_data(const rp_iq_data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rf_phreaker.protobuf.rp_iq_data)
}

void rp_iq_data::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_ = NULL;
  power_adjustment_ = NULL;
  sampling_rate_ = GOOGLE_LONGLONG(0);
  dwell_time_ = GOOGLE_LONGLONG(0);
}

rp_iq_data::~rp_iq_data() {
  // @@protoc_insertion_point(destructor:rf_phreaker.protobuf.rp_iq_data)
  SharedDtor();
}

void rp_iq_data::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete power_adjustment_;
  }
}

void rp_iq_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rp_iq_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rp_iq_data_descriptor_;
}

const rp_iq_data& rp_iq_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_5fphreaker_2eproto();
  return *default_instance_;
}

rp_iq_data* rp_iq_data::default_instance_ = NULL;

rp_iq_data* rp_iq_data::New(::google::protobuf::Arena* arena) const {
  rp_iq_data* n = new rp_iq_data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rp_iq_data::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rp_iq_data*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sampling_rate_, dwell_time_);
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && power_adjustment_ != NULL) delete power_adjustment_;
  power_adjustment_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  samples_.Clear();
}

bool rp_iq_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rf_phreaker.protobuf.rp_iq_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rf_phreaker.protobuf.rp_base base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_power_adjustment;
        break;
      }

      // optional .rf_phreaker.protobuf.rp_power_adjustment power_adjustment = 2;
      case 2: {
        if (tag == 18) {
         parse_power_adjustment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_adjustment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sampling_rate;
        break;
      }

      // optional int64 sampling_rate = 3;
      case 3: {
        if (tag == 24) {
         parse_sampling_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sampling_rate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dwell_time;
        break;
      }

      // optional int64 dwell_time = 4;
      case 4: {
        if (tag == 32) {
         parse_dwell_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwell_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_samples;
        break;
      }

      // repeated float samples = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_samples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_samples())));
        } else if (tag == 45) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_samples())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rf_phreaker.protobuf.rp_iq_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rf_phreaker.protobuf.rp_iq_data)
  return false;
#undef DO_
}

void rp_iq_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rf_phreaker.protobuf.rp_iq_data)
  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // optional .rf_phreaker.protobuf.rp_power_adjustment power_adjustment = 2;
  if (this->has_power_adjustment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->power_adjustment_, output);
  }

  // optional int64 sampling_rate = 3;
  if (this->sampling_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sampling_rate(), output);
  }

  // optional int64 dwell_time = 4;
  if (this->dwell_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->dwell_time(), output);
  }

  // repeated float samples = 5 [packed = true];
  if (this->samples_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_samples_cached_byte_size_);
  }
  for (int i = 0; i < this->samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->samples(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rf_phreaker.protobuf.rp_iq_data)
}

::google::protobuf::uint8* rp_iq_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf_phreaker.protobuf.rp_iq_data)
  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->base_, target);
  }

  // optional .rf_phreaker.protobuf.rp_power_adjustment power_adjustment = 2;
  if (this->has_power_adjustment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->power_adjustment_, target);
  }

  // optional int64 sampling_rate = 3;
  if (this->sampling_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sampling_rate(), target);
  }

  // optional int64 dwell_time = 4;
  if (this->dwell_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->dwell_time(), target);
  }

  // repeated float samples = 5 [packed = true];
  if (this->samples_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _samples_cached_byte_size_, target);
  }
  for (int i = 0; i < this->samples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->samples(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rf_phreaker.protobuf.rp_iq_data)
  return target;
}

int rp_iq_data::ByteSize() const {
  int total_size = 0;

  // optional .rf_phreaker.protobuf.rp_base base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional .rf_phreaker.protobuf.rp_power_adjustment power_adjustment = 2;
  if (this->has_power_adjustment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->power_adjustment_);
  }

  // optional int64 sampling_rate = 3;
  if (this->sampling_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sampling_rate());
  }

  // optional int64 dwell_time = 4;
  if (this->dwell_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dwell_time());
  }

  // repeated float samples = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->samples_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _samples_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rp_iq_data::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rp_iq_data* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rp_iq_data>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rp_iq_data::MergeFrom(const rp_iq_data& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  samples_.MergeFrom(from.samples_);
  if (from.has_base()) {
    mutable_base()->::rf_phreaker::protobuf::rp_base::MergeFrom(from.base());
  }
  if (from.has_power_adjustment()) {
    mutable_power_adjustment()->::rf_phreaker::protobuf::rp_power_adjustment::MergeFrom(from.power_adjustment());
  }
  if (from.sampling_rate() != 0) {
    set_sampling_rate(from.sampling_rate());
  }
  if (from.dwell_time() != 0) {
    set_dwell_time(from.dwell_time());
  }
}

void rp_iq_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rp_iq_data::CopyFrom(const rp_iq_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rp_iq_data::IsInitialized() const {

  return true;
}

void rp_iq_data::Swap(rp_iq_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rp_iq_data::InternalSwap(rp_iq_data* other) {
  std::swap(base_, other->base_);
  std::swap(power_adjustment_, other->power_adjustment_);
  std::swap(sampling_rate_, other->sampling_rate_);
  std::swap(dwell_time_, other->dwell_time_);
  samples_.UnsafeArenaSwap(&other->samples_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rp_iq_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rp_iq_data_descriptor_;
  metadata.reflection = rp_iq_data_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_iq_data

// optional .rf_phreaker.protobuf.rp_base base = 1;
bool rp_iq_data::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void rp_iq_data::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::rf_phreaker::protobuf::rp_base& rp_iq_data::base() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_iq_data.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::rf_phreaker::protobuf::rp_base* rp_iq_data::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::rf_phreaker::protobuf::rp_base;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_iq_data.base)
  return base_;
}
::rf_phreaker::protobuf::rp_base* rp_iq_data::release_base() {
  
  ::rf_phreaker::protobuf::rp_base* temp = base_;
  base_ = NULL;
  return temp;
}
void rp_iq_data::set_allocated_base(::rf_phreaker::protobuf::rp_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_iq_data.base)
}

// optional .rf_phreaker.protobuf.rp_power_adjustment power_adjustment = 2;
bool rp_iq_data::has_power_adjustment() const {
  return !_is_default_instance_ && power_adjustment_ != NULL;
}
void rp_iq_data::clear_power_adjustment() {
  if (GetArenaNoVirtual() == NULL && power_adjustment_ != NULL) delete power_adjustment_;
  power_adjustment_ = NULL;
}
const ::rf_phreaker::protobuf::rp_power_adjustment& rp_iq_data::power_adjustment() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_iq_data.power_adjustment)
  return power_adjustment_ != NULL ? *power_adjustment_ : *default_instance_->power_adjustment_;
}
::rf_phreaker::protobuf::rp_power_adjustment* rp_iq_data::mutable_power_adjustment() {
  
  if (power_adjustment_ == NULL) {
    power_adjustment_ = new ::rf_phreaker::protobuf::rp_power_adjustment;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_iq_data.power_adjustment)
  return power_adjustment_;
}
::rf_phreaker::protobuf::rp_power_adjustment* rp_iq_data::release_power_adjustment() {
  
  ::rf_phreaker::protobuf::rp_power_adjustment* temp = power_adjustment_;
  power_adjustment_ = NULL;
  return temp;
}
void rp_iq_data::set_allocated_power_adjustment(::rf_phreaker::protobuf::rp_power_adjustment* power_adjustment) {
  delete power_adjustment_;
  power_adjustment_ = power_adjustment;
  if (power_adjustment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_iq_data.power_adjustment)
}

// optional int64 sampling_rate = 3;
void rp_iq_data::clear_sampling_rate() {
  sampling_rate_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_iq_data::sampling_rate() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_iq_data.sampling_rate)
  return sampling_rate_;
}
 void rp_iq_data::set_sampling_rate(::google::protobuf::int64 value) {
  
  sampling_rate_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_iq_data.sampling_rate)
}

// optional int64 dwell_time = 4;
void rp_iq_data::clear_dwell_time() {
  dwell_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 rp_iq_data::dwell_time() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_iq_data.dwell_time)
  return dwell_time_;
}
 void rp_iq_data::set_dwell_time(::google::protobuf::int64 value) {
  
  dwell_time_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_iq_data.dwell_time)
}

// repeated float samples = 5 [packed = true];
int rp_iq_data::samples_size() const {
  return samples_.size();
}
void rp_iq_data::clear_samples() {
  samples_.Clear();
}
 float rp_iq_data::samples(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_iq_data.samples)
  return samples_.Get(index);
}
 void rp_iq_data::set_samples(int index, float value) {
  samples_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_iq_data.samples)
}
 void rp_iq_data::add_samples(float value) {
  samples_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_iq_data.samples)
}
 const ::google::protobuf::RepeatedField< float >&
rp_iq_data::samples() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_iq_data.samples)
  return samples_;
}
 ::google::protobuf::RepeatedField< float >*
rp_iq_data::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_iq_data.samples)
  return &samples_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace rf_phreaker

// @@protoc_insertion_point(global_scope)
