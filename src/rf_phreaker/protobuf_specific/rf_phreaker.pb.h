// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rf_phreaker.proto

#ifndef PROTOBUF_rf_5fphreaker_2eproto__INCLUDED
#define PROTOBUF_rf_5fphreaker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rf_phreaker {
namespace protobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_rf_5fphreaker_2eproto();
void protobuf_AssignDesc_rf_5fphreaker_2eproto();
void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

class rp_base;
class rp_device_info;
class rp_frequency_path;
class rp_gps;
class rp_gsm;
class rp_gsm_eutran_neighbor;
class rp_gsm_layer_3;
class rp_gsm_selection_parameters;
class rp_gsm_si1;
class rp_gsm_si2;
class rp_gsm_si2_bis;
class rp_gsm_si2_quater;
class rp_gsm_si2_ter;
class rp_gsm_si3;
class rp_gsm_si4;
class rp_gsm_update;
class rp_gsm_utran_neighbor;
class rp_log;
class rp_lte;
class rp_lte_carrier_freq_utra;
class rp_lte_carrier_freqs_geran;
class rp_lte_carrier_freqs_info_geran;
class rp_lte_cell_reselection_parameters_cmda_2000;
class rp_lte_cell_reselection_serving_freq_info;
class rp_lte_geran_common_info;
class rp_lte_inter_freq_carrier_freq_info;
class rp_lte_layer_3;
class rp_lte_neighbor_cell;
class rp_lte_neighbor_cell_cdma_2000;
class rp_lte_neighbor_cells_per_band_class_cdma_2000;
class rp_lte_physical_cellid_range;
class rp_lte_s_search_v920;
class rp_lte_scheduling_info;
class rp_lte_sib1;
class rp_lte_sib3;
class rp_lte_sib4;
class rp_lte_sib5;
class rp_lte_sib6;
class rp_lte_sib7;
class rp_lte_sib8;
class rp_lte_update;
class rp_message;
class rp_pcid_group;
class rp_plmn;
class rp_raw_data;
class rp_raw_layer_3;
class rp_satellite;
class rp_update;
class rp_wcdma;
class rp_wcdma_gsm_neighbor;
class rp_wcdma_layer_3;
class rp_wcdma_mib;
class rp_wcdma_sib1;
class rp_wcdma_sib11;
class rp_wcdma_sib11_bis;
class rp_wcdma_sib3;
class rp_wcdma_sib4;
class rp_wcdma_update;
class rp_wcdma_utran_neighbor;

enum rp_status {
  RP_STATUS_OK = 0,
  RP_STATUS_NOT_INITIALIZED = 1,
  RP_STATUS_INVALID_PARAMETER = 2,
  RP_STATUS_COMMUNICATION_ERROR = 3,
  RP_STATUS_SCANNER_INIT_ERROR = 4,
  RP_STATUS_HARDWARE_INFO_ERROR = 5,
  RP_STATUS_MISC_ERROR = 6,
  RP_STATUS_FILE_IO_ERROR = 7,
  RP_STATUS_BLADE_RF_ERROR = 8,
  RP_STATUS_IPP_ERROR = 9,
  RP_STATUS_FILTER_ERROR = 10,
  RP_STATUS_GSM_ANALYSIS_ERROR = 11,
  RP_STATUS_UMTS_ANALYSIS_ERROR = 12,
  RP_STATUS_LTE_ANALYSIS_ERROR = 13,
  RP_STATUS_PROCESSING_ERROR = 14,
  RP_STATUS_GPS_COMMUNICATION_ERROR = 15,
  RP_STATUS_RF_PHREAKER_API_ERROR = 16,
  RP_STATUS_GENERIC_ERROR = 17,
  RP_STATUS_UNKNOWN_ERROR = 18,
  rp_status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  rp_status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool rp_status_IsValid(int value);
const rp_status rp_status_MIN = RP_STATUS_OK;
const rp_status rp_status_MAX = RP_STATUS_UNKNOWN_ERROR;
const int rp_status_ARRAYSIZE = rp_status_MAX + 1;

const ::google::protobuf::EnumDescriptor* rp_status_descriptor();
inline const ::std::string& rp_status_Name(rp_status value) {
  return ::google::protobuf::internal::NameOfEnum(
    rp_status_descriptor(), value);
}
inline bool rp_status_Parse(
    const ::std::string& name, rp_status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rp_status>(
    rp_status_descriptor(), name, value);
}
enum rp_operating_band {
  OPERATING_BAND_UNKNOWN = 0,
  GSM_T_380 = 0,
  GSM_T_410 = 1,
  GSM_450 = 2,
  GSM_480 = 3,
  GSM_710 = 4,
  GSM_750 = 5,
  GSM_T_810 = 6,
  GSM_850 = 7,
  GSM_P_900 = 8,
  GSM_E_900 = 9,
  GSM_R_900 = 10,
  GSM_ER_900 = 11,
  GSM_T_900 = 12,
  GSM_DCS_1800 = 13,
  GSM_PCS_1900 = 14,
  UMTS_OPERATING_BAND_1 = 15,
  UMTS_OPERATING_BAND_2 = 16,
  UMTS_OPERATING_BAND_3 = 17,
  UMTS_OPERATING_BAND_4 = 18,
  UMTS_OPERATING_BAND_5 = 19,
  UMTS_OPERATING_BAND_6 = 20,
  UMTS_OPERATING_BAND_7 = 21,
  UMTS_OPERATING_BAND_8 = 22,
  UMTS_OPERATING_BAND_9 = 23,
  UMTS_OPERATING_BAND_10 = 24,
  UMTS_OPERATING_BAND_11 = 25,
  UMTS_OPERATING_BAND_12 = 26,
  UMTS_OPERATING_BAND_13 = 27,
  UMTS_OPERATING_BAND_14 = 28,
  UMTS_OPERATING_BAND_19 = 29,
  UMTS_OPERATING_BAND_20 = 30,
  UMTS_OPERATING_BAND_21 = 31,
  UMTS_OPERATING_BAND_22 = 32,
  UMTS_OPERATING_BAND_25 = 33,
  UMTS_OPERATING_BAND_26 = 34,
  LTE_OPERATING_BAND_1 = 35,
  LTE_OPERATING_BAND_2 = 36,
  LTE_OPERATING_BAND_3 = 37,
  LTE_OPERATING_BAND_4 = 38,
  LTE_OPERATING_BAND_5 = 39,
  LTE_OPERATING_BAND_6 = 40,
  LTE_OPERATING_BAND_7 = 41,
  LTE_OPERATING_BAND_8 = 42,
  LTE_OPERATING_BAND_9 = 43,
  LTE_OPERATING_BAND_10 = 44,
  LTE_OPERATING_BAND_11 = 45,
  LTE_OPERATING_BAND_12 = 46,
  LTE_OPERATING_BAND_13 = 47,
  LTE_OPERATING_BAND_14 = 48,
  LTE_OPERATING_BAND_17 = 49,
  LTE_OPERATING_BAND_18 = 50,
  LTE_OPERATING_BAND_19 = 51,
  LTE_OPERATING_BAND_20 = 52,
  LTE_OPERATING_BAND_21 = 53,
  LTE_OPERATING_BAND_22 = 54,
  LTE_OPERATING_BAND_23 = 55,
  LTE_OPERATING_BAND_24 = 56,
  LTE_OPERATING_BAND_25 = 57,
  LTE_OPERATING_BAND_26 = 58,
  LTE_OPERATING_BAND_27 = 59,
  LTE_OPERATING_BAND_28 = 60,
  LTE_OPERATING_BAND_29 = 61,
  LTE_OPERATING_BAND_30 = 62,
  LTE_OPERATING_BAND_33 = 63,
  LTE_OPERATING_BAND_34 = 64,
  LTE_OPERATING_BAND_35 = 65,
  LTE_OPERATING_BAND_36 = 66,
  LTE_OPERATING_BAND_37 = 67,
  LTE_OPERATING_BAND_38 = 68,
  LTE_OPERATING_BAND_39 = 69,
  LTE_OPERATING_BAND_40 = 70,
  LTE_OPERATING_BAND_41 = 71,
  LTE_OPERATING_BAND_42 = 72,
  LTE_OPERATING_BAND_43 = 73,
  LTE_OPERATING_BAND_44 = 74,
  FIRST_GSM_OPERATING_BAND = 0,
  LAST_GSM_OPERATING_BAND = 14,
  FIRST_UMTS_OPERATING_BAND = 15,
  LAST_UMTS_OPERATING_BAND = 34,
  FIRST_LTE_OPERATING_BAND = 35,
  LAST_LTE_OPERATING_BAND = 74,
  rp_operating_band_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  rp_operating_band_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool rp_operating_band_IsValid(int value);
const rp_operating_band rp_operating_band_MIN = OPERATING_BAND_UNKNOWN;
const rp_operating_band rp_operating_band_MAX = LTE_OPERATING_BAND_44;
const int rp_operating_band_ARRAYSIZE = rp_operating_band_MAX + 1;

const ::google::protobuf::EnumDescriptor* rp_operating_band_descriptor();
inline const ::std::string& rp_operating_band_Name(rp_operating_band value) {
  return ::google::protobuf::internal::NameOfEnum(
    rp_operating_band_descriptor(), value);
}
inline bool rp_operating_band_Parse(
    const ::std::string& name, rp_operating_band* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rp_operating_band>(
    rp_operating_band_descriptor(), name, value);
}
enum rp_device_communication {
  USB_HI_SPEED = 0,
  USB_SUPER_SPEED = 1,
  UNKNOWN_DEVICE_COMMUNICATION = 2,
  rp_device_communication_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  rp_device_communication_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool rp_device_communication_IsValid(int value);
const rp_device_communication rp_device_communication_MIN = USB_HI_SPEED;
const rp_device_communication rp_device_communication_MAX = UNKNOWN_DEVICE_COMMUNICATION;
const int rp_device_communication_ARRAYSIZE = rp_device_communication_MAX + 1;

const ::google::protobuf::EnumDescriptor* rp_device_communication_descriptor();
inline const ::std::string& rp_device_communication_Name(rp_device_communication value) {
  return ::google::protobuf::internal::NameOfEnum(
    rp_device_communication_descriptor(), value);
}
inline bool rp_device_communication_Parse(
    const ::std::string& name, rp_device_communication* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rp_device_communication>(
    rp_device_communication_descriptor(), name, value);
}
enum rp_band_indicator_type {
  dcs_1800_was_used = 0,
  pcs_1900_was_used = 1,
  unknown_band_was_used = 2,
  rp_band_indicator_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  rp_band_indicator_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool rp_band_indicator_type_IsValid(int value);
const rp_band_indicator_type rp_band_indicator_type_MIN = dcs_1800_was_used;
const rp_band_indicator_type rp_band_indicator_type_MAX = unknown_band_was_used;
const int rp_band_indicator_type_ARRAYSIZE = rp_band_indicator_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* rp_band_indicator_type_descriptor();
inline const ::std::string& rp_band_indicator_type_Name(rp_band_indicator_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    rp_band_indicator_type_descriptor(), value);
}
inline bool rp_band_indicator_type_Parse(
    const ::std::string& name, rp_band_indicator_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rp_band_indicator_type>(
    rp_band_indicator_type_descriptor(), name, value);
}
enum rp_duplex_type {
  fdd = 0,
  tdd = 1,
  rp_duplex_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  rp_duplex_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool rp_duplex_type_IsValid(int value);
const rp_duplex_type rp_duplex_type_MIN = fdd;
const rp_duplex_type rp_duplex_type_MAX = tdd;
const int rp_duplex_type_ARRAYSIZE = rp_duplex_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* rp_duplex_type_descriptor();
inline const ::std::string& rp_duplex_type_Name(rp_duplex_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    rp_duplex_type_descriptor(), value);
}
inline bool rp_duplex_type_Parse(
    const ::std::string& name, rp_duplex_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rp_duplex_type>(
    rp_duplex_type_descriptor(), name, value);
}
enum rp_utran_bandwidth_type {
  utran_3_84_mcps = 0,
  utran_1_24_mcps = 1,
  utran_2_mcps = 2,
  utran_3_mcps = 3,
  utran_4_mcps = 4,
  utran_5_mcps = 5,
  utran_6_mcps = 6,
  utran_7_mcps = 7,
  utran_default_mcps = 0,
  rp_utran_bandwidth_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  rp_utran_bandwidth_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool rp_utran_bandwidth_type_IsValid(int value);
const rp_utran_bandwidth_type rp_utran_bandwidth_type_MIN = utran_3_84_mcps;
const rp_utran_bandwidth_type rp_utran_bandwidth_type_MAX = utran_7_mcps;
const int rp_utran_bandwidth_type_ARRAYSIZE = rp_utran_bandwidth_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* rp_utran_bandwidth_type_descriptor();
inline const ::std::string& rp_utran_bandwidth_type_Name(rp_utran_bandwidth_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    rp_utran_bandwidth_type_descriptor(), value);
}
inline bool rp_utran_bandwidth_type_Parse(
    const ::std::string& name, rp_utran_bandwidth_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rp_utran_bandwidth_type>(
    rp_utran_bandwidth_type_descriptor(), name, value);
}
enum rp_eutran_bandwidth_type {
  num_resource_blocks_6 = 0,
  num_resource_blocks_15 = 1,
  num_resource_blocks_25 = 2,
  num_resource_blocks_50 = 3,
  num_resource_blocks_75 = 4,
  num_resource_blocks_100 = 5,
  rp_eutran_bandwidth_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  rp_eutran_bandwidth_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool rp_eutran_bandwidth_type_IsValid(int value);
const rp_eutran_bandwidth_type rp_eutran_bandwidth_type_MIN = num_resource_blocks_6;
const rp_eutran_bandwidth_type rp_eutran_bandwidth_type_MAX = num_resource_blocks_100;
const int rp_eutran_bandwidth_type_ARRAYSIZE = rp_eutran_bandwidth_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* rp_eutran_bandwidth_type_descriptor();
inline const ::std::string& rp_eutran_bandwidth_type_Name(rp_eutran_bandwidth_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    rp_eutran_bandwidth_type_descriptor(), value);
}
inline bool rp_eutran_bandwidth_type_Parse(
    const ::std::string& name, rp_eutran_bandwidth_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rp_eutran_bandwidth_type>(
    rp_eutran_bandwidth_type_descriptor(), name, value);
}
enum rp_lte_sib_type {
  LTE_SIB1 = 0,
  LTE_SIB2 = 1,
  LTE_SIB3 = 2,
  LTE_SIB4 = 3,
  LTE_SIB5 = 4,
  LTE_SIB6 = 5,
  LTE_SIB7 = 6,
  LTE_SIB8 = 7,
  LTE_SIB9 = 8,
  LTE_SIB10 = 9,
  LTE_SIB11 = 10,
  LTE_SIB12_V920 = 11,
  LTE_SIB13_V920 = 12,
  LTE_SIB14_V1130 = 13,
  LTE_SIB15_V1130 = 14,
  LTE_SIB16_V1130 = 15,
  LTE_SPARE2 = 16,
  LTE_SPARE1 = 17,
  rp_lte_sib_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  rp_lte_sib_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool rp_lte_sib_type_IsValid(int value);
const rp_lte_sib_type rp_lte_sib_type_MIN = LTE_SIB1;
const rp_lte_sib_type rp_lte_sib_type_MAX = LTE_SPARE1;
const int rp_lte_sib_type_ARRAYSIZE = rp_lte_sib_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* rp_lte_sib_type_descriptor();
inline const ::std::string& rp_lte_sib_type_Name(rp_lte_sib_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    rp_lte_sib_type_descriptor(), value);
}
inline bool rp_lte_sib_type_Parse(
    const ::std::string& name, rp_lte_sib_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rp_lte_sib_type>(
    rp_lte_sib_type_descriptor(), name, value);
}
enum rp_lte_band_class_cdma_2000_type {
  bc0 = 0,
  bc1 = 1,
  bc2 = 2,
  bc3 = 3,
  bc4 = 4,
  bc5 = 5,
  bc6 = 6,
  bc7 = 7,
  bc8 = 8,
  bc9 = 9,
  bc10 = 10,
  bc11 = 11,
  bc12 = 12,
  bc13 = 13,
  bc14 = 14,
  bc15 = 15,
  bc16 = 16,
  bc17 = 17,
  bc18_v9a0 = 18,
  bc19_v9a0 = 19,
  bc20_v9a0 = 20,
  bc21_v9a0 = 21,
  spare10 = 22,
  spare9 = 23,
  spare8 = 24,
  spare7 = 25,
  spare6 = 26,
  spare5 = 27,
  spare4 = 28,
  spare3 = 29,
  spare2 = 30,
  spare1 = 31,
  rp_lte_band_class_cdma_2000_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  rp_lte_band_class_cdma_2000_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool rp_lte_band_class_cdma_2000_type_IsValid(int value);
const rp_lte_band_class_cdma_2000_type rp_lte_band_class_cdma_2000_type_MIN = bc0;
const rp_lte_band_class_cdma_2000_type rp_lte_band_class_cdma_2000_type_MAX = spare1;
const int rp_lte_band_class_cdma_2000_type_ARRAYSIZE = rp_lte_band_class_cdma_2000_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* rp_lte_band_class_cdma_2000_type_descriptor();
inline const ::std::string& rp_lte_band_class_cdma_2000_type_Name(rp_lte_band_class_cdma_2000_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    rp_lte_band_class_cdma_2000_type_descriptor(), value);
}
inline bool rp_lte_band_class_cdma_2000_type_Parse(
    const ::std::string& name, rp_lte_band_class_cdma_2000_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rp_lte_band_class_cdma_2000_type>(
    rp_lte_band_class_cdma_2000_type_descriptor(), name, value);
}
enum rp_sample_format_type {
  LITTLE_ENDIAN_FLOAT_REAL_IMAGINARY = 0,
  rp_sample_format_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  rp_sample_format_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool rp_sample_format_type_IsValid(int value);
const rp_sample_format_type rp_sample_format_type_MIN = LITTLE_ENDIAN_FLOAT_REAL_IMAGINARY;
const rp_sample_format_type rp_sample_format_type_MAX = LITTLE_ENDIAN_FLOAT_REAL_IMAGINARY;
const int rp_sample_format_type_ARRAYSIZE = rp_sample_format_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* rp_sample_format_type_descriptor();
inline const ::std::string& rp_sample_format_type_Name(rp_sample_format_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    rp_sample_format_type_descriptor(), value);
}
inline bool rp_sample_format_type_Parse(
    const ::std::string& name, rp_sample_format_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rp_sample_format_type>(
    rp_sample_format_type_descriptor(), name, value);
}
// ===================================================================

class rp_update : public ::google::protobuf::Message {
 public:
  rp_update();
  virtual ~rp_update();

  rp_update(const rp_update& from);

  inline rp_update& operator=(const rp_update& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_update& default_instance();

  enum UpdateCase {
    kLog = 1,
    kMsg = 2,
    kDevice = 3,
    kGps = 4,
    kGsmFullScan = 5,
    kGsmSweep = 6,
    kWcdmaFullScan = 7,
    kWcdmaSweep = 8,
    kLteFullScan = 9,
    kLteSweep = 10,
    UPDATE_NOT_SET = 0,
  };

  void Swap(rp_update* other);

  // implements Message ----------------------------------------------

  inline rp_update* New() const { return New(NULL); }

  rp_update* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_update& from);
  void MergeFrom(const rp_update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_log log = 1;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 1;
  const ::rf_phreaker::protobuf::rp_log& log() const;
  ::rf_phreaker::protobuf::rp_log* mutable_log();
  ::rf_phreaker::protobuf::rp_log* release_log();
  void set_allocated_log(::rf_phreaker::protobuf::rp_log* log);

  // optional .rf_phreaker.protobuf.rp_message msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_message& msg() const;
  ::rf_phreaker::protobuf::rp_message* mutable_msg();
  ::rf_phreaker::protobuf::rp_message* release_msg();
  void set_allocated_msg(::rf_phreaker::protobuf::rp_message* msg);

  // optional .rf_phreaker.protobuf.rp_device_info device = 3;
  bool has_device() const;
  void clear_device();
  static const int kDeviceFieldNumber = 3;
  const ::rf_phreaker::protobuf::rp_device_info& device() const;
  ::rf_phreaker::protobuf::rp_device_info* mutable_device();
  ::rf_phreaker::protobuf::rp_device_info* release_device();
  void set_allocated_device(::rf_phreaker::protobuf::rp_device_info* device);

  // optional .rf_phreaker.protobuf.rp_gps gps = 4;
  bool has_gps() const;
  void clear_gps();
  static const int kGpsFieldNumber = 4;
  const ::rf_phreaker::protobuf::rp_gps& gps() const;
  ::rf_phreaker::protobuf::rp_gps* mutable_gps();
  ::rf_phreaker::protobuf::rp_gps* release_gps();
  void set_allocated_gps(::rf_phreaker::protobuf::rp_gps* gps);

  // optional .rf_phreaker.protobuf.rp_gsm_update gsm_full_scan = 5;
  bool has_gsm_full_scan() const;
  void clear_gsm_full_scan();
  static const int kGsmFullScanFieldNumber = 5;
  const ::rf_phreaker::protobuf::rp_gsm_update& gsm_full_scan() const;
  ::rf_phreaker::protobuf::rp_gsm_update* mutable_gsm_full_scan();
  ::rf_phreaker::protobuf::rp_gsm_update* release_gsm_full_scan();
  void set_allocated_gsm_full_scan(::rf_phreaker::protobuf::rp_gsm_update* gsm_full_scan);

  // optional .rf_phreaker.protobuf.rp_gsm_update gsm_sweep = 6;
  bool has_gsm_sweep() const;
  void clear_gsm_sweep();
  static const int kGsmSweepFieldNumber = 6;
  const ::rf_phreaker::protobuf::rp_gsm_update& gsm_sweep() const;
  ::rf_phreaker::protobuf::rp_gsm_update* mutable_gsm_sweep();
  ::rf_phreaker::protobuf::rp_gsm_update* release_gsm_sweep();
  void set_allocated_gsm_sweep(::rf_phreaker::protobuf::rp_gsm_update* gsm_sweep);

  // optional .rf_phreaker.protobuf.rp_wcdma_update wcdma_full_scan = 7;
  bool has_wcdma_full_scan() const;
  void clear_wcdma_full_scan();
  static const int kWcdmaFullScanFieldNumber = 7;
  const ::rf_phreaker::protobuf::rp_wcdma_update& wcdma_full_scan() const;
  ::rf_phreaker::protobuf::rp_wcdma_update* mutable_wcdma_full_scan();
  ::rf_phreaker::protobuf::rp_wcdma_update* release_wcdma_full_scan();
  void set_allocated_wcdma_full_scan(::rf_phreaker::protobuf::rp_wcdma_update* wcdma_full_scan);

  // optional .rf_phreaker.protobuf.rp_wcdma_update wcdma_sweep = 8;
  bool has_wcdma_sweep() const;
  void clear_wcdma_sweep();
  static const int kWcdmaSweepFieldNumber = 8;
  const ::rf_phreaker::protobuf::rp_wcdma_update& wcdma_sweep() const;
  ::rf_phreaker::protobuf::rp_wcdma_update* mutable_wcdma_sweep();
  ::rf_phreaker::protobuf::rp_wcdma_update* release_wcdma_sweep();
  void set_allocated_wcdma_sweep(::rf_phreaker::protobuf::rp_wcdma_update* wcdma_sweep);

  // optional .rf_phreaker.protobuf.rp_lte_update lte_full_scan = 9;
  bool has_lte_full_scan() const;
  void clear_lte_full_scan();
  static const int kLteFullScanFieldNumber = 9;
  const ::rf_phreaker::protobuf::rp_lte_update& lte_full_scan() const;
  ::rf_phreaker::protobuf::rp_lte_update* mutable_lte_full_scan();
  ::rf_phreaker::protobuf::rp_lte_update* release_lte_full_scan();
  void set_allocated_lte_full_scan(::rf_phreaker::protobuf::rp_lte_update* lte_full_scan);

  // optional .rf_phreaker.protobuf.rp_lte_update lte_sweep = 10;
  bool has_lte_sweep() const;
  void clear_lte_sweep();
  static const int kLteSweepFieldNumber = 10;
  const ::rf_phreaker::protobuf::rp_lte_update& lte_sweep() const;
  ::rf_phreaker::protobuf::rp_lte_update* mutable_lte_sweep();
  ::rf_phreaker::protobuf::rp_lte_update* release_lte_sweep();
  void set_allocated_lte_sweep(::rf_phreaker::protobuf::rp_lte_update* lte_sweep);

  UpdateCase update_case() const;
  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_update)
 private:
  inline void set_has_log();
  inline void set_has_msg();
  inline void set_has_device();
  inline void set_has_gps();
  inline void set_has_gsm_full_scan();
  inline void set_has_gsm_sweep();
  inline void set_has_wcdma_full_scan();
  inline void set_has_wcdma_sweep();
  inline void set_has_lte_full_scan();
  inline void set_has_lte_sweep();

  inline bool has_update() const;
  void clear_update();
  inline void clear_has_update();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union UpdateUnion {
    UpdateUnion() {}
    ::rf_phreaker::protobuf::rp_log* log_;
    ::rf_phreaker::protobuf::rp_message* msg_;
    ::rf_phreaker::protobuf::rp_device_info* device_;
    ::rf_phreaker::protobuf::rp_gps* gps_;
    ::rf_phreaker::protobuf::rp_gsm_update* gsm_full_scan_;
    ::rf_phreaker::protobuf::rp_gsm_update* gsm_sweep_;
    ::rf_phreaker::protobuf::rp_wcdma_update* wcdma_full_scan_;
    ::rf_phreaker::protobuf::rp_wcdma_update* wcdma_sweep_;
    ::rf_phreaker::protobuf::rp_lte_update* lte_full_scan_;
    ::rf_phreaker::protobuf::rp_lte_update* lte_sweep_;
  } update_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_update* default_instance_;
};
// -------------------------------------------------------------------

class rp_log : public ::google::protobuf::Message {
 public:
  rp_log();
  virtual ~rp_log();

  rp_log(const rp_log& from);

  inline rp_log& operator=(const rp_log& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_log& default_instance();

  void Swap(rp_log* other);

  // implements Message ----------------------------------------------

  inline rp_log* New() const { return New(NULL); }

  rp_log* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_log& from);
  void MergeFrom(const rp_log& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_log* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_log)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_log* default_instance_;
};
// -------------------------------------------------------------------

class rp_message : public ::google::protobuf::Message {
 public:
  rp_message();
  virtual ~rp_message();

  rp_message(const rp_message& from);

  inline rp_message& operator=(const rp_message& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_message& default_instance();

  void Swap(rp_message* other);

  // implements Message ----------------------------------------------

  inline rp_message* New() const { return New(NULL); }

  rp_message* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_message& from);
  void MergeFrom(const rp_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::rf_phreaker::protobuf::rp_status status() const;
  void set_status(::rf_phreaker::protobuf::rp_status value);

  // optional string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_message* default_instance_;
};
// -------------------------------------------------------------------

class rp_frequency_path : public ::google::protobuf::Message {
 public:
  rp_frequency_path();
  virtual ~rp_frequency_path();

  rp_frequency_path(const rp_frequency_path& from);

  inline rp_frequency_path& operator=(const rp_frequency_path& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_frequency_path& default_instance();

  void Swap(rp_frequency_path* other);

  // implements Message ----------------------------------------------

  inline rp_frequency_path* New() const { return New(NULL); }

  rp_frequency_path* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_frequency_path& from);
  void MergeFrom(const rp_frequency_path& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_frequency_path* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 low_freq = 1;
  void clear_low_freq();
  static const int kLowFreqFieldNumber = 1;
  ::google::protobuf::int64 low_freq() const;
  void set_low_freq(::google::protobuf::int64 value);

  // optional int64 high_freq = 2;
  void clear_high_freq();
  static const int kHighFreqFieldNumber = 2;
  ::google::protobuf::int64 high_freq() const;
  void set_high_freq(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_frequency_path)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 low_freq_;
  ::google::protobuf::int64 high_freq_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_frequency_path* default_instance_;
};
// -------------------------------------------------------------------

class rp_device_info : public ::google::protobuf::Message {
 public:
  rp_device_info();
  virtual ~rp_device_info();

  rp_device_info(const rp_device_info& from);

  inline rp_device_info& operator=(const rp_device_info& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_device_info& default_instance();

  void Swap(rp_device_info* other);

  // implements Message ----------------------------------------------

  inline rp_device_info* New() const { return New(NULL); }

  rp_device_info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_device_info& from);
  void MergeFrom(const rp_device_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_device_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serial = 1;
  void clear_serial();
  static const int kSerialFieldNumber = 1;
  const ::std::string& serial() const;
  void set_serial(const ::std::string& value);
  void set_serial(const char* value);
  void set_serial(const char* value, size_t size);
  ::std::string* mutable_serial();
  ::std::string* release_serial();
  void set_allocated_serial(::std::string* serial);

  // optional .rf_phreaker.protobuf.rp_device_communication device_communication = 2;
  void clear_device_communication();
  static const int kDeviceCommunicationFieldNumber = 2;
  ::rf_phreaker::protobuf::rp_device_communication device_communication() const;
  void set_device_communication(::rf_phreaker::protobuf::rp_device_communication value);

  // optional int64 frequency_correction_calibration_date = 3;
  void clear_frequency_correction_calibration_date();
  static const int kFrequencyCorrectionCalibrationDateFieldNumber = 3;
  ::google::protobuf::int64 frequency_correction_calibration_date() const;
  void set_frequency_correction_calibration_date(::google::protobuf::int64 value);

  // optional int64 rf_calibration_date = 4;
  void clear_rf_calibration_date();
  static const int kRfCalibrationDateFieldNumber = 4;
  ::google::protobuf::int64 rf_calibration_date() const;
  void set_rf_calibration_date(::google::protobuf::int64 value);

  // repeated .rf_phreaker.protobuf.rp_frequency_path frequency_paths = 5;
  int frequency_paths_size() const;
  void clear_frequency_paths();
  static const int kFrequencyPathsFieldNumber = 5;
  const ::rf_phreaker::protobuf::rp_frequency_path& frequency_paths(int index) const;
  ::rf_phreaker::protobuf::rp_frequency_path* mutable_frequency_paths(int index);
  ::rf_phreaker::protobuf::rp_frequency_path* add_frequency_paths();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_frequency_path >*
      mutable_frequency_paths();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_frequency_path >&
      frequency_paths() const;

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_device_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr serial_;
  ::google::protobuf::int64 frequency_correction_calibration_date_;
  ::google::protobuf::int64 rf_calibration_date_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_frequency_path > frequency_paths_;
  int device_communication_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_device_info* default_instance_;
};
// -------------------------------------------------------------------

class rp_satellite : public ::google::protobuf::Message {
 public:
  rp_satellite();
  virtual ~rp_satellite();

  rp_satellite(const rp_satellite& from);

  inline rp_satellite& operator=(const rp_satellite& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_satellite& default_instance();

  void Swap(rp_satellite* other);

  // implements Message ----------------------------------------------

  inline rp_satellite* New() const { return New(NULL); }

  rp_satellite* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_satellite& from);
  void MergeFrom(const rp_satellite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_satellite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 prn = 1;
  void clear_prn();
  static const int kPrnFieldNumber = 1;
  ::google::protobuf::int32 prn() const;
  void set_prn(::google::protobuf::int32 value);

  // optional double snr = 2;
  void clear_snr();
  static const int kSnrFieldNumber = 2;
  double snr() const;
  void set_snr(double value);

  // optional double elevation = 3;
  void clear_elevation();
  static const int kElevationFieldNumber = 3;
  double elevation() const;
  void set_elevation(double value);

  // optional double azimuth = 4;
  void clear_azimuth();
  static const int kAzimuthFieldNumber = 4;
  double azimuth() const;
  void set_azimuth(double value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_satellite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double snr_;
  double elevation_;
  double azimuth_;
  ::google::protobuf::int32 prn_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_satellite* default_instance_;
};
// -------------------------------------------------------------------

class rp_gps : public ::google::protobuf::Message {
 public:
  rp_gps();
  virtual ~rp_gps();

  rp_gps(const rp_gps& from);

  inline rp_gps& operator=(const rp_gps& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_gps& default_instance();

  void Swap(rp_gps* other);

  // implements Message ----------------------------------------------

  inline rp_gps* New() const { return New(NULL); }

  rp_gps* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_gps& from);
  void MergeFrom(const rp_gps& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_gps* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serial = 1;
  void clear_serial();
  static const int kSerialFieldNumber = 1;
  const ::std::string& serial() const;
  void set_serial(const ::std::string& value);
  void set_serial(const char* value);
  void set_serial(const char* value, size_t size);
  ::std::string* mutable_serial();
  ::std::string* release_serial();
  void set_allocated_serial(::std::string* serial);

  // optional bool lock = 2;
  void clear_lock();
  static const int kLockFieldNumber = 2;
  bool lock() const;
  void set_lock(bool value);

  // optional int64 coordinated_universal_time = 3;
  void clear_coordinated_universal_time();
  static const int kCoordinatedUniversalTimeFieldNumber = 3;
  ::google::protobuf::int64 coordinated_universal_time() const;
  void set_coordinated_universal_time(::google::protobuf::int64 value);

  // optional int32 visible_satellites = 4;
  void clear_visible_satellites();
  static const int kVisibleSatellitesFieldNumber = 4;
  ::google::protobuf::int32 visible_satellites() const;
  void set_visible_satellites(::google::protobuf::int32 value);

  // optional int32 tracking_satellites = 5;
  void clear_tracking_satellites();
  static const int kTrackingSatellitesFieldNumber = 5;
  ::google::protobuf::int32 tracking_satellites() const;
  void set_tracking_satellites(::google::protobuf::int32 value);

  // optional double latitude = 6;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 6;
  double latitude() const;
  void set_latitude(double value);

  // optional double longitude = 7;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 7;
  double longitude() const;
  void set_longitude(double value);

  // optional double altitude = 8;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 8;
  double altitude() const;
  void set_altitude(double value);

  // optional double angle = 9;
  void clear_angle();
  static const int kAngleFieldNumber = 9;
  double angle() const;
  void set_angle(double value);

  // optional double speed = 10;
  void clear_speed();
  static const int kSpeedFieldNumber = 10;
  double speed() const;
  void set_speed(double value);

  // optional double dilution_of_precision = 11;
  void clear_dilution_of_precision();
  static const int kDilutionOfPrecisionFieldNumber = 11;
  double dilution_of_precision() const;
  void set_dilution_of_precision(double value);

  // optional double horizontal_accuracy_meters = 12;
  void clear_horizontal_accuracy_meters();
  static const int kHorizontalAccuracyMetersFieldNumber = 12;
  double horizontal_accuracy_meters() const;
  void set_horizontal_accuracy_meters(double value);

  // optional double vertical_accuracy_meters = 13;
  void clear_vertical_accuracy_meters();
  static const int kVerticalAccuracyMetersFieldNumber = 13;
  double vertical_accuracy_meters() const;
  void set_vertical_accuracy_meters(double value);

  // optional int64 raw_status = 14;
  void clear_raw_status();
  static const int kRawStatusFieldNumber = 14;
  ::google::protobuf::int64 raw_status() const;
  void set_raw_status(::google::protobuf::int64 value);

  // repeated .rf_phreaker.protobuf.rp_satellite satellites = 15;
  int satellites_size() const;
  void clear_satellites();
  static const int kSatellitesFieldNumber = 15;
  const ::rf_phreaker::protobuf::rp_satellite& satellites(int index) const;
  ::rf_phreaker::protobuf::rp_satellite* mutable_satellites(int index);
  ::rf_phreaker::protobuf::rp_satellite* add_satellites();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_satellite >*
      mutable_satellites();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_satellite >&
      satellites() const;

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_gps)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr serial_;
  ::google::protobuf::int64 coordinated_universal_time_;
  bool lock_;
  ::google::protobuf::int32 visible_satellites_;
  double latitude_;
  double longitude_;
  double altitude_;
  double angle_;
  double speed_;
  double dilution_of_precision_;
  double horizontal_accuracy_meters_;
  double vertical_accuracy_meters_;
  ::google::protobuf::int64 raw_status_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_satellite > satellites_;
  ::google::protobuf::int32 tracking_satellites_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_gps* default_instance_;
};
// -------------------------------------------------------------------

class rp_base : public ::google::protobuf::Message {
 public:
  rp_base();
  virtual ~rp_base();

  rp_base(const rp_base& from);

  inline rp_base& operator=(const rp_base& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_base& default_instance();

  void Swap(rp_base* other);

  // implements Message ----------------------------------------------

  inline rp_base* New() const { return New(NULL); }

  rp_base* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_base& from);
  void MergeFrom(const rp_base& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_base* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serial = 1;
  void clear_serial();
  static const int kSerialFieldNumber = 1;
  const ::std::string& serial() const;
  void set_serial(const ::std::string& value);
  void set_serial(const char* value);
  void set_serial(const char* value, size_t size);
  ::std::string* mutable_serial();
  ::std::string* release_serial();
  void set_allocated_serial(::std::string* serial);

  // optional int64 collection_round = 2;
  void clear_collection_round();
  static const int kCollectionRoundFieldNumber = 2;
  ::google::protobuf::int64 collection_round() const;
  void set_collection_round(::google::protobuf::int64 value);

  // optional int64 measurement_frequency = 3;
  void clear_measurement_frequency();
  static const int kMeasurementFrequencyFieldNumber = 3;
  ::google::protobuf::int64 measurement_frequency() const;
  void set_measurement_frequency(::google::protobuf::int64 value);

  // optional int32 measurement_bandwidth = 4;
  void clear_measurement_bandwidth();
  static const int kMeasurementBandwidthFieldNumber = 4;
  ::google::protobuf::int32 measurement_bandwidth() const;
  void set_measurement_bandwidth(::google::protobuf::int32 value);

  // optional double measurement_signal_level = 5;
  void clear_measurement_signal_level();
  static const int kMeasurementSignalLevelFieldNumber = 5;
  double measurement_signal_level() const;
  void set_measurement_signal_level(double value);

  // optional int64 time = 6;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // optional int32 status_flags = 7;
  void clear_status_flags();
  static const int kStatusFlagsFieldNumber = 7;
  ::google::protobuf::int32 status_flags() const;
  void set_status_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_base)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr serial_;
  ::google::protobuf::int64 collection_round_;
  ::google::protobuf::int64 measurement_frequency_;
  double measurement_signal_level_;
  ::google::protobuf::int32 measurement_bandwidth_;
  ::google::protobuf::int32 status_flags_;
  ::google::protobuf::int64 time_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_base* default_instance_;
};
// -------------------------------------------------------------------

class rp_plmn : public ::google::protobuf::Message {
 public:
  rp_plmn();
  virtual ~rp_plmn();

  rp_plmn(const rp_plmn& from);

  inline rp_plmn& operator=(const rp_plmn& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_plmn& default_instance();

  void Swap(rp_plmn* other);

  // implements Message ----------------------------------------------

  inline rp_plmn* New() const { return New(NULL); }

  rp_plmn* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_plmn& from);
  void MergeFrom(const rp_plmn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_plmn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mcc = 1;
  void clear_mcc();
  static const int kMccFieldNumber = 1;
  const ::std::string& mcc() const;
  void set_mcc(const ::std::string& value);
  void set_mcc(const char* value);
  void set_mcc(const char* value, size_t size);
  ::std::string* mutable_mcc();
  ::std::string* release_mcc();
  void set_allocated_mcc(::std::string* mcc);

  // optional string mnc = 2;
  void clear_mnc();
  static const int kMncFieldNumber = 2;
  const ::std::string& mnc() const;
  void set_mnc(const ::std::string& value);
  void set_mnc(const char* value);
  void set_mnc(const char* value, size_t size);
  ::std::string* mutable_mnc();
  ::std::string* release_mnc();
  void set_allocated_mnc(::std::string* mnc);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_plmn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr mcc_;
  ::google::protobuf::internal::ArenaStringPtr mnc_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_plmn* default_instance_;
};
// -------------------------------------------------------------------

class rp_raw_layer_3 : public ::google::protobuf::Message {
 public:
  rp_raw_layer_3();
  virtual ~rp_raw_layer_3();

  rp_raw_layer_3(const rp_raw_layer_3& from);

  inline rp_raw_layer_3& operator=(const rp_raw_layer_3& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_raw_layer_3& default_instance();

  void Swap(rp_raw_layer_3* other);

  // implements Message ----------------------------------------------

  inline rp_raw_layer_3* New() const { return New(NULL); }

  rp_raw_layer_3* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_raw_layer_3& from);
  void MergeFrom(const rp_raw_layer_3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_raw_layer_3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes bytes = 1;
  void clear_bytes();
  static const int kBytesFieldNumber = 1;
  const ::std::string& bytes() const;
  void set_bytes(const ::std::string& value);
  void set_bytes(const char* value);
  void set_bytes(const void* value, size_t size);
  ::std::string* mutable_bytes();
  ::std::string* release_bytes();
  void set_allocated_bytes(::std::string* bytes);

  // optional int32 unused_bits = 2;
  void clear_unused_bits();
  static const int kUnusedBitsFieldNumber = 2;
  ::google::protobuf::int32 unused_bits() const;
  void set_unused_bits(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_raw_layer_3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr bytes_;
  ::google::protobuf::int32 unused_bits_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_raw_layer_3* default_instance_;
};
// -------------------------------------------------------------------

class rp_gsm_utran_neighbor : public ::google::protobuf::Message {
 public:
  rp_gsm_utran_neighbor();
  virtual ~rp_gsm_utran_neighbor();

  rp_gsm_utran_neighbor(const rp_gsm_utran_neighbor& from);

  inline rp_gsm_utran_neighbor& operator=(const rp_gsm_utran_neighbor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_gsm_utran_neighbor& default_instance();

  void Swap(rp_gsm_utran_neighbor* other);

  // implements Message ----------------------------------------------

  inline rp_gsm_utran_neighbor* New() const { return New(NULL); }

  rp_gsm_utran_neighbor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_gsm_utran_neighbor& from);
  void MergeFrom(const rp_gsm_utran_neighbor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_gsm_utran_neighbor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_duplex_type duplexing = 1;
  void clear_duplexing();
  static const int kDuplexingFieldNumber = 1;
  ::rf_phreaker::protobuf::rp_duplex_type duplexing() const;
  void set_duplexing(::rf_phreaker::protobuf::rp_duplex_type value);

  // optional int32 arfcn = 2;
  void clear_arfcn();
  static const int kArfcnFieldNumber = 2;
  ::google::protobuf::int32 arfcn() const;
  void set_arfcn(::google::protobuf::int32 value);

  // optional .rf_phreaker.protobuf.rp_utran_bandwidth_type bandwidth = 3;
  void clear_bandwidth();
  static const int kBandwidthFieldNumber = 3;
  ::rf_phreaker::protobuf::rp_utran_bandwidth_type bandwidth() const;
  void set_bandwidth(::rf_phreaker::protobuf::rp_utran_bandwidth_type value);

  // repeated int32 scrambling_codes = 4 [packed = true];
  int scrambling_codes_size() const;
  void clear_scrambling_codes();
  static const int kScramblingCodesFieldNumber = 4;
  ::google::protobuf::int32 scrambling_codes(int index) const;
  void set_scrambling_codes(int index, ::google::protobuf::int32 value);
  void add_scrambling_codes(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      scrambling_codes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_scrambling_codes();

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_gsm_utran_neighbor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int duplexing_;
  ::google::protobuf::int32 arfcn_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > scrambling_codes_;
  mutable int _scrambling_codes_cached_byte_size_;
  int bandwidth_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_gsm_utran_neighbor* default_instance_;
};
// -------------------------------------------------------------------

class rp_pcid_group : public ::google::protobuf::Message {
 public:
  rp_pcid_group();
  virtual ~rp_pcid_group();

  rp_pcid_group(const rp_pcid_group& from);

  inline rp_pcid_group& operator=(const rp_pcid_group& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_pcid_group& default_instance();

  void Swap(rp_pcid_group* other);

  // implements Message ----------------------------------------------

  inline rp_pcid_group* New() const { return New(NULL); }

  rp_pcid_group* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_pcid_group& from);
  void MergeFrom(const rp_pcid_group& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_pcid_group* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 pcids = 1 [packed = true];
  int pcids_size() const;
  void clear_pcids();
  static const int kPcidsFieldNumber = 1;
  ::google::protobuf::int32 pcids(int index) const;
  void set_pcids(int index, ::google::protobuf::int32 value);
  void add_pcids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pcids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pcids();

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_pcid_group)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pcids_;
  mutable int _pcids_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_pcid_group* default_instance_;
};
// -------------------------------------------------------------------

class rp_gsm_eutran_neighbor : public ::google::protobuf::Message {
 public:
  rp_gsm_eutran_neighbor();
  virtual ~rp_gsm_eutran_neighbor();

  rp_gsm_eutran_neighbor(const rp_gsm_eutran_neighbor& from);

  inline rp_gsm_eutran_neighbor& operator=(const rp_gsm_eutran_neighbor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_gsm_eutran_neighbor& default_instance();

  void Swap(rp_gsm_eutran_neighbor* other);

  // implements Message ----------------------------------------------

  inline rp_gsm_eutran_neighbor* New() const { return New(NULL); }

  rp_gsm_eutran_neighbor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_gsm_eutran_neighbor& from);
  void MergeFrom(const rp_gsm_eutran_neighbor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_gsm_eutran_neighbor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 earfcn = 1;
  void clear_earfcn();
  static const int kEarfcnFieldNumber = 1;
  ::google::protobuf::int32 earfcn() const;
  void set_earfcn(::google::protobuf::int32 value);

  // optional .rf_phreaker.protobuf.rp_eutran_bandwidth_type bandwidth = 2;
  void clear_bandwidth();
  static const int kBandwidthFieldNumber = 2;
  ::rf_phreaker::protobuf::rp_eutran_bandwidth_type bandwidth() const;
  void set_bandwidth(::rf_phreaker::protobuf::rp_eutran_bandwidth_type value);

  // optional int32 priority = 3;
  void clear_priority();
  static const int kPriorityFieldNumber = 3;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  // optional int32 threshold_high_db = 4;
  void clear_threshold_high_db();
  static const int kThresholdHighDbFieldNumber = 4;
  ::google::protobuf::int32 threshold_high_db() const;
  void set_threshold_high_db(::google::protobuf::int32 value);

  // optional int32 threshold_low_db = 5;
  void clear_threshold_low_db();
  static const int kThresholdLowDbFieldNumber = 5;
  ::google::protobuf::int32 threshold_low_db() const;
  void set_threshold_low_db(::google::protobuf::int32 value);

  // optional int32 qrxlevmin_db = 6;
  void clear_qrxlevmin_db();
  static const int kQrxlevminDbFieldNumber = 6;
  ::google::protobuf::int32 qrxlevmin_db() const;
  void set_qrxlevmin_db(::google::protobuf::int32 value);

  // optional .rf_phreaker.protobuf.rp_pcid_group pcids_allowed = 7;
  bool has_pcids_allowed() const;
  void clear_pcids_allowed();
  static const int kPcidsAllowedFieldNumber = 7;
  const ::rf_phreaker::protobuf::rp_pcid_group& pcids_allowed() const;
  ::rf_phreaker::protobuf::rp_pcid_group* mutable_pcids_allowed();
  ::rf_phreaker::protobuf::rp_pcid_group* release_pcids_allowed();
  void set_allocated_pcids_allowed(::rf_phreaker::protobuf::rp_pcid_group* pcids_allowed);

  // optional .rf_phreaker.protobuf.rp_pcid_group pcids_not_allowed = 8;
  bool has_pcids_not_allowed() const;
  void clear_pcids_not_allowed();
  static const int kPcidsNotAllowedFieldNumber = 8;
  const ::rf_phreaker::protobuf::rp_pcid_group& pcids_not_allowed() const;
  ::rf_phreaker::protobuf::rp_pcid_group* mutable_pcids_not_allowed();
  ::rf_phreaker::protobuf::rp_pcid_group* release_pcids_not_allowed();
  void set_allocated_pcids_not_allowed(::rf_phreaker::protobuf::rp_pcid_group* pcids_not_allowed);

  // repeated .rf_phreaker.protobuf.rp_pcid_group pcids_same_tracking_area = 9;
  int pcids_same_tracking_area_size() const;
  void clear_pcids_same_tracking_area();
  static const int kPcidsSameTrackingAreaFieldNumber = 9;
  const ::rf_phreaker::protobuf::rp_pcid_group& pcids_same_tracking_area(int index) const;
  ::rf_phreaker::protobuf::rp_pcid_group* mutable_pcids_same_tracking_area(int index);
  ::rf_phreaker::protobuf::rp_pcid_group* add_pcids_same_tracking_area();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_pcid_group >*
      mutable_pcids_same_tracking_area();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_pcid_group >&
      pcids_same_tracking_area() const;

  // repeated .rf_phreaker.protobuf.rp_pcid_group pcids_different_tracking_area = 10;
  int pcids_different_tracking_area_size() const;
  void clear_pcids_different_tracking_area();
  static const int kPcidsDifferentTrackingAreaFieldNumber = 10;
  const ::rf_phreaker::protobuf::rp_pcid_group& pcids_different_tracking_area(int index) const;
  ::rf_phreaker::protobuf::rp_pcid_group* mutable_pcids_different_tracking_area(int index);
  ::rf_phreaker::protobuf::rp_pcid_group* add_pcids_different_tracking_area();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_pcid_group >*
      mutable_pcids_different_tracking_area();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_pcid_group >&
      pcids_different_tracking_area() const;

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_gsm_eutran_neighbor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 earfcn_;
  int bandwidth_;
  ::google::protobuf::int32 priority_;
  ::google::protobuf::int32 threshold_high_db_;
  ::google::protobuf::int32 threshold_low_db_;
  ::google::protobuf::int32 qrxlevmin_db_;
  ::rf_phreaker::protobuf::rp_pcid_group* pcids_allowed_;
  ::rf_phreaker::protobuf::rp_pcid_group* pcids_not_allowed_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_pcid_group > pcids_same_tracking_area_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_pcid_group > pcids_different_tracking_area_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_gsm_eutran_neighbor* default_instance_;
};
// -------------------------------------------------------------------

class rp_gsm_si1 : public ::google::protobuf::Message {
 public:
  rp_gsm_si1();
  virtual ~rp_gsm_si1();

  rp_gsm_si1(const rp_gsm_si1& from);

  inline rp_gsm_si1& operator=(const rp_gsm_si1& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_gsm_si1& default_instance();

  void Swap(rp_gsm_si1* other);

  // implements Message ----------------------------------------------

  inline rp_gsm_si1* New() const { return New(NULL); }

  rp_gsm_si1* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_gsm_si1& from);
  void MergeFrom(const rp_gsm_si1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_gsm_si1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 2;
  void clear_band_indicator();
  static const int kBandIndicatorFieldNumber = 2;
  ::rf_phreaker::protobuf::rp_band_indicator_type band_indicator() const;
  void set_band_indicator(::rf_phreaker::protobuf::rp_band_indicator_type value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_gsm_si1)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int band_indicator_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_gsm_si1* default_instance_;
};
// -------------------------------------------------------------------

class rp_gsm_si2 : public ::google::protobuf::Message {
 public:
  rp_gsm_si2();
  virtual ~rp_gsm_si2();

  rp_gsm_si2(const rp_gsm_si2& from);

  inline rp_gsm_si2& operator=(const rp_gsm_si2& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_gsm_si2& default_instance();

  void Swap(rp_gsm_si2* other);

  // implements Message ----------------------------------------------

  inline rp_gsm_si2* New() const { return New(NULL); }

  rp_gsm_si2* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_gsm_si2& from);
  void MergeFrom(const rp_gsm_si2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_gsm_si2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 bcch_neighbors = 2 [packed = true];
  int bcch_neighbors_size() const;
  void clear_bcch_neighbors();
  static const int kBcchNeighborsFieldNumber = 2;
  ::google::protobuf::int32 bcch_neighbors(int index) const;
  void set_bcch_neighbors(int index, ::google::protobuf::int32 value);
  void add_bcch_neighbors(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bcch_neighbors() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bcch_neighbors();

  // optional bool extension_indication = 3;
  void clear_extension_indication();
  static const int kExtensionIndicationFieldNumber = 3;
  bool extension_indication() const;
  void set_extension_indication(bool value);

  // optional int32 bcch_allocation_indication = 4;
  void clear_bcch_allocation_indication();
  static const int kBcchAllocationIndicationFieldNumber = 4;
  ::google::protobuf::int32 bcch_allocation_indication() const;
  void set_bcch_allocation_indication(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_gsm_si2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bcch_neighbors_;
  mutable int _bcch_neighbors_cached_byte_size_;
  bool extension_indication_;
  ::google::protobuf::int32 bcch_allocation_indication_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_gsm_si2* default_instance_;
};
// -------------------------------------------------------------------

class rp_gsm_si2_bis : public ::google::protobuf::Message {
 public:
  rp_gsm_si2_bis();
  virtual ~rp_gsm_si2_bis();

  rp_gsm_si2_bis(const rp_gsm_si2_bis& from);

  inline rp_gsm_si2_bis& operator=(const rp_gsm_si2_bis& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_gsm_si2_bis& default_instance();

  void Swap(rp_gsm_si2_bis* other);

  // implements Message ----------------------------------------------

  inline rp_gsm_si2_bis* New() const { return New(NULL); }

  rp_gsm_si2_bis* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_gsm_si2_bis& from);
  void MergeFrom(const rp_gsm_si2_bis& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_gsm_si2_bis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 extended_bcch_neighbors = 2 [packed = true];
  int extended_bcch_neighbors_size() const;
  void clear_extended_bcch_neighbors();
  static const int kExtendedBcchNeighborsFieldNumber = 2;
  ::google::protobuf::int32 extended_bcch_neighbors(int index) const;
  void set_extended_bcch_neighbors(int index, ::google::protobuf::int32 value);
  void add_extended_bcch_neighbors(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      extended_bcch_neighbors() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_extended_bcch_neighbors();

  // optional bool extension_indication = 3;
  void clear_extension_indication();
  static const int kExtensionIndicationFieldNumber = 3;
  bool extension_indication() const;
  void set_extension_indication(bool value);

  // optional int32 bcch_allocation_indication = 4;
  void clear_bcch_allocation_indication();
  static const int kBcchAllocationIndicationFieldNumber = 4;
  ::google::protobuf::int32 bcch_allocation_indication() const;
  void set_bcch_allocation_indication(::google::protobuf::int32 value);

  // optional int32 rest_octet_index = 5;
  void clear_rest_octet_index();
  static const int kRestOctetIndexFieldNumber = 5;
  ::google::protobuf::int32 rest_octet_index() const;
  void set_rest_octet_index(::google::protobuf::int32 value);

  // optional int32 rest_octet_count = 6;
  void clear_rest_octet_count();
  static const int kRestOctetCountFieldNumber = 6;
  ::google::protobuf::int32 rest_octet_count() const;
  void set_rest_octet_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_gsm_si2_bis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > extended_bcch_neighbors_;
  mutable int _extended_bcch_neighbors_cached_byte_size_;
  bool extension_indication_;
  ::google::protobuf::int32 bcch_allocation_indication_;
  ::google::protobuf::int32 rest_octet_index_;
  ::google::protobuf::int32 rest_octet_count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_gsm_si2_bis* default_instance_;
};
// -------------------------------------------------------------------

class rp_gsm_si2_ter : public ::google::protobuf::Message {
 public:
  rp_gsm_si2_ter();
  virtual ~rp_gsm_si2_ter();

  rp_gsm_si2_ter(const rp_gsm_si2_ter& from);

  inline rp_gsm_si2_ter& operator=(const rp_gsm_si2_ter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_gsm_si2_ter& default_instance();

  void Swap(rp_gsm_si2_ter* other);

  // implements Message ----------------------------------------------

  inline rp_gsm_si2_ter* New() const { return New(NULL); }

  rp_gsm_si2_ter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_gsm_si2_ter& from);
  void MergeFrom(const rp_gsm_si2_ter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_gsm_si2_ter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 extended_bcch_neighbors = 2 [packed = true];
  int extended_bcch_neighbors_size() const;
  void clear_extended_bcch_neighbors();
  static const int kExtendedBcchNeighborsFieldNumber = 2;
  ::google::protobuf::int32 extended_bcch_neighbors(int index) const;
  void set_extended_bcch_neighbors(int index, ::google::protobuf::int32 value);
  void add_extended_bcch_neighbors(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      extended_bcch_neighbors() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_extended_bcch_neighbors();

  // optional int32 gsm_bcch_allocation_indication = 3;
  void clear_gsm_bcch_allocation_indication();
  static const int kGsmBcchAllocationIndicationFieldNumber = 3;
  ::google::protobuf::int32 gsm_bcch_allocation_indication() const;
  void set_gsm_bcch_allocation_indication(::google::protobuf::int32 value);

  // optional int32 bcch_neighbors_multiband_reporting = 4;
  void clear_bcch_neighbors_multiband_reporting();
  static const int kBcchNeighborsMultibandReportingFieldNumber = 4;
  ::google::protobuf::int32 bcch_neighbors_multiband_reporting() const;
  void set_bcch_neighbors_multiband_reporting(::google::protobuf::int32 value);

  // repeated .rf_phreaker.protobuf.rp_gsm_utran_neighbor utran_neighbors = 5;
  int utran_neighbors_size() const;
  void clear_utran_neighbors();
  static const int kUtranNeighborsFieldNumber = 5;
  const ::rf_phreaker::protobuf::rp_gsm_utran_neighbor& utran_neighbors(int index) const;
  ::rf_phreaker::protobuf::rp_gsm_utran_neighbor* mutable_utran_neighbors(int index);
  ::rf_phreaker::protobuf::rp_gsm_utran_neighbor* add_utran_neighbors();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_utran_neighbor >*
      mutable_utran_neighbors();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_utran_neighbor >&
      utran_neighbors() const;

  // optional int32 rest_octet_index = 6;
  void clear_rest_octet_index();
  static const int kRestOctetIndexFieldNumber = 6;
  ::google::protobuf::int32 rest_octet_index() const;
  void set_rest_octet_index(::google::protobuf::int32 value);

  // optional int32 rest_octet_count = 7;
  void clear_rest_octet_count();
  static const int kRestOctetCountFieldNumber = 7;
  ::google::protobuf::int32 rest_octet_count() const;
  void set_rest_octet_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_gsm_si2_ter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > extended_bcch_neighbors_;
  mutable int _extended_bcch_neighbors_cached_byte_size_;
  ::google::protobuf::int32 gsm_bcch_allocation_indication_;
  ::google::protobuf::int32 bcch_neighbors_multiband_reporting_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_utran_neighbor > utran_neighbors_;
  ::google::protobuf::int32 rest_octet_index_;
  ::google::protobuf::int32 rest_octet_count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_gsm_si2_ter* default_instance_;
};
// -------------------------------------------------------------------

class rp_gsm_si2_quater : public ::google::protobuf::Message {
 public:
  rp_gsm_si2_quater();
  virtual ~rp_gsm_si2_quater();

  rp_gsm_si2_quater(const rp_gsm_si2_quater& from);

  inline rp_gsm_si2_quater& operator=(const rp_gsm_si2_quater& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_gsm_si2_quater& default_instance();

  void Swap(rp_gsm_si2_quater* other);

  // implements Message ----------------------------------------------

  inline rp_gsm_si2_quater* New() const { return New(NULL); }

  rp_gsm_si2_quater* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_gsm_si2_quater& from);
  void MergeFrom(const rp_gsm_si2_quater& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_gsm_si2_quater* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gsm_bcch_allocation_indication = 2;
  void clear_gsm_bcch_allocation_indication();
  static const int kGsmBcchAllocationIndicationFieldNumber = 2;
  ::google::protobuf::int32 gsm_bcch_allocation_indication() const;
  void set_gsm_bcch_allocation_indication(::google::protobuf::int32 value);

  // optional int32 p3g_bcch_allocation_indication = 3;
  void clear_p3g_bcch_allocation_indication();
  static const int kP3GBcchAllocationIndicationFieldNumber = 3;
  ::google::protobuf::int32 p3g_bcch_allocation_indication() const;
  void set_p3g_bcch_allocation_indication(::google::protobuf::int32 value);

  // optional int32 utran_neighbor_cell_index_start_3g = 4;
  void clear_utran_neighbor_cell_index_start_3g();
  static const int kUtranNeighborCellIndexStart3GFieldNumber = 4;
  ::google::protobuf::int32 utran_neighbor_cell_index_start_3g() const;
  void set_utran_neighbor_cell_index_start_3g(::google::protobuf::int32 value);

  // optional int32 utran_neighbor_cell_absolute_index_start_emr = 5;
  void clear_utran_neighbor_cell_absolute_index_start_emr();
  static const int kUtranNeighborCellAbsoluteIndexStartEmrFieldNumber = 5;
  ::google::protobuf::int32 utran_neighbor_cell_absolute_index_start_emr() const;
  void set_utran_neighbor_cell_absolute_index_start_emr(::google::protobuf::int32 value);

  // repeated .rf_phreaker.protobuf.rp_gsm_utran_neighbor utran_neighbors = 6;
  int utran_neighbors_size() const;
  void clear_utran_neighbors();
  static const int kUtranNeighborsFieldNumber = 6;
  const ::rf_phreaker::protobuf::rp_gsm_utran_neighbor& utran_neighbors(int index) const;
  ::rf_phreaker::protobuf::rp_gsm_utran_neighbor* mutable_utran_neighbors(int index);
  ::rf_phreaker::protobuf::rp_gsm_utran_neighbor* add_utran_neighbors();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_utran_neighbor >*
      mutable_utran_neighbors();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_utran_neighbor >&
      utran_neighbors() const;

  // repeated .rf_phreaker.protobuf.rp_gsm_eutran_neighbor eutran_neighbors = 7;
  int eutran_neighbors_size() const;
  void clear_eutran_neighbors();
  static const int kEutranNeighborsFieldNumber = 7;
  const ::rf_phreaker::protobuf::rp_gsm_eutran_neighbor& eutran_neighbors(int index) const;
  ::rf_phreaker::protobuf::rp_gsm_eutran_neighbor* mutable_eutran_neighbors(int index);
  ::rf_phreaker::protobuf::rp_gsm_eutran_neighbor* add_eutran_neighbors();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_eutran_neighbor >*
      mutable_eutran_neighbors();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_eutran_neighbor >&
      eutran_neighbors() const;

  // optional int32 rest_octet_index = 8;
  void clear_rest_octet_index();
  static const int kRestOctetIndexFieldNumber = 8;
  ::google::protobuf::int32 rest_octet_index() const;
  void set_rest_octet_index(::google::protobuf::int32 value);

  // optional int32 rest_octet_count = 9;
  void clear_rest_octet_count();
  static const int kRestOctetCountFieldNumber = 9;
  ::google::protobuf::int32 rest_octet_count() const;
  void set_rest_octet_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_gsm_si2_quater)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 gsm_bcch_allocation_indication_;
  ::google::protobuf::int32 p3g_bcch_allocation_indication_;
  ::google::protobuf::int32 utran_neighbor_cell_index_start_3g_;
  ::google::protobuf::int32 utran_neighbor_cell_absolute_index_start_emr_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_utran_neighbor > utran_neighbors_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_eutran_neighbor > eutran_neighbors_;
  ::google::protobuf::int32 rest_octet_index_;
  ::google::protobuf::int32 rest_octet_count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_gsm_si2_quater* default_instance_;
};
// -------------------------------------------------------------------

class rp_gsm_selection_parameters : public ::google::protobuf::Message {
 public:
  rp_gsm_selection_parameters();
  virtual ~rp_gsm_selection_parameters();

  rp_gsm_selection_parameters(const rp_gsm_selection_parameters& from);

  inline rp_gsm_selection_parameters& operator=(const rp_gsm_selection_parameters& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_gsm_selection_parameters& default_instance();

  void Swap(rp_gsm_selection_parameters* other);

  // implements Message ----------------------------------------------

  inline rp_gsm_selection_parameters* New() const { return New(NULL); }

  rp_gsm_selection_parameters* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_gsm_selection_parameters& from);
  void MergeFrom(const rp_gsm_selection_parameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_gsm_selection_parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cbq = 1;
  void clear_cbq();
  static const int kCbqFieldNumber = 1;
  ::google::protobuf::int32 cbq() const;
  void set_cbq(::google::protobuf::int32 value);

  // optional int32 cell_reselect_offset_db = 2;
  void clear_cell_reselect_offset_db();
  static const int kCellReselectOffsetDbFieldNumber = 2;
  ::google::protobuf::int32 cell_reselect_offset_db() const;
  void set_cell_reselect_offset_db(::google::protobuf::int32 value);

  // optional int32 temporary_offset_db = 3;
  void clear_temporary_offset_db();
  static const int kTemporaryOffsetDbFieldNumber = 3;
  ::google::protobuf::int32 temporary_offset_db() const;
  void set_temporary_offset_db(::google::protobuf::int32 value);

  // optional int32 penalty_time_seconds = 4;
  void clear_penalty_time_seconds();
  static const int kPenaltyTimeSecondsFieldNumber = 4;
  ::google::protobuf::int32 penalty_time_seconds() const;
  void set_penalty_time_seconds(::google::protobuf::int32 value);

  // optional bool subtract_reselect_cell_offset_ignore_temp_offset = 5;
  void clear_subtract_reselect_cell_offset_ignore_temp_offset();
  static const int kSubtractReselectCellOffsetIgnoreTempOffsetFieldNumber = 5;
  bool subtract_reselect_cell_offset_ignore_temp_offset() const;
  void set_subtract_reselect_cell_offset_ignore_temp_offset(bool value);

  // optional bool apply_infinity_offset = 6;
  void clear_apply_infinity_offset();
  static const int kApplyInfinityOffsetFieldNumber = 6;
  bool apply_infinity_offset() const;
  void set_apply_infinity_offset(bool value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_gsm_selection_parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 cbq_;
  ::google::protobuf::int32 cell_reselect_offset_db_;
  ::google::protobuf::int32 temporary_offset_db_;
  ::google::protobuf::int32 penalty_time_seconds_;
  bool subtract_reselect_cell_offset_ignore_temp_offset_;
  bool apply_infinity_offset_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_gsm_selection_parameters* default_instance_;
};
// -------------------------------------------------------------------

class rp_gsm_si3 : public ::google::protobuf::Message {
 public:
  rp_gsm_si3();
  virtual ~rp_gsm_si3();

  rp_gsm_si3(const rp_gsm_si3& from);

  inline rp_gsm_si3& operator=(const rp_gsm_si3& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_gsm_si3& default_instance();

  void Swap(rp_gsm_si3* other);

  // implements Message ----------------------------------------------

  inline rp_gsm_si3* New() const { return New(NULL); }

  rp_gsm_si3* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_gsm_si3& from);
  void MergeFrom(const rp_gsm_si3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_gsm_si3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
  bool has_plmn() const;
  void clear_plmn();
  static const int kPlmnFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_plmn& plmn() const;
  ::rf_phreaker::protobuf::rp_plmn* mutable_plmn();
  ::rf_phreaker::protobuf::rp_plmn* release_plmn();
  void set_allocated_plmn(::rf_phreaker::protobuf::rp_plmn* plmn);

  // optional int32 location_area_code = 3;
  void clear_location_area_code();
  static const int kLocationAreaCodeFieldNumber = 3;
  ::google::protobuf::int32 location_area_code() const;
  void set_location_area_code(::google::protobuf::int32 value);

  // optional int32 cell_id = 4;
  void clear_cell_id();
  static const int kCellIdFieldNumber = 4;
  ::google::protobuf::int32 cell_id() const;
  void set_cell_id(::google::protobuf::int32 value);

  // optional int32 cell_reselect_hysteresis_db = 5;
  void clear_cell_reselect_hysteresis_db();
  static const int kCellReselectHysteresisDbFieldNumber = 5;
  ::google::protobuf::int32 cell_reselect_hysteresis_db() const;
  void set_cell_reselect_hysteresis_db(::google::protobuf::int32 value);

  // optional .rf_phreaker.protobuf.rp_gsm_selection_parameters selection_parameters = 6;
  bool has_selection_parameters() const;
  void clear_selection_parameters();
  static const int kSelectionParametersFieldNumber = 6;
  const ::rf_phreaker::protobuf::rp_gsm_selection_parameters& selection_parameters() const;
  ::rf_phreaker::protobuf::rp_gsm_selection_parameters* mutable_selection_parameters();
  ::rf_phreaker::protobuf::rp_gsm_selection_parameters* release_selection_parameters();
  void set_allocated_selection_parameters(::rf_phreaker::protobuf::rp_gsm_selection_parameters* selection_parameters);

  // optional int32 bs_ag_blks_res = 7;
  void clear_bs_ag_blks_res();
  static const int kBsAgBlksResFieldNumber = 7;
  ::google::protobuf::int32 bs_ag_blks_res() const;
  void set_bs_ag_blks_res(::google::protobuf::int32 value);

  // optional bool is_2ter_present = 8;
  void clear_is_2ter_present();
  static const int kIs2TerPresentFieldNumber = 8;
  bool is_2ter_present() const;
  void set_is_2ter_present(bool value);

  // optional bool is_2quater_present = 9;
  void clear_is_2quater_present();
  static const int kIs2QuaterPresentFieldNumber = 9;
  bool is_2quater_present() const;
  void set_is_2quater_present(bool value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_gsm_si3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rf_phreaker::protobuf::rp_plmn* plmn_;
  ::google::protobuf::int32 location_area_code_;
  ::google::protobuf::int32 cell_id_;
  ::rf_phreaker::protobuf::rp_gsm_selection_parameters* selection_parameters_;
  ::google::protobuf::int32 cell_reselect_hysteresis_db_;
  ::google::protobuf::int32 bs_ag_blks_res_;
  bool is_2ter_present_;
  bool is_2quater_present_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_gsm_si3* default_instance_;
};
// -------------------------------------------------------------------

class rp_gsm_si4 : public ::google::protobuf::Message {
 public:
  rp_gsm_si4();
  virtual ~rp_gsm_si4();

  rp_gsm_si4(const rp_gsm_si4& from);

  inline rp_gsm_si4& operator=(const rp_gsm_si4& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_gsm_si4& default_instance();

  void Swap(rp_gsm_si4* other);

  // implements Message ----------------------------------------------

  inline rp_gsm_si4* New() const { return New(NULL); }

  rp_gsm_si4* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_gsm_si4& from);
  void MergeFrom(const rp_gsm_si4& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_gsm_si4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
  bool has_plmn() const;
  void clear_plmn();
  static const int kPlmnFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_plmn& plmn() const;
  ::rf_phreaker::protobuf::rp_plmn* mutable_plmn();
  ::rf_phreaker::protobuf::rp_plmn* release_plmn();
  void set_allocated_plmn(::rf_phreaker::protobuf::rp_plmn* plmn);

  // optional int32 location_area_code = 3;
  void clear_location_area_code();
  static const int kLocationAreaCodeFieldNumber = 3;
  ::google::protobuf::int32 location_area_code() const;
  void set_location_area_code(::google::protobuf::int32 value);

  // optional int32 cell_id = 4;
  void clear_cell_id();
  static const int kCellIdFieldNumber = 4;
  ::google::protobuf::int32 cell_id() const;
  void set_cell_id(::google::protobuf::int32 value);

  // optional int32 cell_reselect_hysteresis_db = 5;
  void clear_cell_reselect_hysteresis_db();
  static const int kCellReselectHysteresisDbFieldNumber = 5;
  ::google::protobuf::int32 cell_reselect_hysteresis_db() const;
  void set_cell_reselect_hysteresis_db(::google::protobuf::int32 value);

  // optional .rf_phreaker.protobuf.rp_gsm_selection_parameters selection_parameters = 6;
  bool has_selection_parameters() const;
  void clear_selection_parameters();
  static const int kSelectionParametersFieldNumber = 6;
  const ::rf_phreaker::protobuf::rp_gsm_selection_parameters& selection_parameters() const;
  ::rf_phreaker::protobuf::rp_gsm_selection_parameters* mutable_selection_parameters();
  ::rf_phreaker::protobuf::rp_gsm_selection_parameters* release_selection_parameters();
  void set_allocated_selection_parameters(::rf_phreaker::protobuf::rp_gsm_selection_parameters* selection_parameters);

  // optional bool is_cbch_present = 7;
  void clear_is_cbch_present();
  static const int kIsCbchPresentFieldNumber = 7;
  bool is_cbch_present() const;
  void set_is_cbch_present(bool value);

  // optional bool have_additional_param_in_si7_si8 = 8;
  void clear_have_additional_param_in_si7_si8();
  static const int kHaveAdditionalParamInSi7Si8FieldNumber = 8;
  bool have_additional_param_in_si7_si8() const;
  void set_have_additional_param_in_si7_si8(bool value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_gsm_si4)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rf_phreaker::protobuf::rp_plmn* plmn_;
  ::google::protobuf::int32 location_area_code_;
  ::google::protobuf::int32 cell_id_;
  ::rf_phreaker::protobuf::rp_gsm_selection_parameters* selection_parameters_;
  ::google::protobuf::int32 cell_reselect_hysteresis_db_;
  bool is_cbch_present_;
  bool have_additional_param_in_si7_si8_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_gsm_si4* default_instance_;
};
// -------------------------------------------------------------------

class rp_gsm_layer_3 : public ::google::protobuf::Message {
 public:
  rp_gsm_layer_3();
  virtual ~rp_gsm_layer_3();

  rp_gsm_layer_3(const rp_gsm_layer_3& from);

  inline rp_gsm_layer_3& operator=(const rp_gsm_layer_3& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_gsm_layer_3& default_instance();

  void Swap(rp_gsm_layer_3* other);

  // implements Message ----------------------------------------------

  inline rp_gsm_layer_3* New() const { return New(NULL); }

  rp_gsm_layer_3* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_gsm_layer_3& from);
  void MergeFrom(const rp_gsm_layer_3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_gsm_layer_3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
  int raw_layer_3_size() const;
  void clear_raw_layer_3();
  static const int kRawLayer3FieldNumber = 1;
  const ::rf_phreaker::protobuf::rp_raw_layer_3& raw_layer_3(int index) const;
  ::rf_phreaker::protobuf::rp_raw_layer_3* mutable_raw_layer_3(int index);
  ::rf_phreaker::protobuf::rp_raw_layer_3* add_raw_layer_3();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >*
      mutable_raw_layer_3();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >&
      raw_layer_3() const;

  // optional .rf_phreaker.protobuf.rp_gsm_si1 si1 = 2;
  bool has_si1() const;
  void clear_si1();
  static const int kSi1FieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_gsm_si1& si1() const;
  ::rf_phreaker::protobuf::rp_gsm_si1* mutable_si1();
  ::rf_phreaker::protobuf::rp_gsm_si1* release_si1();
  void set_allocated_si1(::rf_phreaker::protobuf::rp_gsm_si1* si1);

  // optional .rf_phreaker.protobuf.rp_gsm_si2 si2 = 3;
  bool has_si2() const;
  void clear_si2();
  static const int kSi2FieldNumber = 3;
  const ::rf_phreaker::protobuf::rp_gsm_si2& si2() const;
  ::rf_phreaker::protobuf::rp_gsm_si2* mutable_si2();
  ::rf_phreaker::protobuf::rp_gsm_si2* release_si2();
  void set_allocated_si2(::rf_phreaker::protobuf::rp_gsm_si2* si2);

  // optional .rf_phreaker.protobuf.rp_gsm_si2_bis si2_bis = 4;
  bool has_si2_bis() const;
  void clear_si2_bis();
  static const int kSi2BisFieldNumber = 4;
  const ::rf_phreaker::protobuf::rp_gsm_si2_bis& si2_bis() const;
  ::rf_phreaker::protobuf::rp_gsm_si2_bis* mutable_si2_bis();
  ::rf_phreaker::protobuf::rp_gsm_si2_bis* release_si2_bis();
  void set_allocated_si2_bis(::rf_phreaker::protobuf::rp_gsm_si2_bis* si2_bis);

  // optional .rf_phreaker.protobuf.rp_gsm_si2_ter si2_ter = 5;
  bool has_si2_ter() const;
  void clear_si2_ter();
  static const int kSi2TerFieldNumber = 5;
  const ::rf_phreaker::protobuf::rp_gsm_si2_ter& si2_ter() const;
  ::rf_phreaker::protobuf::rp_gsm_si2_ter* mutable_si2_ter();
  ::rf_phreaker::protobuf::rp_gsm_si2_ter* release_si2_ter();
  void set_allocated_si2_ter(::rf_phreaker::protobuf::rp_gsm_si2_ter* si2_ter);

  // optional .rf_phreaker.protobuf.rp_gsm_si2_quater si2_quater = 6;
  bool has_si2_quater() const;
  void clear_si2_quater();
  static const int kSi2QuaterFieldNumber = 6;
  const ::rf_phreaker::protobuf::rp_gsm_si2_quater& si2_quater() const;
  ::rf_phreaker::protobuf::rp_gsm_si2_quater* mutable_si2_quater();
  ::rf_phreaker::protobuf::rp_gsm_si2_quater* release_si2_quater();
  void set_allocated_si2_quater(::rf_phreaker::protobuf::rp_gsm_si2_quater* si2_quater);

  // optional .rf_phreaker.protobuf.rp_gsm_si3 si3 = 7;
  bool has_si3() const;
  void clear_si3();
  static const int kSi3FieldNumber = 7;
  const ::rf_phreaker::protobuf::rp_gsm_si3& si3() const;
  ::rf_phreaker::protobuf::rp_gsm_si3* mutable_si3();
  ::rf_phreaker::protobuf::rp_gsm_si3* release_si3();
  void set_allocated_si3(::rf_phreaker::protobuf::rp_gsm_si3* si3);

  // optional .rf_phreaker.protobuf.rp_gsm_si4 si4 = 8;
  bool has_si4() const;
  void clear_si4();
  static const int kSi4FieldNumber = 8;
  const ::rf_phreaker::protobuf::rp_gsm_si4& si4() const;
  ::rf_phreaker::protobuf::rp_gsm_si4* mutable_si4();
  ::rf_phreaker::protobuf::rp_gsm_si4* release_si4();
  void set_allocated_si4(::rf_phreaker::protobuf::rp_gsm_si4* si4);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_gsm_layer_3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 > raw_layer_3_;
  ::rf_phreaker::protobuf::rp_gsm_si1* si1_;
  ::rf_phreaker::protobuf::rp_gsm_si2* si2_;
  ::rf_phreaker::protobuf::rp_gsm_si2_bis* si2_bis_;
  ::rf_phreaker::protobuf::rp_gsm_si2_ter* si2_ter_;
  ::rf_phreaker::protobuf::rp_gsm_si2_quater* si2_quater_;
  ::rf_phreaker::protobuf::rp_gsm_si3* si3_;
  ::rf_phreaker::protobuf::rp_gsm_si4* si4_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_gsm_layer_3* default_instance_;
};
// -------------------------------------------------------------------

class rp_gsm : public ::google::protobuf::Message {
 public:
  rp_gsm();
  virtual ~rp_gsm();

  rp_gsm(const rp_gsm& from);

  inline rp_gsm& operator=(const rp_gsm& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_gsm& default_instance();

  void Swap(rp_gsm* other);

  // implements Message ----------------------------------------------

  inline rp_gsm* New() const { return New(NULL); }

  rp_gsm* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_gsm& from);
  void MergeFrom(const rp_gsm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_gsm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_base base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::rf_phreaker::protobuf::rp_base& base() const;
  ::rf_phreaker::protobuf::rp_base* mutable_base();
  ::rf_phreaker::protobuf::rp_base* release_base();
  void set_allocated_base(::rf_phreaker::protobuf::rp_base* base);

  // optional int32 arfcn = 2;
  void clear_arfcn();
  static const int kArfcnFieldNumber = 2;
  ::google::protobuf::int32 arfcn() const;
  void set_arfcn(::google::protobuf::int32 value);

  // optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
  void clear_operating_band();
  static const int kOperatingBandFieldNumber = 3;
  ::rf_phreaker::protobuf::rp_operating_band operating_band() const;
  void set_operating_band(::rf_phreaker::protobuf::rp_operating_band value);

  // optional int32 bsic = 4;
  void clear_bsic();
  static const int kBsicFieldNumber = 4;
  ::google::protobuf::int32 bsic() const;
  void set_bsic(::google::protobuf::int32 value);

  // optional int32 tdma_frame_number = 5;
  void clear_tdma_frame_number();
  static const int kTdmaFrameNumberFieldNumber = 5;
  ::google::protobuf::int32 tdma_frame_number() const;
  void set_tdma_frame_number(::google::protobuf::int32 value);

  // optional double bcch_signal_level = 6;
  void clear_bcch_signal_level();
  static const int kBcchSignalLevelFieldNumber = 6;
  double bcch_signal_level() const;
  void set_bcch_signal_level(double value);

  // optional double ctoi = 7;
  void clear_ctoi();
  static const int kCtoiFieldNumber = 7;
  double ctoi() const;
  void set_ctoi(double value);

  // optional .rf_phreaker.protobuf.rp_gsm_layer_3 layer_3 = 8;
  bool has_layer_3() const;
  void clear_layer_3();
  static const int kLayer3FieldNumber = 8;
  const ::rf_phreaker::protobuf::rp_gsm_layer_3& layer_3() const;
  ::rf_phreaker::protobuf::rp_gsm_layer_3* mutable_layer_3();
  ::rf_phreaker::protobuf::rp_gsm_layer_3* release_layer_3();
  void set_allocated_layer_3(::rf_phreaker::protobuf::rp_gsm_layer_3* layer_3);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_gsm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rf_phreaker::protobuf::rp_base* base_;
  ::google::protobuf::int32 arfcn_;
  int operating_band_;
  ::google::protobuf::int32 bsic_;
  ::google::protobuf::int32 tdma_frame_number_;
  double bcch_signal_level_;
  double ctoi_;
  ::rf_phreaker::protobuf::rp_gsm_layer_3* layer_3_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_gsm* default_instance_;
};
// -------------------------------------------------------------------

class rp_gsm_update : public ::google::protobuf::Message {
 public:
  rp_gsm_update();
  virtual ~rp_gsm_update();

  rp_gsm_update(const rp_gsm_update& from);

  inline rp_gsm_update& operator=(const rp_gsm_update& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_gsm_update& default_instance();

  void Swap(rp_gsm_update* other);

  // implements Message ----------------------------------------------

  inline rp_gsm_update* New() const { return New(NULL); }

  rp_gsm_update* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_gsm_update& from);
  void MergeFrom(const rp_gsm_update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_gsm_update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_base base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::rf_phreaker::protobuf::rp_base& base() const;
  ::rf_phreaker::protobuf::rp_base* mutable_base();
  ::rf_phreaker::protobuf::rp_base* release_base();
  void set_allocated_base(::rf_phreaker::protobuf::rp_base* base);

  // repeated .rf_phreaker.protobuf.rp_gsm gsm = 2;
  int gsm_size() const;
  void clear_gsm();
  static const int kGsmFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_gsm& gsm(int index) const;
  ::rf_phreaker::protobuf::rp_gsm* mutable_gsm(int index);
  ::rf_phreaker::protobuf::rp_gsm* add_gsm();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm >*
      mutable_gsm();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm >&
      gsm() const;

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_gsm_update)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rf_phreaker::protobuf::rp_base* base_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm > gsm_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_gsm_update* default_instance_;
};
// -------------------------------------------------------------------

class rp_wcdma_utran_neighbor : public ::google::protobuf::Message {
 public:
  rp_wcdma_utran_neighbor();
  virtual ~rp_wcdma_utran_neighbor();

  rp_wcdma_utran_neighbor(const rp_wcdma_utran_neighbor& from);

  inline rp_wcdma_utran_neighbor& operator=(const rp_wcdma_utran_neighbor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_wcdma_utran_neighbor& default_instance();

  void Swap(rp_wcdma_utran_neighbor* other);

  // implements Message ----------------------------------------------

  inline rp_wcdma_utran_neighbor* New() const { return New(NULL); }

  rp_wcdma_utran_neighbor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_wcdma_utran_neighbor& from);
  void MergeFrom(const rp_wcdma_utran_neighbor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_wcdma_utran_neighbor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uarfcn = 1;
  void clear_uarfcn();
  static const int kUarfcnFieldNumber = 1;
  ::google::protobuf::int32 uarfcn() const;
  void set_uarfcn(::google::protobuf::int32 value);

  // optional int32 cpich = 2;
  void clear_cpich();
  static const int kCpichFieldNumber = 2;
  ::google::protobuf::int32 cpich() const;
  void set_cpich(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_wcdma_utran_neighbor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 uarfcn_;
  ::google::protobuf::int32 cpich_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_wcdma_utran_neighbor* default_instance_;
};
// -------------------------------------------------------------------

class rp_wcdma_gsm_neighbor : public ::google::protobuf::Message {
 public:
  rp_wcdma_gsm_neighbor();
  virtual ~rp_wcdma_gsm_neighbor();

  rp_wcdma_gsm_neighbor(const rp_wcdma_gsm_neighbor& from);

  inline rp_wcdma_gsm_neighbor& operator=(const rp_wcdma_gsm_neighbor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_wcdma_gsm_neighbor& default_instance();

  void Swap(rp_wcdma_gsm_neighbor* other);

  // implements Message ----------------------------------------------

  inline rp_wcdma_gsm_neighbor* New() const { return New(NULL); }

  rp_wcdma_gsm_neighbor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_wcdma_gsm_neighbor& from);
  void MergeFrom(const rp_wcdma_gsm_neighbor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_wcdma_gsm_neighbor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bsic = 1;
  void clear_bsic();
  static const int kBsicFieldNumber = 1;
  ::google::protobuf::int32 bsic() const;
  void set_bsic(::google::protobuf::int32 value);

  // optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 2;
  void clear_band_indicator();
  static const int kBandIndicatorFieldNumber = 2;
  ::rf_phreaker::protobuf::rp_band_indicator_type band_indicator() const;
  void set_band_indicator(::rf_phreaker::protobuf::rp_band_indicator_type value);

  // optional int32 arfcn = 3;
  void clear_arfcn();
  static const int kArfcnFieldNumber = 3;
  ::google::protobuf::int32 arfcn() const;
  void set_arfcn(::google::protobuf::int32 value);

  // optional int32 qrx_lev_min = 4;
  void clear_qrx_lev_min();
  static const int kQrxLevMinFieldNumber = 4;
  ::google::protobuf::int32 qrx_lev_min() const;
  void set_qrx_lev_min(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 bsic_;
  int band_indicator_;
  ::google::protobuf::int32 arfcn_;
  ::google::protobuf::int32 qrx_lev_min_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_wcdma_gsm_neighbor* default_instance_;
};
// -------------------------------------------------------------------

class rp_wcdma_mib : public ::google::protobuf::Message {
 public:
  rp_wcdma_mib();
  virtual ~rp_wcdma_mib();

  rp_wcdma_mib(const rp_wcdma_mib& from);

  inline rp_wcdma_mib& operator=(const rp_wcdma_mib& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_wcdma_mib& default_instance();

  void Swap(rp_wcdma_mib* other);

  // implements Message ----------------------------------------------

  inline rp_wcdma_mib* New() const { return New(NULL); }

  rp_wcdma_mib* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_wcdma_mib& from);
  void MergeFrom(const rp_wcdma_mib& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_wcdma_mib* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
  bool has_plmn() const;
  void clear_plmn();
  static const int kPlmnFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_plmn& plmn() const;
  ::rf_phreaker::protobuf::rp_plmn* mutable_plmn();
  ::rf_phreaker::protobuf::rp_plmn* release_plmn();
  void set_allocated_plmn(::rf_phreaker::protobuf::rp_plmn* plmn);

  // repeated .rf_phreaker.protobuf.rp_plmn multiple_plmns = 3;
  int multiple_plmns_size() const;
  void clear_multiple_plmns();
  static const int kMultiplePlmnsFieldNumber = 3;
  const ::rf_phreaker::protobuf::rp_plmn& multiple_plmns(int index) const;
  ::rf_phreaker::protobuf::rp_plmn* mutable_multiple_plmns(int index);
  ::rf_phreaker::protobuf::rp_plmn* add_multiple_plmns();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_plmn >*
      mutable_multiple_plmns();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_plmn >&
      multiple_plmns() const;

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_wcdma_mib)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rf_phreaker::protobuf::rp_plmn* plmn_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_plmn > multiple_plmns_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_wcdma_mib* default_instance_;
};
// -------------------------------------------------------------------

class rp_wcdma_sib1 : public ::google::protobuf::Message {
 public:
  rp_wcdma_sib1();
  virtual ~rp_wcdma_sib1();

  rp_wcdma_sib1(const rp_wcdma_sib1& from);

  inline rp_wcdma_sib1& operator=(const rp_wcdma_sib1& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_wcdma_sib1& default_instance();

  void Swap(rp_wcdma_sib1* other);

  // implements Message ----------------------------------------------

  inline rp_wcdma_sib1* New() const { return New(NULL); }

  rp_wcdma_sib1* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_wcdma_sib1& from);
  void MergeFrom(const rp_wcdma_sib1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_wcdma_sib1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 lac = 2;
  void clear_lac();
  static const int kLacFieldNumber = 2;
  ::google::protobuf::int32 lac() const;
  void set_lac(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_wcdma_sib1)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 lac_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_wcdma_sib1* default_instance_;
};
// -------------------------------------------------------------------

class rp_wcdma_sib3 : public ::google::protobuf::Message {
 public:
  rp_wcdma_sib3();
  virtual ~rp_wcdma_sib3();

  rp_wcdma_sib3(const rp_wcdma_sib3& from);

  inline rp_wcdma_sib3& operator=(const rp_wcdma_sib3& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_wcdma_sib3& default_instance();

  void Swap(rp_wcdma_sib3* other);

  // implements Message ----------------------------------------------

  inline rp_wcdma_sib3* New() const { return New(NULL); }

  rp_wcdma_sib3* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_wcdma_sib3& from);
  void MergeFrom(const rp_wcdma_sib3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_wcdma_sib3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  ::google::protobuf::int32 cid() const;
  void set_cid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_wcdma_sib3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 cid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_wcdma_sib3* default_instance_;
};
// -------------------------------------------------------------------

class rp_wcdma_sib4 : public ::google::protobuf::Message {
 public:
  rp_wcdma_sib4();
  virtual ~rp_wcdma_sib4();

  rp_wcdma_sib4(const rp_wcdma_sib4& from);

  inline rp_wcdma_sib4& operator=(const rp_wcdma_sib4& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_wcdma_sib4& default_instance();

  void Swap(rp_wcdma_sib4* other);

  // implements Message ----------------------------------------------

  inline rp_wcdma_sib4* New() const { return New(NULL); }

  rp_wcdma_sib4* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_wcdma_sib4& from);
  void MergeFrom(const rp_wcdma_sib4& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_wcdma_sib4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  ::google::protobuf::int32 cid() const;
  void set_cid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_wcdma_sib4)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 cid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_wcdma_sib4* default_instance_;
};
// -------------------------------------------------------------------

class rp_wcdma_sib11 : public ::google::protobuf::Message {
 public:
  rp_wcdma_sib11();
  virtual ~rp_wcdma_sib11();

  rp_wcdma_sib11(const rp_wcdma_sib11& from);

  inline rp_wcdma_sib11& operator=(const rp_wcdma_sib11& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_wcdma_sib11& default_instance();

  void Swap(rp_wcdma_sib11* other);

  // implements Message ----------------------------------------------

  inline rp_wcdma_sib11* New() const { return New(NULL); }

  rp_wcdma_sib11* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_wcdma_sib11& from);
  void MergeFrom(const rp_wcdma_sib11& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_wcdma_sib11* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 utran_intra_neighbor_cpichs = 2 [packed = true];
  int utran_intra_neighbor_cpichs_size() const;
  void clear_utran_intra_neighbor_cpichs();
  static const int kUtranIntraNeighborCpichsFieldNumber = 2;
  ::google::protobuf::int32 utran_intra_neighbor_cpichs(int index) const;
  void set_utran_intra_neighbor_cpichs(int index, ::google::protobuf::int32 value);
  void add_utran_intra_neighbor_cpichs(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      utran_intra_neighbor_cpichs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_utran_intra_neighbor_cpichs();

  // repeated .rf_phreaker.protobuf.rp_wcdma_utran_neighbor utran_inter_neighbors = 3;
  int utran_inter_neighbors_size() const;
  void clear_utran_inter_neighbors();
  static const int kUtranInterNeighborsFieldNumber = 3;
  const ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor& utran_inter_neighbors(int index) const;
  ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor* mutable_utran_inter_neighbors(int index);
  ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor* add_utran_inter_neighbors();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor >*
      mutable_utran_inter_neighbors();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor >&
      utran_inter_neighbors() const;

  // repeated .rf_phreaker.protobuf.rp_wcdma_gsm_neighbor gsm_inter_neighbors = 4;
  int gsm_inter_neighbors_size() const;
  void clear_gsm_inter_neighbors();
  static const int kGsmInterNeighborsFieldNumber = 4;
  const ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor& gsm_inter_neighbors(int index) const;
  ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor* mutable_gsm_inter_neighbors(int index);
  ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor* add_gsm_inter_neighbors();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor >*
      mutable_gsm_inter_neighbors();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor >&
      gsm_inter_neighbors() const;

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_wcdma_sib11)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > utran_intra_neighbor_cpichs_;
  mutable int _utran_intra_neighbor_cpichs_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor > utran_inter_neighbors_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor > gsm_inter_neighbors_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_wcdma_sib11* default_instance_;
};
// -------------------------------------------------------------------

class rp_wcdma_sib11_bis : public ::google::protobuf::Message {
 public:
  rp_wcdma_sib11_bis();
  virtual ~rp_wcdma_sib11_bis();

  rp_wcdma_sib11_bis(const rp_wcdma_sib11_bis& from);

  inline rp_wcdma_sib11_bis& operator=(const rp_wcdma_sib11_bis& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_wcdma_sib11_bis& default_instance();

  void Swap(rp_wcdma_sib11_bis* other);

  // implements Message ----------------------------------------------

  inline rp_wcdma_sib11_bis* New() const { return New(NULL); }

  rp_wcdma_sib11_bis* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_wcdma_sib11_bis& from);
  void MergeFrom(const rp_wcdma_sib11_bis& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_wcdma_sib11_bis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 utran_intra_neighbor_cpichs = 2 [packed = true];
  int utran_intra_neighbor_cpichs_size() const;
  void clear_utran_intra_neighbor_cpichs();
  static const int kUtranIntraNeighborCpichsFieldNumber = 2;
  ::google::protobuf::int32 utran_intra_neighbor_cpichs(int index) const;
  void set_utran_intra_neighbor_cpichs(int index, ::google::protobuf::int32 value);
  void add_utran_intra_neighbor_cpichs(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      utran_intra_neighbor_cpichs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_utran_intra_neighbor_cpichs();

  // repeated .rf_phreaker.protobuf.rp_wcdma_utran_neighbor utran_inter_neighbors = 3;
  int utran_inter_neighbors_size() const;
  void clear_utran_inter_neighbors();
  static const int kUtranInterNeighborsFieldNumber = 3;
  const ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor& utran_inter_neighbors(int index) const;
  ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor* mutable_utran_inter_neighbors(int index);
  ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor* add_utran_inter_neighbors();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor >*
      mutable_utran_inter_neighbors();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor >&
      utran_inter_neighbors() const;

  // repeated .rf_phreaker.protobuf.rp_wcdma_gsm_neighbor gsm_inter_neighbors = 4;
  int gsm_inter_neighbors_size() const;
  void clear_gsm_inter_neighbors();
  static const int kGsmInterNeighborsFieldNumber = 4;
  const ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor& gsm_inter_neighbors(int index) const;
  ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor* mutable_gsm_inter_neighbors(int index);
  ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor* add_gsm_inter_neighbors();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor >*
      mutable_gsm_inter_neighbors();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor >&
      gsm_inter_neighbors() const;

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_wcdma_sib11_bis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > utran_intra_neighbor_cpichs_;
  mutable int _utran_intra_neighbor_cpichs_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor > utran_inter_neighbors_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor > gsm_inter_neighbors_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_wcdma_sib11_bis* default_instance_;
};
// -------------------------------------------------------------------

class rp_wcdma_layer_3 : public ::google::protobuf::Message {
 public:
  rp_wcdma_layer_3();
  virtual ~rp_wcdma_layer_3();

  rp_wcdma_layer_3(const rp_wcdma_layer_3& from);

  inline rp_wcdma_layer_3& operator=(const rp_wcdma_layer_3& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_wcdma_layer_3& default_instance();

  void Swap(rp_wcdma_layer_3* other);

  // implements Message ----------------------------------------------

  inline rp_wcdma_layer_3* New() const { return New(NULL); }

  rp_wcdma_layer_3* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_wcdma_layer_3& from);
  void MergeFrom(const rp_wcdma_layer_3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_wcdma_layer_3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
  int raw_layer_3_size() const;
  void clear_raw_layer_3();
  static const int kRawLayer3FieldNumber = 1;
  const ::rf_phreaker::protobuf::rp_raw_layer_3& raw_layer_3(int index) const;
  ::rf_phreaker::protobuf::rp_raw_layer_3* mutable_raw_layer_3(int index);
  ::rf_phreaker::protobuf::rp_raw_layer_3* add_raw_layer_3();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >*
      mutable_raw_layer_3();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >&
      raw_layer_3() const;

  // optional .rf_phreaker.protobuf.rp_wcdma_mib mib = 2;
  bool has_mib() const;
  void clear_mib();
  static const int kMibFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_wcdma_mib& mib() const;
  ::rf_phreaker::protobuf::rp_wcdma_mib* mutable_mib();
  ::rf_phreaker::protobuf::rp_wcdma_mib* release_mib();
  void set_allocated_mib(::rf_phreaker::protobuf::rp_wcdma_mib* mib);

  // optional .rf_phreaker.protobuf.rp_wcdma_sib1 sib1 = 3;
  bool has_sib1() const;
  void clear_sib1();
  static const int kSib1FieldNumber = 3;
  const ::rf_phreaker::protobuf::rp_wcdma_sib1& sib1() const;
  ::rf_phreaker::protobuf::rp_wcdma_sib1* mutable_sib1();
  ::rf_phreaker::protobuf::rp_wcdma_sib1* release_sib1();
  void set_allocated_sib1(::rf_phreaker::protobuf::rp_wcdma_sib1* sib1);

  // optional .rf_phreaker.protobuf.rp_wcdma_sib3 sib3 = 4;
  bool has_sib3() const;
  void clear_sib3();
  static const int kSib3FieldNumber = 4;
  const ::rf_phreaker::protobuf::rp_wcdma_sib3& sib3() const;
  ::rf_phreaker::protobuf::rp_wcdma_sib3* mutable_sib3();
  ::rf_phreaker::protobuf::rp_wcdma_sib3* release_sib3();
  void set_allocated_sib3(::rf_phreaker::protobuf::rp_wcdma_sib3* sib3);

  // optional .rf_phreaker.protobuf.rp_wcdma_sib4 sib4 = 5;
  bool has_sib4() const;
  void clear_sib4();
  static const int kSib4FieldNumber = 5;
  const ::rf_phreaker::protobuf::rp_wcdma_sib4& sib4() const;
  ::rf_phreaker::protobuf::rp_wcdma_sib4* mutable_sib4();
  ::rf_phreaker::protobuf::rp_wcdma_sib4* release_sib4();
  void set_allocated_sib4(::rf_phreaker::protobuf::rp_wcdma_sib4* sib4);

  // optional .rf_phreaker.protobuf.rp_wcdma_sib11 sib11 = 6;
  bool has_sib11() const;
  void clear_sib11();
  static const int kSib11FieldNumber = 6;
  const ::rf_phreaker::protobuf::rp_wcdma_sib11& sib11() const;
  ::rf_phreaker::protobuf::rp_wcdma_sib11* mutable_sib11();
  ::rf_phreaker::protobuf::rp_wcdma_sib11* release_sib11();
  void set_allocated_sib11(::rf_phreaker::protobuf::rp_wcdma_sib11* sib11);

  // optional .rf_phreaker.protobuf.rp_wcdma_sib11_bis sib11_bis = 7;
  bool has_sib11_bis() const;
  void clear_sib11_bis();
  static const int kSib11BisFieldNumber = 7;
  const ::rf_phreaker::protobuf::rp_wcdma_sib11_bis& sib11_bis() const;
  ::rf_phreaker::protobuf::rp_wcdma_sib11_bis* mutable_sib11_bis();
  ::rf_phreaker::protobuf::rp_wcdma_sib11_bis* release_sib11_bis();
  void set_allocated_sib11_bis(::rf_phreaker::protobuf::rp_wcdma_sib11_bis* sib11_bis);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_wcdma_layer_3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 > raw_layer_3_;
  ::rf_phreaker::protobuf::rp_wcdma_mib* mib_;
  ::rf_phreaker::protobuf::rp_wcdma_sib1* sib1_;
  ::rf_phreaker::protobuf::rp_wcdma_sib3* sib3_;
  ::rf_phreaker::protobuf::rp_wcdma_sib4* sib4_;
  ::rf_phreaker::protobuf::rp_wcdma_sib11* sib11_;
  ::rf_phreaker::protobuf::rp_wcdma_sib11_bis* sib11_bis_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_wcdma_layer_3* default_instance_;
};
// -------------------------------------------------------------------

class rp_wcdma : public ::google::protobuf::Message {
 public:
  rp_wcdma();
  virtual ~rp_wcdma();

  rp_wcdma(const rp_wcdma& from);

  inline rp_wcdma& operator=(const rp_wcdma& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_wcdma& default_instance();

  void Swap(rp_wcdma* other);

  // implements Message ----------------------------------------------

  inline rp_wcdma* New() const { return New(NULL); }

  rp_wcdma* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_wcdma& from);
  void MergeFrom(const rp_wcdma& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_wcdma* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_base base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::rf_phreaker::protobuf::rp_base& base() const;
  ::rf_phreaker::protobuf::rp_base* mutable_base();
  ::rf_phreaker::protobuf::rp_base* release_base();
  void set_allocated_base(::rf_phreaker::protobuf::rp_base* base);

  // optional int32 uarfcn = 2;
  void clear_uarfcn();
  static const int kUarfcnFieldNumber = 2;
  ::google::protobuf::int32 uarfcn() const;
  void set_uarfcn(::google::protobuf::int32 value);

  // optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
  void clear_operating_band();
  static const int kOperatingBandFieldNumber = 3;
  ::rf_phreaker::protobuf::rp_operating_band operating_band() const;
  void set_operating_band(::rf_phreaker::protobuf::rp_operating_band value);

  // optional int32 cpich = 4;
  void clear_cpich();
  static const int kCpichFieldNumber = 4;
  ::google::protobuf::int32 cpich() const;
  void set_cpich(::google::protobuf::int32 value);

  // optional double ecio = 5;
  void clear_ecio();
  static const int kEcioFieldNumber = 5;
  double ecio() const;
  void set_ecio(double value);

  // optional double rscp = 6;
  void clear_rscp();
  static const int kRscpFieldNumber = 6;
  double rscp() const;
  void set_rscp(double value);

  // optional .rf_phreaker.protobuf.rp_wcdma_layer_3 layer_3 = 7;
  bool has_layer_3() const;
  void clear_layer_3();
  static const int kLayer3FieldNumber = 7;
  const ::rf_phreaker::protobuf::rp_wcdma_layer_3& layer_3() const;
  ::rf_phreaker::protobuf::rp_wcdma_layer_3* mutable_layer_3();
  ::rf_phreaker::protobuf::rp_wcdma_layer_3* release_layer_3();
  void set_allocated_layer_3(::rf_phreaker::protobuf::rp_wcdma_layer_3* layer_3);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_wcdma)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rf_phreaker::protobuf::rp_base* base_;
  ::google::protobuf::int32 uarfcn_;
  int operating_band_;
  double ecio_;
  double rscp_;
  ::rf_phreaker::protobuf::rp_wcdma_layer_3* layer_3_;
  ::google::protobuf::int32 cpich_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_wcdma* default_instance_;
};
// -------------------------------------------------------------------

class rp_wcdma_update : public ::google::protobuf::Message {
 public:
  rp_wcdma_update();
  virtual ~rp_wcdma_update();

  rp_wcdma_update(const rp_wcdma_update& from);

  inline rp_wcdma_update& operator=(const rp_wcdma_update& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_wcdma_update& default_instance();

  void Swap(rp_wcdma_update* other);

  // implements Message ----------------------------------------------

  inline rp_wcdma_update* New() const { return New(NULL); }

  rp_wcdma_update* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_wcdma_update& from);
  void MergeFrom(const rp_wcdma_update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_wcdma_update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_base base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::rf_phreaker::protobuf::rp_base& base() const;
  ::rf_phreaker::protobuf::rp_base* mutable_base();
  ::rf_phreaker::protobuf::rp_base* release_base();
  void set_allocated_base(::rf_phreaker::protobuf::rp_base* base);

  // repeated .rf_phreaker.protobuf.rp_wcdma wcdma = 2;
  int wcdma_size() const;
  void clear_wcdma();
  static const int kWcdmaFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_wcdma& wcdma(int index) const;
  ::rf_phreaker::protobuf::rp_wcdma* mutable_wcdma(int index);
  ::rf_phreaker::protobuf::rp_wcdma* add_wcdma();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma >*
      mutable_wcdma();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma >&
      wcdma() const;

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_wcdma_update)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rf_phreaker::protobuf::rp_base* base_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma > wcdma_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_wcdma_update* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_scheduling_info : public ::google::protobuf::Message {
 public:
  rp_lte_scheduling_info();
  virtual ~rp_lte_scheduling_info();

  rp_lte_scheduling_info(const rp_lte_scheduling_info& from);

  inline rp_lte_scheduling_info& operator=(const rp_lte_scheduling_info& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_scheduling_info& default_instance();

  void Swap(rp_lte_scheduling_info* other);

  // implements Message ----------------------------------------------

  inline rp_lte_scheduling_info* New() const { return New(NULL); }

  rp_lte_scheduling_info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_scheduling_info& from);
  void MergeFrom(const rp_lte_scheduling_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_scheduling_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 periodicity_in_frames = 1;
  void clear_periodicity_in_frames();
  static const int kPeriodicityInFramesFieldNumber = 1;
  ::google::protobuf::int32 periodicity_in_frames() const;
  void set_periodicity_in_frames(::google::protobuf::int32 value);

  // repeated .rf_phreaker.protobuf.rp_lte_sib_type sibs = 3;
  int sibs_size() const;
  void clear_sibs();
  static const int kSibsFieldNumber = 3;
  ::rf_phreaker::protobuf::rp_lte_sib_type sibs(int index) const;
  void set_sibs(int index, ::rf_phreaker::protobuf::rp_lte_sib_type value);
  void add_sibs(::rf_phreaker::protobuf::rp_lte_sib_type value);
  const ::google::protobuf::RepeatedField<int>& sibs() const;
  ::google::protobuf::RepeatedField<int>* mutable_sibs();

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_scheduling_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField<int> sibs_;
  mutable int _sibs_cached_byte_size_;
  ::google::protobuf::int32 periodicity_in_frames_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_scheduling_info* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_sib1 : public ::google::protobuf::Message {
 public:
  rp_lte_sib1();
  virtual ~rp_lte_sib1();

  rp_lte_sib1(const rp_lte_sib1& from);

  inline rp_lte_sib1& operator=(const rp_lte_sib1& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_sib1& default_instance();

  void Swap(rp_lte_sib1* other);

  // implements Message ----------------------------------------------

  inline rp_lte_sib1* New() const { return New(NULL); }

  rp_lte_sib1* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_sib1& from);
  void MergeFrom(const rp_lte_sib1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_sib1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rf_phreaker.protobuf.rp_plmn multiple_plmns = 2;
  int multiple_plmns_size() const;
  void clear_multiple_plmns();
  static const int kMultiplePlmnsFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_plmn& multiple_plmns(int index) const;
  ::rf_phreaker::protobuf::rp_plmn* mutable_multiple_plmns(int index);
  ::rf_phreaker::protobuf::rp_plmn* add_multiple_plmns();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_plmn >*
      mutable_multiple_plmns();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_plmn >&
      multiple_plmns() const;

  // optional int32 tac = 3;
  void clear_tac();
  static const int kTacFieldNumber = 3;
  ::google::protobuf::int32 tac() const;
  void set_tac(::google::protobuf::int32 value);

  // optional int32 cid = 4;
  void clear_cid();
  static const int kCidFieldNumber = 4;
  ::google::protobuf::int32 cid() const;
  void set_cid(::google::protobuf::int32 value);

  // repeated .rf_phreaker.protobuf.rp_lte_scheduling_info scheduling_info = 5;
  int scheduling_info_size() const;
  void clear_scheduling_info();
  static const int kSchedulingInfoFieldNumber = 5;
  const ::rf_phreaker::protobuf::rp_lte_scheduling_info& scheduling_info(int index) const;
  ::rf_phreaker::protobuf::rp_lte_scheduling_info* mutable_scheduling_info(int index);
  ::rf_phreaker::protobuf::rp_lte_scheduling_info* add_scheduling_info();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_scheduling_info >*
      mutable_scheduling_info();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_scheduling_info >&
      scheduling_info() const;

  // optional int32 si_window_length_ms = 6;
  void clear_si_window_length_ms();
  static const int kSiWindowLengthMsFieldNumber = 6;
  ::google::protobuf::int32 si_window_length_ms() const;
  void set_si_window_length_ms(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_sib1)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_plmn > multiple_plmns_;
  ::google::protobuf::int32 tac_;
  ::google::protobuf::int32 cid_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_scheduling_info > scheduling_info_;
  ::google::protobuf::int32 si_window_length_ms_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_sib1* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_cell_reselection_serving_freq_info : public ::google::protobuf::Message {
 public:
  rp_lte_cell_reselection_serving_freq_info();
  virtual ~rp_lte_cell_reselection_serving_freq_info();

  rp_lte_cell_reselection_serving_freq_info(const rp_lte_cell_reselection_serving_freq_info& from);

  inline rp_lte_cell_reselection_serving_freq_info& operator=(const rp_lte_cell_reselection_serving_freq_info& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_cell_reselection_serving_freq_info& default_instance();

  void Swap(rp_lte_cell_reselection_serving_freq_info* other);

  // implements Message ----------------------------------------------

  inline rp_lte_cell_reselection_serving_freq_info* New() const { return New(NULL); }

  rp_lte_cell_reselection_serving_freq_info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_cell_reselection_serving_freq_info& from);
  void MergeFrom(const rp_lte_cell_reselection_serving_freq_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_cell_reselection_serving_freq_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 s_non_intra_search = 1;
  void clear_s_non_intra_search();
  static const int kSNonIntraSearchFieldNumber = 1;
  ::google::protobuf::int32 s_non_intra_search() const;
  void set_s_non_intra_search(::google::protobuf::int32 value);

  // optional int32 threshold_serving_low = 2;
  void clear_threshold_serving_low();
  static const int kThresholdServingLowFieldNumber = 2;
  ::google::protobuf::int32 threshold_serving_low() const;
  void set_threshold_serving_low(::google::protobuf::int32 value);

  // optional int32 cell_reselection_priority = 3;
  void clear_cell_reselection_priority();
  static const int kCellReselectionPriorityFieldNumber = 3;
  ::google::protobuf::int32 cell_reselection_priority() const;
  void set_cell_reselection_priority(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 s_non_intra_search_;
  ::google::protobuf::int32 threshold_serving_low_;
  ::google::protobuf::int32 cell_reselection_priority_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_cell_reselection_serving_freq_info* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_s_search_v920 : public ::google::protobuf::Message {
 public:
  rp_lte_s_search_v920();
  virtual ~rp_lte_s_search_v920();

  rp_lte_s_search_v920(const rp_lte_s_search_v920& from);

  inline rp_lte_s_search_v920& operator=(const rp_lte_s_search_v920& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_s_search_v920& default_instance();

  void Swap(rp_lte_s_search_v920* other);

  // implements Message ----------------------------------------------

  inline rp_lte_s_search_v920* New() const { return New(NULL); }

  rp_lte_s_search_v920* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_s_search_v920& from);
  void MergeFrom(const rp_lte_s_search_v920& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_s_search_v920* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 p = 1;
  void clear_p();
  static const int kPFieldNumber = 1;
  ::google::protobuf::int32 p() const;
  void set_p(::google::protobuf::int32 value);

  // optional int32 q = 2;
  void clear_q();
  static const int kQFieldNumber = 2;
  ::google::protobuf::int32 q() const;
  void set_q(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_s_search_v920)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 p_;
  ::google::protobuf::int32 q_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_s_search_v920* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_sib3 : public ::google::protobuf::Message {
 public:
  rp_lte_sib3();
  virtual ~rp_lte_sib3();

  rp_lte_sib3(const rp_lte_sib3& from);

  inline rp_lte_sib3& operator=(const rp_lte_sib3& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_sib3& default_instance();

  void Swap(rp_lte_sib3* other);

  // implements Message ----------------------------------------------

  inline rp_lte_sib3* New() const { return New(NULL); }

  rp_lte_sib3* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_sib3& from);
  void MergeFrom(const rp_lte_sib3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_sib3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info cell_reselection_serving_freq_info = 2;
  bool has_cell_reselection_serving_freq_info() const;
  void clear_cell_reselection_serving_freq_info();
  static const int kCellReselectionServingFreqInfoFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info& cell_reselection_serving_freq_info() const;
  ::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info* mutable_cell_reselection_serving_freq_info();
  ::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info* release_cell_reselection_serving_freq_info();
  void set_allocated_cell_reselection_serving_freq_info(::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info* cell_reselection_serving_freq_info);

  // optional int32 intra_freq_cell_reselection_info_s_intra_search = 3;
  void clear_intra_freq_cell_reselection_info_s_intra_search();
  static const int kIntraFreqCellReselectionInfoSIntraSearchFieldNumber = 3;
  ::google::protobuf::int32 intra_freq_cell_reselection_info_s_intra_search() const;
  void set_intra_freq_cell_reselection_info_s_intra_search(::google::protobuf::int32 value);

  // optional .rf_phreaker.protobuf.rp_lte_s_search_v920 s_intra_search_v920 = 4;
  bool has_s_intra_search_v920() const;
  void clear_s_intra_search_v920();
  static const int kSIntraSearchV920FieldNumber = 4;
  const ::rf_phreaker::protobuf::rp_lte_s_search_v920& s_intra_search_v920() const;
  ::rf_phreaker::protobuf::rp_lte_s_search_v920* mutable_s_intra_search_v920();
  ::rf_phreaker::protobuf::rp_lte_s_search_v920* release_s_intra_search_v920();
  void set_allocated_s_intra_search_v920(::rf_phreaker::protobuf::rp_lte_s_search_v920* s_intra_search_v920);

  // optional .rf_phreaker.protobuf.rp_lte_s_search_v920 s_non_intra_search_v920 = 5;
  bool has_s_non_intra_search_v920() const;
  void clear_s_non_intra_search_v920();
  static const int kSNonIntraSearchV920FieldNumber = 5;
  const ::rf_phreaker::protobuf::rp_lte_s_search_v920& s_non_intra_search_v920() const;
  ::rf_phreaker::protobuf::rp_lte_s_search_v920* mutable_s_non_intra_search_v920();
  ::rf_phreaker::protobuf::rp_lte_s_search_v920* release_s_non_intra_search_v920();
  void set_allocated_s_non_intra_search_v920(::rf_phreaker::protobuf::rp_lte_s_search_v920* s_non_intra_search_v920);

  // optional int32 threshold_serving_low_q = 6;
  void clear_threshold_serving_low_q();
  static const int kThresholdServingLowQFieldNumber = 6;
  ::google::protobuf::int32 threshold_serving_low_q() const;
  void set_threshold_serving_low_q(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_sib3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info* cell_reselection_serving_freq_info_;
  ::rf_phreaker::protobuf::rp_lte_s_search_v920* s_intra_search_v920_;
  ::google::protobuf::int32 intra_freq_cell_reselection_info_s_intra_search_;
  ::google::protobuf::int32 threshold_serving_low_q_;
  ::rf_phreaker::protobuf::rp_lte_s_search_v920* s_non_intra_search_v920_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_sib3* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_physical_cellid_range : public ::google::protobuf::Message {
 public:
  rp_lte_physical_cellid_range();
  virtual ~rp_lte_physical_cellid_range();

  rp_lte_physical_cellid_range(const rp_lte_physical_cellid_range& from);

  inline rp_lte_physical_cellid_range& operator=(const rp_lte_physical_cellid_range& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_physical_cellid_range& default_instance();

  void Swap(rp_lte_physical_cellid_range* other);

  // implements Message ----------------------------------------------

  inline rp_lte_physical_cellid_range* New() const { return New(NULL); }

  rp_lte_physical_cellid_range* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_physical_cellid_range& from);
  void MergeFrom(const rp_lte_physical_cellid_range& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_physical_cellid_range* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::google::protobuf::int32 start() const;
  void set_start(::google::protobuf::int32 value);

  // optional int32 range = 2;
  void clear_range();
  static const int kRangeFieldNumber = 2;
  ::google::protobuf::int32 range() const;
  void set_range(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_physical_cellid_range)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 range_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_physical_cellid_range* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_neighbor_cell : public ::google::protobuf::Message {
 public:
  rp_lte_neighbor_cell();
  virtual ~rp_lte_neighbor_cell();

  rp_lte_neighbor_cell(const rp_lte_neighbor_cell& from);

  inline rp_lte_neighbor_cell& operator=(const rp_lte_neighbor_cell& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_neighbor_cell& default_instance();

  void Swap(rp_lte_neighbor_cell* other);

  // implements Message ----------------------------------------------

  inline rp_lte_neighbor_cell* New() const { return New(NULL); }

  rp_lte_neighbor_cell* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_neighbor_cell& from);
  void MergeFrom(const rp_lte_neighbor_cell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_neighbor_cell* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 physical_cell_id = 1;
  void clear_physical_cell_id();
  static const int kPhysicalCellIdFieldNumber = 1;
  ::google::protobuf::int32 physical_cell_id() const;
  void set_physical_cell_id(::google::protobuf::int32 value);

  // optional int32 q_offset_cell = 2;
  void clear_q_offset_cell();
  static const int kQOffsetCellFieldNumber = 2;
  ::google::protobuf::int32 q_offset_cell() const;
  void set_q_offset_cell(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_neighbor_cell)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 physical_cell_id_;
  ::google::protobuf::int32 q_offset_cell_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_neighbor_cell* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_sib4 : public ::google::protobuf::Message {
 public:
  rp_lte_sib4();
  virtual ~rp_lte_sib4();

  rp_lte_sib4(const rp_lte_sib4& from);

  inline rp_lte_sib4& operator=(const rp_lte_sib4& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_sib4& default_instance();

  void Swap(rp_lte_sib4* other);

  // implements Message ----------------------------------------------

  inline rp_lte_sib4* New() const { return New(NULL); }

  rp_lte_sib4* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_sib4& from);
  void MergeFrom(const rp_lte_sib4& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_sib4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell intra_freq_neighbor_cell_list = 2;
  int intra_freq_neighbor_cell_list_size() const;
  void clear_intra_freq_neighbor_cell_list();
  static const int kIntraFreqNeighborCellListFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_lte_neighbor_cell& intra_freq_neighbor_cell_list(int index) const;
  ::rf_phreaker::protobuf::rp_lte_neighbor_cell* mutable_intra_freq_neighbor_cell_list(int index);
  ::rf_phreaker::protobuf::rp_lte_neighbor_cell* add_intra_freq_neighbor_cell_list();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell >*
      mutable_intra_freq_neighbor_cell_list();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell >&
      intra_freq_neighbor_cell_list() const;

  // repeated .rf_phreaker.protobuf.rp_lte_physical_cellid_range intra_freq_black_cell_list = 3;
  int intra_freq_black_cell_list_size() const;
  void clear_intra_freq_black_cell_list();
  static const int kIntraFreqBlackCellListFieldNumber = 3;
  const ::rf_phreaker::protobuf::rp_lte_physical_cellid_range& intra_freq_black_cell_list(int index) const;
  ::rf_phreaker::protobuf::rp_lte_physical_cellid_range* mutable_intra_freq_black_cell_list(int index);
  ::rf_phreaker::protobuf::rp_lte_physical_cellid_range* add_intra_freq_black_cell_list();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_physical_cellid_range >*
      mutable_intra_freq_black_cell_list();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_physical_cellid_range >&
      intra_freq_black_cell_list() const;

  // optional .rf_phreaker.protobuf.rp_lte_physical_cellid_range csg_physical_cellid_range = 4;
  bool has_csg_physical_cellid_range() const;
  void clear_csg_physical_cellid_range();
  static const int kCsgPhysicalCellidRangeFieldNumber = 4;
  const ::rf_phreaker::protobuf::rp_lte_physical_cellid_range& csg_physical_cellid_range() const;
  ::rf_phreaker::protobuf::rp_lte_physical_cellid_range* mutable_csg_physical_cellid_range();
  ::rf_phreaker::protobuf::rp_lte_physical_cellid_range* release_csg_physical_cellid_range();
  void set_allocated_csg_physical_cellid_range(::rf_phreaker::protobuf::rp_lte_physical_cellid_range* csg_physical_cellid_range);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_sib4)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell > intra_freq_neighbor_cell_list_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_physical_cellid_range > intra_freq_black_cell_list_;
  ::rf_phreaker::protobuf::rp_lte_physical_cellid_range* csg_physical_cellid_range_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_sib4* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_inter_freq_carrier_freq_info : public ::google::protobuf::Message {
 public:
  rp_lte_inter_freq_carrier_freq_info();
  virtual ~rp_lte_inter_freq_carrier_freq_info();

  rp_lte_inter_freq_carrier_freq_info(const rp_lte_inter_freq_carrier_freq_info& from);

  inline rp_lte_inter_freq_carrier_freq_info& operator=(const rp_lte_inter_freq_carrier_freq_info& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_inter_freq_carrier_freq_info& default_instance();

  void Swap(rp_lte_inter_freq_carrier_freq_info* other);

  // implements Message ----------------------------------------------

  inline rp_lte_inter_freq_carrier_freq_info* New() const { return New(NULL); }

  rp_lte_inter_freq_carrier_freq_info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_inter_freq_carrier_freq_info& from);
  void MergeFrom(const rp_lte_inter_freq_carrier_freq_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_inter_freq_carrier_freq_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 downlink_arfcn_value_eutra = 1;
  void clear_downlink_arfcn_value_eutra();
  static const int kDownlinkArfcnValueEutraFieldNumber = 1;
  ::google::protobuf::int32 downlink_arfcn_value_eutra() const;
  void set_downlink_arfcn_value_eutra(::google::protobuf::int32 value);

  // optional int32 q_rx_lev_min = 2;
  void clear_q_rx_lev_min();
  static const int kQRxLevMinFieldNumber = 2;
  ::google::protobuf::int32 q_rx_lev_min() const;
  void set_q_rx_lev_min(::google::protobuf::int32 value);

  // optional int32 q_offset_freq = 3;
  void clear_q_offset_freq();
  static const int kQOffsetFreqFieldNumber = 3;
  ::google::protobuf::int32 q_offset_freq() const;
  void set_q_offset_freq(::google::protobuf::int32 value);

  // optional int32 allowed_measurement_bandwidth = 4;
  void clear_allowed_measurement_bandwidth();
  static const int kAllowedMeasurementBandwidthFieldNumber = 4;
  ::google::protobuf::int32 allowed_measurement_bandwidth() const;
  void set_allowed_measurement_bandwidth(::google::protobuf::int32 value);

  // optional bool presence_antenna_port_1 = 5;
  void clear_presence_antenna_port_1();
  static const int kPresenceAntennaPort1FieldNumber = 5;
  bool presence_antenna_port_1() const;
  void set_presence_antenna_port_1(bool value);

  // optional int32 threshold_x_high = 6;
  void clear_threshold_x_high();
  static const int kThresholdXHighFieldNumber = 6;
  ::google::protobuf::int32 threshold_x_high() const;
  void set_threshold_x_high(::google::protobuf::int32 value);

  // optional int32 threshold_x_low = 7;
  void clear_threshold_x_low();
  static const int kThresholdXLowFieldNumber = 7;
  ::google::protobuf::int32 threshold_x_low() const;
  void set_threshold_x_low(::google::protobuf::int32 value);

  // optional int32 threshold_x_high_q_r9 = 8;
  void clear_threshold_x_high_q_r9();
  static const int kThresholdXHighQR9FieldNumber = 8;
  ::google::protobuf::int32 threshold_x_high_q_r9() const;
  void set_threshold_x_high_q_r9(::google::protobuf::int32 value);

  // optional int32 threshold_x_low_q_r9 = 9;
  void clear_threshold_x_low_q_r9();
  static const int kThresholdXLowQR9FieldNumber = 9;
  ::google::protobuf::int32 threshold_x_low_q_r9() const;
  void set_threshold_x_low_q_r9(::google::protobuf::int32 value);

  // optional int32 cell_reselection_priority = 10;
  void clear_cell_reselection_priority();
  static const int kCellReselectionPriorityFieldNumber = 10;
  ::google::protobuf::int32 cell_reselection_priority() const;
  void set_cell_reselection_priority(::google::protobuf::int32 value);

  // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell inter_freq_neighbor_cell_list = 11;
  int inter_freq_neighbor_cell_list_size() const;
  void clear_inter_freq_neighbor_cell_list();
  static const int kInterFreqNeighborCellListFieldNumber = 11;
  const ::rf_phreaker::protobuf::rp_lte_neighbor_cell& inter_freq_neighbor_cell_list(int index) const;
  ::rf_phreaker::protobuf::rp_lte_neighbor_cell* mutable_inter_freq_neighbor_cell_list(int index);
  ::rf_phreaker::protobuf::rp_lte_neighbor_cell* add_inter_freq_neighbor_cell_list();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell >*
      mutable_inter_freq_neighbor_cell_list();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell >&
      inter_freq_neighbor_cell_list() const;

  // repeated .rf_phreaker.protobuf.rp_lte_physical_cellid_range inter_freq_black_cell_list = 12;
  int inter_freq_black_cell_list_size() const;
  void clear_inter_freq_black_cell_list();
  static const int kInterFreqBlackCellListFieldNumber = 12;
  const ::rf_phreaker::protobuf::rp_lte_physical_cellid_range& inter_freq_black_cell_list(int index) const;
  ::rf_phreaker::protobuf::rp_lte_physical_cellid_range* mutable_inter_freq_black_cell_list(int index);
  ::rf_phreaker::protobuf::rp_lte_physical_cellid_range* add_inter_freq_black_cell_list();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_physical_cellid_range >*
      mutable_inter_freq_black_cell_list();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_physical_cellid_range >&
      inter_freq_black_cell_list() const;

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 downlink_arfcn_value_eutra_;
  ::google::protobuf::int32 q_rx_lev_min_;
  ::google::protobuf::int32 q_offset_freq_;
  ::google::protobuf::int32 allowed_measurement_bandwidth_;
  bool presence_antenna_port_1_;
  ::google::protobuf::int32 threshold_x_high_;
  ::google::protobuf::int32 threshold_x_low_;
  ::google::protobuf::int32 threshold_x_high_q_r9_;
  ::google::protobuf::int32 threshold_x_low_q_r9_;
  ::google::protobuf::int32 cell_reselection_priority_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell > inter_freq_neighbor_cell_list_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_physical_cellid_range > inter_freq_black_cell_list_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_inter_freq_carrier_freq_info* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_sib5 : public ::google::protobuf::Message {
 public:
  rp_lte_sib5();
  virtual ~rp_lte_sib5();

  rp_lte_sib5(const rp_lte_sib5& from);

  inline rp_lte_sib5& operator=(const rp_lte_sib5& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_sib5& default_instance();

  void Swap(rp_lte_sib5* other);

  // implements Message ----------------------------------------------

  inline rp_lte_sib5* New() const { return New(NULL); }

  rp_lte_sib5* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_sib5& from);
  void MergeFrom(const rp_lte_sib5& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_sib5* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info inter_freq_carrier_info_list = 2;
  int inter_freq_carrier_info_list_size() const;
  void clear_inter_freq_carrier_info_list();
  static const int kInterFreqCarrierInfoListFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_lte_inter_freq_carrier_freq_info& inter_freq_carrier_info_list(int index) const;
  ::rf_phreaker::protobuf::rp_lte_inter_freq_carrier_freq_info* mutable_inter_freq_carrier_info_list(int index);
  ::rf_phreaker::protobuf::rp_lte_inter_freq_carrier_freq_info* add_inter_freq_carrier_info_list();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_inter_freq_carrier_freq_info >*
      mutable_inter_freq_carrier_info_list();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_inter_freq_carrier_freq_info >&
      inter_freq_carrier_info_list() const;

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_sib5)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_inter_freq_carrier_freq_info > inter_freq_carrier_info_list_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_sib5* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_carrier_freq_utra : public ::google::protobuf::Message {
 public:
  rp_lte_carrier_freq_utra();
  virtual ~rp_lte_carrier_freq_utra();

  rp_lte_carrier_freq_utra(const rp_lte_carrier_freq_utra& from);

  inline rp_lte_carrier_freq_utra& operator=(const rp_lte_carrier_freq_utra& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_carrier_freq_utra& default_instance();

  void Swap(rp_lte_carrier_freq_utra* other);

  // implements Message ----------------------------------------------

  inline rp_lte_carrier_freq_utra* New() const { return New(NULL); }

  rp_lte_carrier_freq_utra* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_carrier_freq_utra& from);
  void MergeFrom(const rp_lte_carrier_freq_utra& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_carrier_freq_utra* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 arfcn_value_utra = 1;
  void clear_arfcn_value_utra();
  static const int kArfcnValueUtraFieldNumber = 1;
  ::google::protobuf::int32 arfcn_value_utra() const;
  void set_arfcn_value_utra(::google::protobuf::int32 value);

  // optional int32 threshold_x_low = 2;
  void clear_threshold_x_low();
  static const int kThresholdXLowFieldNumber = 2;
  ::google::protobuf::int32 threshold_x_low() const;
  void set_threshold_x_low(::google::protobuf::int32 value);

  // optional int32 threshold_x_high = 3;
  void clear_threshold_x_high();
  static const int kThresholdXHighFieldNumber = 3;
  ::google::protobuf::int32 threshold_x_high() const;
  void set_threshold_x_high(::google::protobuf::int32 value);

  // optional int32 threshold_x_low_q_r9 = 4;
  void clear_threshold_x_low_q_r9();
  static const int kThresholdXLowQR9FieldNumber = 4;
  ::google::protobuf::int32 threshold_x_low_q_r9() const;
  void set_threshold_x_low_q_r9(::google::protobuf::int32 value);

  // optional int32 threshold_x_high_q_r9 = 5;
  void clear_threshold_x_high_q_r9();
  static const int kThresholdXHighQR9FieldNumber = 5;
  ::google::protobuf::int32 threshold_x_high_q_r9() const;
  void set_threshold_x_high_q_r9(::google::protobuf::int32 value);

  // optional int32 cell_reselection_priority = 6;
  void clear_cell_reselection_priority();
  static const int kCellReselectionPriorityFieldNumber = 6;
  ::google::protobuf::int32 cell_reselection_priority() const;
  void set_cell_reselection_priority(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_carrier_freq_utra)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 arfcn_value_utra_;
  ::google::protobuf::int32 threshold_x_low_;
  ::google::protobuf::int32 threshold_x_high_;
  ::google::protobuf::int32 threshold_x_low_q_r9_;
  ::google::protobuf::int32 threshold_x_high_q_r9_;
  ::google::protobuf::int32 cell_reselection_priority_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_carrier_freq_utra* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_sib6 : public ::google::protobuf::Message {
 public:
  rp_lte_sib6();
  virtual ~rp_lte_sib6();

  rp_lte_sib6(const rp_lte_sib6& from);

  inline rp_lte_sib6& operator=(const rp_lte_sib6& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_sib6& default_instance();

  void Swap(rp_lte_sib6* other);

  // implements Message ----------------------------------------------

  inline rp_lte_sib6* New() const { return New(NULL); }

  rp_lte_sib6* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_sib6& from);
  void MergeFrom(const rp_lte_sib6& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_sib6* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rf_phreaker.protobuf.rp_lte_carrier_freq_utra carrier_freq_list_utra_fdd = 2;
  int carrier_freq_list_utra_fdd_size() const;
  void clear_carrier_freq_list_utra_fdd();
  static const int kCarrierFreqListUtraFddFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra& carrier_freq_list_utra_fdd(int index) const;
  ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra* mutable_carrier_freq_list_utra_fdd(int index);
  ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra* add_carrier_freq_list_utra_fdd();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra >*
      mutable_carrier_freq_list_utra_fdd();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra >&
      carrier_freq_list_utra_fdd() const;

  // repeated .rf_phreaker.protobuf.rp_lte_carrier_freq_utra carrier_freq_list_utra_tdd = 3;
  int carrier_freq_list_utra_tdd_size() const;
  void clear_carrier_freq_list_utra_tdd();
  static const int kCarrierFreqListUtraTddFieldNumber = 3;
  const ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra& carrier_freq_list_utra_tdd(int index) const;
  ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra* mutable_carrier_freq_list_utra_tdd(int index);
  ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra* add_carrier_freq_list_utra_tdd();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra >*
      mutable_carrier_freq_list_utra_tdd();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra >&
      carrier_freq_list_utra_tdd() const;

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_sib6)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra > carrier_freq_list_utra_fdd_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra > carrier_freq_list_utra_tdd_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_sib6* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_carrier_freqs_geran : public ::google::protobuf::Message {
 public:
  rp_lte_carrier_freqs_geran();
  virtual ~rp_lte_carrier_freqs_geran();

  rp_lte_carrier_freqs_geran(const rp_lte_carrier_freqs_geran& from);

  inline rp_lte_carrier_freqs_geran& operator=(const rp_lte_carrier_freqs_geran& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_carrier_freqs_geran& default_instance();

  void Swap(rp_lte_carrier_freqs_geran* other);

  // implements Message ----------------------------------------------

  inline rp_lte_carrier_freqs_geran* New() const { return New(NULL); }

  rp_lte_carrier_freqs_geran* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_carrier_freqs_geran& from);
  void MergeFrom(const rp_lte_carrier_freqs_geran& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_carrier_freqs_geran* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 1;
  void clear_band_indicator();
  static const int kBandIndicatorFieldNumber = 1;
  ::rf_phreaker::protobuf::rp_band_indicator_type band_indicator() const;
  void set_band_indicator(::rf_phreaker::protobuf::rp_band_indicator_type value);

  // repeated int32 arfcns = 2 [packed = true];
  int arfcns_size() const;
  void clear_arfcns();
  static const int kArfcnsFieldNumber = 2;
  ::google::protobuf::int32 arfcns(int index) const;
  void set_arfcns(int index, ::google::protobuf::int32 value);
  void add_arfcns(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      arfcns() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_arfcns();

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > arfcns_;
  mutable int _arfcns_cached_byte_size_;
  int band_indicator_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_carrier_freqs_geran* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_geran_common_info : public ::google::protobuf::Message {
 public:
  rp_lte_geran_common_info();
  virtual ~rp_lte_geran_common_info();

  rp_lte_geran_common_info(const rp_lte_geran_common_info& from);

  inline rp_lte_geran_common_info& operator=(const rp_lte_geran_common_info& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_geran_common_info& default_instance();

  void Swap(rp_lte_geran_common_info* other);

  // implements Message ----------------------------------------------

  inline rp_lte_geran_common_info* New() const { return New(NULL); }

  rp_lte_geran_common_info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_geran_common_info& from);
  void MergeFrom(const rp_lte_geran_common_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_geran_common_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cell_reselection_priority = 1;
  void clear_cell_reselection_priority();
  static const int kCellReselectionPriorityFieldNumber = 1;
  ::google::protobuf::int32 cell_reselection_priority() const;
  void set_cell_reselection_priority(::google::protobuf::int32 value);

  // optional int32 threshold_x_high = 2;
  void clear_threshold_x_high();
  static const int kThresholdXHighFieldNumber = 2;
  ::google::protobuf::int32 threshold_x_high() const;
  void set_threshold_x_high(::google::protobuf::int32 value);

  // optional int32 threshold_x_low = 3;
  void clear_threshold_x_low();
  static const int kThresholdXLowFieldNumber = 3;
  ::google::protobuf::int32 threshold_x_low() const;
  void set_threshold_x_low(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_geran_common_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 cell_reselection_priority_;
  ::google::protobuf::int32 threshold_x_high_;
  ::google::protobuf::int32 threshold_x_low_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_geran_common_info* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_carrier_freqs_info_geran : public ::google::protobuf::Message {
 public:
  rp_lte_carrier_freqs_info_geran();
  virtual ~rp_lte_carrier_freqs_info_geran();

  rp_lte_carrier_freqs_info_geran(const rp_lte_carrier_freqs_info_geran& from);

  inline rp_lte_carrier_freqs_info_geran& operator=(const rp_lte_carrier_freqs_info_geran& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_carrier_freqs_info_geran& default_instance();

  void Swap(rp_lte_carrier_freqs_info_geran* other);

  // implements Message ----------------------------------------------

  inline rp_lte_carrier_freqs_info_geran* New() const { return New(NULL); }

  rp_lte_carrier_freqs_info_geran* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_carrier_freqs_info_geran& from);
  void MergeFrom(const rp_lte_carrier_freqs_info_geran& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_carrier_freqs_info_geran* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_lte_carrier_freqs_geran carrier_freqs = 1;
  bool has_carrier_freqs() const;
  void clear_carrier_freqs();
  static const int kCarrierFreqsFieldNumber = 1;
  const ::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran& carrier_freqs() const;
  ::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran* mutable_carrier_freqs();
  ::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran* release_carrier_freqs();
  void set_allocated_carrier_freqs(::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran* carrier_freqs);

  // optional .rf_phreaker.protobuf.rp_lte_geran_common_info common_info = 2;
  bool has_common_info() const;
  void clear_common_info();
  static const int kCommonInfoFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_lte_geran_common_info& common_info() const;
  ::rf_phreaker::protobuf::rp_lte_geran_common_info* mutable_common_info();
  ::rf_phreaker::protobuf::rp_lte_geran_common_info* release_common_info();
  void set_allocated_common_info(::rf_phreaker::protobuf::rp_lte_geran_common_info* common_info);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran* carrier_freqs_;
  ::rf_phreaker::protobuf::rp_lte_geran_common_info* common_info_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_carrier_freqs_info_geran* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_sib7 : public ::google::protobuf::Message {
 public:
  rp_lte_sib7();
  virtual ~rp_lte_sib7();

  rp_lte_sib7(const rp_lte_sib7& from);

  inline rp_lte_sib7& operator=(const rp_lte_sib7& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_sib7& default_instance();

  void Swap(rp_lte_sib7* other);

  // implements Message ----------------------------------------------

  inline rp_lte_sib7* New() const { return New(NULL); }

  rp_lte_sib7* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_sib7& from);
  void MergeFrom(const rp_lte_sib7& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_sib7* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran carrier_freqs_info_list_geran = 2;
  int carrier_freqs_info_list_geran_size() const;
  void clear_carrier_freqs_info_list_geran();
  static const int kCarrierFreqsInfoListGeranFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_lte_carrier_freqs_info_geran& carrier_freqs_info_list_geran(int index) const;
  ::rf_phreaker::protobuf::rp_lte_carrier_freqs_info_geran* mutable_carrier_freqs_info_list_geran(int index);
  ::rf_phreaker::protobuf::rp_lte_carrier_freqs_info_geran* add_carrier_freqs_info_list_geran();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freqs_info_geran >*
      mutable_carrier_freqs_info_list_geran();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freqs_info_geran >&
      carrier_freqs_info_list_geran() const;

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_sib7)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freqs_info_geran > carrier_freqs_info_list_geran_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_sib7* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_neighbor_cells_per_band_class_cdma_2000 : public ::google::protobuf::Message {
 public:
  rp_lte_neighbor_cells_per_band_class_cdma_2000();
  virtual ~rp_lte_neighbor_cells_per_band_class_cdma_2000();

  rp_lte_neighbor_cells_per_band_class_cdma_2000(const rp_lte_neighbor_cells_per_band_class_cdma_2000& from);

  inline rp_lte_neighbor_cells_per_band_class_cdma_2000& operator=(const rp_lte_neighbor_cells_per_band_class_cdma_2000& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_neighbor_cells_per_band_class_cdma_2000& default_instance();

  void Swap(rp_lte_neighbor_cells_per_band_class_cdma_2000* other);

  // implements Message ----------------------------------------------

  inline rp_lte_neighbor_cells_per_band_class_cdma_2000* New() const { return New(NULL); }

  rp_lte_neighbor_cells_per_band_class_cdma_2000* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_neighbor_cells_per_band_class_cdma_2000& from);
  void MergeFrom(const rp_lte_neighbor_cells_per_band_class_cdma_2000& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_neighbor_cells_per_band_class_cdma_2000* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 arfcn_value_cdma_2000 = 1;
  void clear_arfcn_value_cdma_2000();
  static const int kArfcnValueCdma2000FieldNumber = 1;
  ::google::protobuf::int32 arfcn_value_cdma_2000() const;
  void set_arfcn_value_cdma_2000(::google::protobuf::int32 value);

  // repeated int32 physical_cell_ids = 2 [packed = true];
  int physical_cell_ids_size() const;
  void clear_physical_cell_ids();
  static const int kPhysicalCellIdsFieldNumber = 2;
  ::google::protobuf::int32 physical_cell_ids(int index) const;
  void set_physical_cell_ids(int index, ::google::protobuf::int32 value);
  void add_physical_cell_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      physical_cell_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_physical_cell_ids();

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > physical_cell_ids_;
  mutable int _physical_cell_ids_cached_byte_size_;
  ::google::protobuf::int32 arfcn_value_cdma_2000_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_neighbor_cells_per_band_class_cdma_2000* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_neighbor_cell_cdma_2000 : public ::google::protobuf::Message {
 public:
  rp_lte_neighbor_cell_cdma_2000();
  virtual ~rp_lte_neighbor_cell_cdma_2000();

  rp_lte_neighbor_cell_cdma_2000(const rp_lte_neighbor_cell_cdma_2000& from);

  inline rp_lte_neighbor_cell_cdma_2000& operator=(const rp_lte_neighbor_cell_cdma_2000& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_neighbor_cell_cdma_2000& default_instance();

  void Swap(rp_lte_neighbor_cell_cdma_2000* other);

  // implements Message ----------------------------------------------

  inline rp_lte_neighbor_cell_cdma_2000* New() const { return New(NULL); }

  rp_lte_neighbor_cell_cdma_2000* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_neighbor_cell_cdma_2000& from);
  void MergeFrom(const rp_lte_neighbor_cell_cdma_2000& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_neighbor_cell_cdma_2000* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_lte_band_class_cdma_2000_type band = 1;
  void clear_band();
  static const int kBandFieldNumber = 1;
  ::rf_phreaker::protobuf::rp_lte_band_class_cdma_2000_type band() const;
  void set_band(::rf_phreaker::protobuf::rp_lte_band_class_cdma_2000_type value);

  // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000 neighbor_cells_per_freq_list = 2;
  int neighbor_cells_per_freq_list_size() const;
  void clear_neighbor_cells_per_freq_list();
  static const int kNeighborCellsPerFreqListFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_lte_neighbor_cells_per_band_class_cdma_2000& neighbor_cells_per_freq_list(int index) const;
  ::rf_phreaker::protobuf::rp_lte_neighbor_cells_per_band_class_cdma_2000* mutable_neighbor_cells_per_freq_list(int index);
  ::rf_phreaker::protobuf::rp_lte_neighbor_cells_per_band_class_cdma_2000* add_neighbor_cells_per_freq_list();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cells_per_band_class_cdma_2000 >*
      mutable_neighbor_cells_per_freq_list();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cells_per_band_class_cdma_2000 >&
      neighbor_cells_per_freq_list() const;

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cells_per_band_class_cdma_2000 > neighbor_cells_per_freq_list_;
  int band_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_neighbor_cell_cdma_2000* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_cell_reselection_parameters_cmda_2000 : public ::google::protobuf::Message {
 public:
  rp_lte_cell_reselection_parameters_cmda_2000();
  virtual ~rp_lte_cell_reselection_parameters_cmda_2000();

  rp_lte_cell_reselection_parameters_cmda_2000(const rp_lte_cell_reselection_parameters_cmda_2000& from);

  inline rp_lte_cell_reselection_parameters_cmda_2000& operator=(const rp_lte_cell_reselection_parameters_cmda_2000& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_cell_reselection_parameters_cmda_2000& default_instance();

  void Swap(rp_lte_cell_reselection_parameters_cmda_2000* other);

  // implements Message ----------------------------------------------

  inline rp_lte_cell_reselection_parameters_cmda_2000* New() const { return New(NULL); }

  rp_lte_cell_reselection_parameters_cmda_2000* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_cell_reselection_parameters_cmda_2000& from);
  void MergeFrom(const rp_lte_cell_reselection_parameters_cmda_2000& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_cell_reselection_parameters_cmda_2000* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000 neighbor_cell_list = 1;
  int neighbor_cell_list_size() const;
  void clear_neighbor_cell_list();
  static const int kNeighborCellListFieldNumber = 1;
  const ::rf_phreaker::protobuf::rp_lte_neighbor_cell_cdma_2000& neighbor_cell_list(int index) const;
  ::rf_phreaker::protobuf::rp_lte_neighbor_cell_cdma_2000* mutable_neighbor_cell_list(int index);
  ::rf_phreaker::protobuf::rp_lte_neighbor_cell_cdma_2000* add_neighbor_cell_list();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell_cdma_2000 >*
      mutable_neighbor_cell_list();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell_cdma_2000 >&
      neighbor_cell_list() const;

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell_cdma_2000 > neighbor_cell_list_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_cell_reselection_parameters_cmda_2000* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_sib8 : public ::google::protobuf::Message {
 public:
  rp_lte_sib8();
  virtual ~rp_lte_sib8();

  rp_lte_sib8(const rp_lte_sib8& from);

  inline rp_lte_sib8& operator=(const rp_lte_sib8& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_sib8& default_instance();

  void Swap(rp_lte_sib8* other);

  // implements Message ----------------------------------------------

  inline rp_lte_sib8* New() const { return New(NULL); }

  rp_lte_sib8* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_sib8& from);
  void MergeFrom(const rp_lte_sib8& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_sib8* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000 parameters_hrpd = 2;
  bool has_parameters_hrpd() const;
  void clear_parameters_hrpd();
  static const int kParametersHrpdFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000& parameters_hrpd() const;
  ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* mutable_parameters_hrpd();
  ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* release_parameters_hrpd();
  void set_allocated_parameters_hrpd(::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* parameters_hrpd);

  // optional .rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000 parameters_1xrtt = 3;
  bool has_parameters_1xrtt() const;
  void clear_parameters_1xrtt();
  static const int kParameters1XrttFieldNumber = 3;
  const ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000& parameters_1xrtt() const;
  ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* mutable_parameters_1xrtt();
  ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* release_parameters_1xrtt();
  void set_allocated_parameters_1xrtt(::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* parameters_1xrtt);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_sib8)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* parameters_hrpd_;
  ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* parameters_1xrtt_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_sib8* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_layer_3 : public ::google::protobuf::Message {
 public:
  rp_lte_layer_3();
  virtual ~rp_lte_layer_3();

  rp_lte_layer_3(const rp_lte_layer_3& from);

  inline rp_lte_layer_3& operator=(const rp_lte_layer_3& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_layer_3& default_instance();

  void Swap(rp_lte_layer_3* other);

  // implements Message ----------------------------------------------

  inline rp_lte_layer_3* New() const { return New(NULL); }

  rp_lte_layer_3* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_layer_3& from);
  void MergeFrom(const rp_lte_layer_3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_layer_3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
  int raw_layer_3_size() const;
  void clear_raw_layer_3();
  static const int kRawLayer3FieldNumber = 1;
  const ::rf_phreaker::protobuf::rp_raw_layer_3& raw_layer_3(int index) const;
  ::rf_phreaker::protobuf::rp_raw_layer_3* mutable_raw_layer_3(int index);
  ::rf_phreaker::protobuf::rp_raw_layer_3* add_raw_layer_3();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >*
      mutable_raw_layer_3();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >&
      raw_layer_3() const;

  // optional .rf_phreaker.protobuf.rp_lte_sib1 sib1 = 2;
  bool has_sib1() const;
  void clear_sib1();
  static const int kSib1FieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_lte_sib1& sib1() const;
  ::rf_phreaker::protobuf::rp_lte_sib1* mutable_sib1();
  ::rf_phreaker::protobuf::rp_lte_sib1* release_sib1();
  void set_allocated_sib1(::rf_phreaker::protobuf::rp_lte_sib1* sib1);

  // optional .rf_phreaker.protobuf.rp_lte_sib3 sib3 = 4;
  bool has_sib3() const;
  void clear_sib3();
  static const int kSib3FieldNumber = 4;
  const ::rf_phreaker::protobuf::rp_lte_sib3& sib3() const;
  ::rf_phreaker::protobuf::rp_lte_sib3* mutable_sib3();
  ::rf_phreaker::protobuf::rp_lte_sib3* release_sib3();
  void set_allocated_sib3(::rf_phreaker::protobuf::rp_lte_sib3* sib3);

  // optional .rf_phreaker.protobuf.rp_lte_sib4 sib4 = 5;
  bool has_sib4() const;
  void clear_sib4();
  static const int kSib4FieldNumber = 5;
  const ::rf_phreaker::protobuf::rp_lte_sib4& sib4() const;
  ::rf_phreaker::protobuf::rp_lte_sib4* mutable_sib4();
  ::rf_phreaker::protobuf::rp_lte_sib4* release_sib4();
  void set_allocated_sib4(::rf_phreaker::protobuf::rp_lte_sib4* sib4);

  // optional .rf_phreaker.protobuf.rp_lte_sib5 sib5 = 6;
  bool has_sib5() const;
  void clear_sib5();
  static const int kSib5FieldNumber = 6;
  const ::rf_phreaker::protobuf::rp_lte_sib5& sib5() const;
  ::rf_phreaker::protobuf::rp_lte_sib5* mutable_sib5();
  ::rf_phreaker::protobuf::rp_lte_sib5* release_sib5();
  void set_allocated_sib5(::rf_phreaker::protobuf::rp_lte_sib5* sib5);

  // optional .rf_phreaker.protobuf.rp_lte_sib6 sib6 = 7;
  bool has_sib6() const;
  void clear_sib6();
  static const int kSib6FieldNumber = 7;
  const ::rf_phreaker::protobuf::rp_lte_sib6& sib6() const;
  ::rf_phreaker::protobuf::rp_lte_sib6* mutable_sib6();
  ::rf_phreaker::protobuf::rp_lte_sib6* release_sib6();
  void set_allocated_sib6(::rf_phreaker::protobuf::rp_lte_sib6* sib6);

  // optional .rf_phreaker.protobuf.rp_lte_sib7 sib7 = 8;
  bool has_sib7() const;
  void clear_sib7();
  static const int kSib7FieldNumber = 8;
  const ::rf_phreaker::protobuf::rp_lte_sib7& sib7() const;
  ::rf_phreaker::protobuf::rp_lte_sib7* mutable_sib7();
  ::rf_phreaker::protobuf::rp_lte_sib7* release_sib7();
  void set_allocated_sib7(::rf_phreaker::protobuf::rp_lte_sib7* sib7);

  // optional .rf_phreaker.protobuf.rp_lte_sib8 sib8 = 9;
  bool has_sib8() const;
  void clear_sib8();
  static const int kSib8FieldNumber = 9;
  const ::rf_phreaker::protobuf::rp_lte_sib8& sib8() const;
  ::rf_phreaker::protobuf::rp_lte_sib8* mutable_sib8();
  ::rf_phreaker::protobuf::rp_lte_sib8* release_sib8();
  void set_allocated_sib8(::rf_phreaker::protobuf::rp_lte_sib8* sib8);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_layer_3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 > raw_layer_3_;
  ::rf_phreaker::protobuf::rp_lte_sib1* sib1_;
  ::rf_phreaker::protobuf::rp_lte_sib3* sib3_;
  ::rf_phreaker::protobuf::rp_lte_sib4* sib4_;
  ::rf_phreaker::protobuf::rp_lte_sib5* sib5_;
  ::rf_phreaker::protobuf::rp_lte_sib6* sib6_;
  ::rf_phreaker::protobuf::rp_lte_sib7* sib7_;
  ::rf_phreaker::protobuf::rp_lte_sib8* sib8_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_layer_3* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte : public ::google::protobuf::Message {
 public:
  rp_lte();
  virtual ~rp_lte();

  rp_lte(const rp_lte& from);

  inline rp_lte& operator=(const rp_lte& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte& default_instance();

  void Swap(rp_lte* other);

  // implements Message ----------------------------------------------

  inline rp_lte* New() const { return New(NULL); }

  rp_lte* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte& from);
  void MergeFrom(const rp_lte& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_base base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::rf_phreaker::protobuf::rp_base& base() const;
  ::rf_phreaker::protobuf::rp_base* mutable_base();
  ::rf_phreaker::protobuf::rp_base* release_base();
  void set_allocated_base(::rf_phreaker::protobuf::rp_base* base);

  // optional int32 earfcn = 2;
  void clear_earfcn();
  static const int kEarfcnFieldNumber = 2;
  ::google::protobuf::int32 earfcn() const;
  void set_earfcn(::google::protobuf::int32 value);

  // optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
  void clear_operating_band();
  static const int kOperatingBandFieldNumber = 3;
  ::rf_phreaker::protobuf::rp_operating_band operating_band() const;
  void set_operating_band(::rf_phreaker::protobuf::rp_operating_band value);

  // optional int32 physical_cell_id = 4;
  void clear_physical_cell_id();
  static const int kPhysicalCellIdFieldNumber = 4;
  ::google::protobuf::int32 physical_cell_id() const;
  void set_physical_cell_id(::google::protobuf::int32 value);

  // optional double rsrp = 5;
  void clear_rsrp();
  static const int kRsrpFieldNumber = 5;
  double rsrp() const;
  void set_rsrp(double value);

  // optional double rsrq = 6;
  void clear_rsrq();
  static const int kRsrqFieldNumber = 6;
  double rsrq() const;
  void set_rsrq(double value);

  // optional double rssi = 7;
  void clear_rssi();
  static const int kRssiFieldNumber = 7;
  double rssi() const;
  void set_rssi(double value);

  // optional int32 psch_id = 8;
  void clear_psch_id();
  static const int kPschIdFieldNumber = 8;
  ::google::protobuf::int32 psch_id() const;
  void set_psch_id(::google::protobuf::int32 value);

  // optional double psch_quality = 9;
  void clear_psch_quality();
  static const int kPschQualityFieldNumber = 9;
  double psch_quality() const;
  void set_psch_quality(double value);

  // optional int32 ssch_id = 10;
  void clear_ssch_id();
  static const int kSschIdFieldNumber = 10;
  ::google::protobuf::int32 ssch_id() const;
  void set_ssch_id(::google::protobuf::int32 value);

  // optional double ssch_quality = 11;
  void clear_ssch_quality();
  static const int kSschQualityFieldNumber = 11;
  double ssch_quality() const;
  void set_ssch_quality(double value);

  // optional double sync_quality = 12;
  void clear_sync_quality();
  static const int kSyncQualityFieldNumber = 12;
  double sync_quality() const;
  void set_sync_quality(double value);

  // optional int32 cyclic_prefix = 13;
  void clear_cyclic_prefix();
  static const int kCyclicPrefixFieldNumber = 13;
  ::google::protobuf::int32 cyclic_prefix() const;
  void set_cyclic_prefix(::google::protobuf::int32 value);

  // optional int32 num_antenna_ports = 14;
  void clear_num_antenna_ports();
  static const int kNumAntennaPortsFieldNumber = 14;
  ::google::protobuf::int32 num_antenna_ports() const;
  void set_num_antenna_ports(::google::protobuf::int32 value);

  // optional int32 downlink_bandwidth = 15;
  void clear_downlink_bandwidth();
  static const int kDownlinkBandwidthFieldNumber = 15;
  ::google::protobuf::int32 downlink_bandwidth() const;
  void set_downlink_bandwidth(::google::protobuf::int32 value);

  // optional int32 frame_number = 16;
  void clear_frame_number();
  static const int kFrameNumberFieldNumber = 16;
  ::google::protobuf::int32 frame_number() const;
  void set_frame_number(::google::protobuf::int32 value);

  // optional .rf_phreaker.protobuf.rp_lte_layer_3 layer_3 = 17;
  bool has_layer_3() const;
  void clear_layer_3();
  static const int kLayer3FieldNumber = 17;
  const ::rf_phreaker::protobuf::rp_lte_layer_3& layer_3() const;
  ::rf_phreaker::protobuf::rp_lte_layer_3* mutable_layer_3();
  ::rf_phreaker::protobuf::rp_lte_layer_3* release_layer_3();
  void set_allocated_layer_3(::rf_phreaker::protobuf::rp_lte_layer_3* layer_3);

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rf_phreaker::protobuf::rp_base* base_;
  ::google::protobuf::int32 earfcn_;
  int operating_band_;
  double rsrp_;
  double rsrq_;
  ::google::protobuf::int32 physical_cell_id_;
  ::google::protobuf::int32 psch_id_;
  double rssi_;
  double psch_quality_;
  double ssch_quality_;
  ::google::protobuf::int32 ssch_id_;
  ::google::protobuf::int32 cyclic_prefix_;
  double sync_quality_;
  ::google::protobuf::int32 num_antenna_ports_;
  ::google::protobuf::int32 downlink_bandwidth_;
  ::rf_phreaker::protobuf::rp_lte_layer_3* layer_3_;
  ::google::protobuf::int32 frame_number_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte* default_instance_;
};
// -------------------------------------------------------------------

class rp_lte_update : public ::google::protobuf::Message {
 public:
  rp_lte_update();
  virtual ~rp_lte_update();

  rp_lte_update(const rp_lte_update& from);

  inline rp_lte_update& operator=(const rp_lte_update& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_lte_update& default_instance();

  void Swap(rp_lte_update* other);

  // implements Message ----------------------------------------------

  inline rp_lte_update* New() const { return New(NULL); }

  rp_lte_update* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_lte_update& from);
  void MergeFrom(const rp_lte_update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_lte_update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_base base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::rf_phreaker::protobuf::rp_base& base() const;
  ::rf_phreaker::protobuf::rp_base* mutable_base();
  ::rf_phreaker::protobuf::rp_base* release_base();
  void set_allocated_base(::rf_phreaker::protobuf::rp_base* base);

  // repeated .rf_phreaker.protobuf.rp_lte lte = 2;
  int lte_size() const;
  void clear_lte();
  static const int kLteFieldNumber = 2;
  const ::rf_phreaker::protobuf::rp_lte& lte(int index) const;
  ::rf_phreaker::protobuf::rp_lte* mutable_lte(int index);
  ::rf_phreaker::protobuf::rp_lte* add_lte();
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte >*
      mutable_lte();
  const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte >&
      lte() const;

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_lte_update)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rf_phreaker::protobuf::rp_base* base_;
  ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte > lte_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_lte_update* default_instance_;
};
// -------------------------------------------------------------------

class rp_raw_data : public ::google::protobuf::Message {
 public:
  rp_raw_data();
  virtual ~rp_raw_data();

  rp_raw_data(const rp_raw_data& from);

  inline rp_raw_data& operator=(const rp_raw_data& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rp_raw_data& default_instance();

  void Swap(rp_raw_data* other);

  // implements Message ----------------------------------------------

  inline rp_raw_data* New() const { return New(NULL); }

  rp_raw_data* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rp_raw_data& from);
  void MergeFrom(const rp_raw_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rp_raw_data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rf_phreaker.protobuf.rp_base base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::rf_phreaker::protobuf::rp_base& base() const;
  ::rf_phreaker::protobuf::rp_base* mutable_base();
  ::rf_phreaker::protobuf::rp_base* release_base();
  void set_allocated_base(::rf_phreaker::protobuf::rp_base* base);

  // optional double power_adjustment = 2;
  void clear_power_adjustment();
  static const int kPowerAdjustmentFieldNumber = 2;
  double power_adjustment() const;
  void set_power_adjustment(double value);

  // optional .rf_phreaker.protobuf.rp_sample_format_type sample_format = 3;
  void clear_sample_format();
  static const int kSampleFormatFieldNumber = 3;
  ::rf_phreaker::protobuf::rp_sample_format_type sample_format() const;
  void set_sample_format(::rf_phreaker::protobuf::rp_sample_format_type value);

  // optional int64 num_samples = 4;
  void clear_num_samples();
  static const int kNumSamplesFieldNumber = 4;
  ::google::protobuf::int64 num_samples() const;
  void set_num_samples(::google::protobuf::int64 value);

  // repeated float samples = 5 [packed = true];
  int samples_size() const;
  void clear_samples();
  static const int kSamplesFieldNumber = 5;
  float samples(int index) const;
  void set_samples(int index, float value);
  void add_samples(float value);
  const ::google::protobuf::RepeatedField< float >&
      samples() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_samples();

  // @@protoc_insertion_point(class_scope:rf_phreaker.protobuf.rp_raw_data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rf_phreaker::protobuf::rp_base* base_;
  double power_adjustment_;
  ::google::protobuf::int64 num_samples_;
  ::google::protobuf::RepeatedField< float > samples_;
  mutable int _samples_cached_byte_size_;
  int sample_format_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rf_5fphreaker_2eproto();
  friend void protobuf_AssignDesc_rf_5fphreaker_2eproto();
  friend void protobuf_ShutdownFile_rf_5fphreaker_2eproto();

  void InitAsDefaultInstance();
  static rp_raw_data* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// rp_update

// optional .rf_phreaker.protobuf.rp_log log = 1;
inline bool rp_update::has_log() const {
  return update_case() == kLog;
}
inline void rp_update::set_has_log() {
  _oneof_case_[0] = kLog;
}
inline void rp_update::clear_log() {
  if (has_log()) {
    delete update_.log_;
    clear_has_update();
  }
}
inline  const ::rf_phreaker::protobuf::rp_log& rp_update::log() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.log)
  return has_log()
      ? *update_.log_
      : ::rf_phreaker::protobuf::rp_log::default_instance();
}
inline ::rf_phreaker::protobuf::rp_log* rp_update::mutable_log() {
  if (!has_log()) {
    clear_update();
    set_has_log();
    update_.log_ = new ::rf_phreaker::protobuf::rp_log;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.log)
  return update_.log_;
}
inline ::rf_phreaker::protobuf::rp_log* rp_update::release_log() {
  if (has_log()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_log* temp = update_.log_;
    update_.log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void rp_update::set_allocated_log(::rf_phreaker::protobuf::rp_log* log) {
  clear_update();
  if (log) {
    set_has_log();
    update_.log_ = log;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.log)
}

// optional .rf_phreaker.protobuf.rp_message msg = 2;
inline bool rp_update::has_msg() const {
  return update_case() == kMsg;
}
inline void rp_update::set_has_msg() {
  _oneof_case_[0] = kMsg;
}
inline void rp_update::clear_msg() {
  if (has_msg()) {
    delete update_.msg_;
    clear_has_update();
  }
}
inline  const ::rf_phreaker::protobuf::rp_message& rp_update::msg() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.msg)
  return has_msg()
      ? *update_.msg_
      : ::rf_phreaker::protobuf::rp_message::default_instance();
}
inline ::rf_phreaker::protobuf::rp_message* rp_update::mutable_msg() {
  if (!has_msg()) {
    clear_update();
    set_has_msg();
    update_.msg_ = new ::rf_phreaker::protobuf::rp_message;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.msg)
  return update_.msg_;
}
inline ::rf_phreaker::protobuf::rp_message* rp_update::release_msg() {
  if (has_msg()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_message* temp = update_.msg_;
    update_.msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void rp_update::set_allocated_msg(::rf_phreaker::protobuf::rp_message* msg) {
  clear_update();
  if (msg) {
    set_has_msg();
    update_.msg_ = msg;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.msg)
}

// optional .rf_phreaker.protobuf.rp_device_info device = 3;
inline bool rp_update::has_device() const {
  return update_case() == kDevice;
}
inline void rp_update::set_has_device() {
  _oneof_case_[0] = kDevice;
}
inline void rp_update::clear_device() {
  if (has_device()) {
    delete update_.device_;
    clear_has_update();
  }
}
inline  const ::rf_phreaker::protobuf::rp_device_info& rp_update::device() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.device)
  return has_device()
      ? *update_.device_
      : ::rf_phreaker::protobuf::rp_device_info::default_instance();
}
inline ::rf_phreaker::protobuf::rp_device_info* rp_update::mutable_device() {
  if (!has_device()) {
    clear_update();
    set_has_device();
    update_.device_ = new ::rf_phreaker::protobuf::rp_device_info;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.device)
  return update_.device_;
}
inline ::rf_phreaker::protobuf::rp_device_info* rp_update::release_device() {
  if (has_device()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_device_info* temp = update_.device_;
    update_.device_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void rp_update::set_allocated_device(::rf_phreaker::protobuf::rp_device_info* device) {
  clear_update();
  if (device) {
    set_has_device();
    update_.device_ = device;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.device)
}

// optional .rf_phreaker.protobuf.rp_gps gps = 4;
inline bool rp_update::has_gps() const {
  return update_case() == kGps;
}
inline void rp_update::set_has_gps() {
  _oneof_case_[0] = kGps;
}
inline void rp_update::clear_gps() {
  if (has_gps()) {
    delete update_.gps_;
    clear_has_update();
  }
}
inline  const ::rf_phreaker::protobuf::rp_gps& rp_update::gps() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.gps)
  return has_gps()
      ? *update_.gps_
      : ::rf_phreaker::protobuf::rp_gps::default_instance();
}
inline ::rf_phreaker::protobuf::rp_gps* rp_update::mutable_gps() {
  if (!has_gps()) {
    clear_update();
    set_has_gps();
    update_.gps_ = new ::rf_phreaker::protobuf::rp_gps;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.gps)
  return update_.gps_;
}
inline ::rf_phreaker::protobuf::rp_gps* rp_update::release_gps() {
  if (has_gps()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_gps* temp = update_.gps_;
    update_.gps_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void rp_update::set_allocated_gps(::rf_phreaker::protobuf::rp_gps* gps) {
  clear_update();
  if (gps) {
    set_has_gps();
    update_.gps_ = gps;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.gps)
}

// optional .rf_phreaker.protobuf.rp_gsm_update gsm_full_scan = 5;
inline bool rp_update::has_gsm_full_scan() const {
  return update_case() == kGsmFullScan;
}
inline void rp_update::set_has_gsm_full_scan() {
  _oneof_case_[0] = kGsmFullScan;
}
inline void rp_update::clear_gsm_full_scan() {
  if (has_gsm_full_scan()) {
    delete update_.gsm_full_scan_;
    clear_has_update();
  }
}
inline  const ::rf_phreaker::protobuf::rp_gsm_update& rp_update::gsm_full_scan() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.gsm_full_scan)
  return has_gsm_full_scan()
      ? *update_.gsm_full_scan_
      : ::rf_phreaker::protobuf::rp_gsm_update::default_instance();
}
inline ::rf_phreaker::protobuf::rp_gsm_update* rp_update::mutable_gsm_full_scan() {
  if (!has_gsm_full_scan()) {
    clear_update();
    set_has_gsm_full_scan();
    update_.gsm_full_scan_ = new ::rf_phreaker::protobuf::rp_gsm_update;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.gsm_full_scan)
  return update_.gsm_full_scan_;
}
inline ::rf_phreaker::protobuf::rp_gsm_update* rp_update::release_gsm_full_scan() {
  if (has_gsm_full_scan()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_gsm_update* temp = update_.gsm_full_scan_;
    update_.gsm_full_scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void rp_update::set_allocated_gsm_full_scan(::rf_phreaker::protobuf::rp_gsm_update* gsm_full_scan) {
  clear_update();
  if (gsm_full_scan) {
    set_has_gsm_full_scan();
    update_.gsm_full_scan_ = gsm_full_scan;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.gsm_full_scan)
}

// optional .rf_phreaker.protobuf.rp_gsm_update gsm_sweep = 6;
inline bool rp_update::has_gsm_sweep() const {
  return update_case() == kGsmSweep;
}
inline void rp_update::set_has_gsm_sweep() {
  _oneof_case_[0] = kGsmSweep;
}
inline void rp_update::clear_gsm_sweep() {
  if (has_gsm_sweep()) {
    delete update_.gsm_sweep_;
    clear_has_update();
  }
}
inline  const ::rf_phreaker::protobuf::rp_gsm_update& rp_update::gsm_sweep() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.gsm_sweep)
  return has_gsm_sweep()
      ? *update_.gsm_sweep_
      : ::rf_phreaker::protobuf::rp_gsm_update::default_instance();
}
inline ::rf_phreaker::protobuf::rp_gsm_update* rp_update::mutable_gsm_sweep() {
  if (!has_gsm_sweep()) {
    clear_update();
    set_has_gsm_sweep();
    update_.gsm_sweep_ = new ::rf_phreaker::protobuf::rp_gsm_update;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.gsm_sweep)
  return update_.gsm_sweep_;
}
inline ::rf_phreaker::protobuf::rp_gsm_update* rp_update::release_gsm_sweep() {
  if (has_gsm_sweep()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_gsm_update* temp = update_.gsm_sweep_;
    update_.gsm_sweep_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void rp_update::set_allocated_gsm_sweep(::rf_phreaker::protobuf::rp_gsm_update* gsm_sweep) {
  clear_update();
  if (gsm_sweep) {
    set_has_gsm_sweep();
    update_.gsm_sweep_ = gsm_sweep;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.gsm_sweep)
}

// optional .rf_phreaker.protobuf.rp_wcdma_update wcdma_full_scan = 7;
inline bool rp_update::has_wcdma_full_scan() const {
  return update_case() == kWcdmaFullScan;
}
inline void rp_update::set_has_wcdma_full_scan() {
  _oneof_case_[0] = kWcdmaFullScan;
}
inline void rp_update::clear_wcdma_full_scan() {
  if (has_wcdma_full_scan()) {
    delete update_.wcdma_full_scan_;
    clear_has_update();
  }
}
inline  const ::rf_phreaker::protobuf::rp_wcdma_update& rp_update::wcdma_full_scan() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.wcdma_full_scan)
  return has_wcdma_full_scan()
      ? *update_.wcdma_full_scan_
      : ::rf_phreaker::protobuf::rp_wcdma_update::default_instance();
}
inline ::rf_phreaker::protobuf::rp_wcdma_update* rp_update::mutable_wcdma_full_scan() {
  if (!has_wcdma_full_scan()) {
    clear_update();
    set_has_wcdma_full_scan();
    update_.wcdma_full_scan_ = new ::rf_phreaker::protobuf::rp_wcdma_update;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.wcdma_full_scan)
  return update_.wcdma_full_scan_;
}
inline ::rf_phreaker::protobuf::rp_wcdma_update* rp_update::release_wcdma_full_scan() {
  if (has_wcdma_full_scan()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_wcdma_update* temp = update_.wcdma_full_scan_;
    update_.wcdma_full_scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void rp_update::set_allocated_wcdma_full_scan(::rf_phreaker::protobuf::rp_wcdma_update* wcdma_full_scan) {
  clear_update();
  if (wcdma_full_scan) {
    set_has_wcdma_full_scan();
    update_.wcdma_full_scan_ = wcdma_full_scan;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.wcdma_full_scan)
}

// optional .rf_phreaker.protobuf.rp_wcdma_update wcdma_sweep = 8;
inline bool rp_update::has_wcdma_sweep() const {
  return update_case() == kWcdmaSweep;
}
inline void rp_update::set_has_wcdma_sweep() {
  _oneof_case_[0] = kWcdmaSweep;
}
inline void rp_update::clear_wcdma_sweep() {
  if (has_wcdma_sweep()) {
    delete update_.wcdma_sweep_;
    clear_has_update();
  }
}
inline  const ::rf_phreaker::protobuf::rp_wcdma_update& rp_update::wcdma_sweep() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.wcdma_sweep)
  return has_wcdma_sweep()
      ? *update_.wcdma_sweep_
      : ::rf_phreaker::protobuf::rp_wcdma_update::default_instance();
}
inline ::rf_phreaker::protobuf::rp_wcdma_update* rp_update::mutable_wcdma_sweep() {
  if (!has_wcdma_sweep()) {
    clear_update();
    set_has_wcdma_sweep();
    update_.wcdma_sweep_ = new ::rf_phreaker::protobuf::rp_wcdma_update;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.wcdma_sweep)
  return update_.wcdma_sweep_;
}
inline ::rf_phreaker::protobuf::rp_wcdma_update* rp_update::release_wcdma_sweep() {
  if (has_wcdma_sweep()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_wcdma_update* temp = update_.wcdma_sweep_;
    update_.wcdma_sweep_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void rp_update::set_allocated_wcdma_sweep(::rf_phreaker::protobuf::rp_wcdma_update* wcdma_sweep) {
  clear_update();
  if (wcdma_sweep) {
    set_has_wcdma_sweep();
    update_.wcdma_sweep_ = wcdma_sweep;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.wcdma_sweep)
}

// optional .rf_phreaker.protobuf.rp_lte_update lte_full_scan = 9;
inline bool rp_update::has_lte_full_scan() const {
  return update_case() == kLteFullScan;
}
inline void rp_update::set_has_lte_full_scan() {
  _oneof_case_[0] = kLteFullScan;
}
inline void rp_update::clear_lte_full_scan() {
  if (has_lte_full_scan()) {
    delete update_.lte_full_scan_;
    clear_has_update();
  }
}
inline  const ::rf_phreaker::protobuf::rp_lte_update& rp_update::lte_full_scan() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.lte_full_scan)
  return has_lte_full_scan()
      ? *update_.lte_full_scan_
      : ::rf_phreaker::protobuf::rp_lte_update::default_instance();
}
inline ::rf_phreaker::protobuf::rp_lte_update* rp_update::mutable_lte_full_scan() {
  if (!has_lte_full_scan()) {
    clear_update();
    set_has_lte_full_scan();
    update_.lte_full_scan_ = new ::rf_phreaker::protobuf::rp_lte_update;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.lte_full_scan)
  return update_.lte_full_scan_;
}
inline ::rf_phreaker::protobuf::rp_lte_update* rp_update::release_lte_full_scan() {
  if (has_lte_full_scan()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_lte_update* temp = update_.lte_full_scan_;
    update_.lte_full_scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void rp_update::set_allocated_lte_full_scan(::rf_phreaker::protobuf::rp_lte_update* lte_full_scan) {
  clear_update();
  if (lte_full_scan) {
    set_has_lte_full_scan();
    update_.lte_full_scan_ = lte_full_scan;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.lte_full_scan)
}

// optional .rf_phreaker.protobuf.rp_lte_update lte_sweep = 10;
inline bool rp_update::has_lte_sweep() const {
  return update_case() == kLteSweep;
}
inline void rp_update::set_has_lte_sweep() {
  _oneof_case_[0] = kLteSweep;
}
inline void rp_update::clear_lte_sweep() {
  if (has_lte_sweep()) {
    delete update_.lte_sweep_;
    clear_has_update();
  }
}
inline  const ::rf_phreaker::protobuf::rp_lte_update& rp_update::lte_sweep() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_update.lte_sweep)
  return has_lte_sweep()
      ? *update_.lte_sweep_
      : ::rf_phreaker::protobuf::rp_lte_update::default_instance();
}
inline ::rf_phreaker::protobuf::rp_lte_update* rp_update::mutable_lte_sweep() {
  if (!has_lte_sweep()) {
    clear_update();
    set_has_lte_sweep();
    update_.lte_sweep_ = new ::rf_phreaker::protobuf::rp_lte_update;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_update.lte_sweep)
  return update_.lte_sweep_;
}
inline ::rf_phreaker::protobuf::rp_lte_update* rp_update::release_lte_sweep() {
  if (has_lte_sweep()) {
    clear_has_update();
    ::rf_phreaker::protobuf::rp_lte_update* temp = update_.lte_sweep_;
    update_.lte_sweep_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void rp_update::set_allocated_lte_sweep(::rf_phreaker::protobuf::rp_lte_update* lte_sweep) {
  clear_update();
  if (lte_sweep) {
    set_has_lte_sweep();
    update_.lte_sweep_ = lte_sweep;
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_update.lte_sweep)
}

inline bool rp_update::has_update() const {
  return update_case() != UPDATE_NOT_SET;
}
inline void rp_update::clear_has_update() {
  _oneof_case_[0] = UPDATE_NOT_SET;
}
inline rp_update::UpdateCase rp_update::update_case() const {
  return rp_update::UpdateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// rp_log

// optional string msg = 1;
inline void rp_log::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rp_log::msg() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_log.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rp_log::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_log.msg)
}
inline void rp_log::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rf_phreaker.protobuf.rp_log.msg)
}
inline void rp_log::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rf_phreaker.protobuf.rp_log.msg)
}
inline ::std::string* rp_log::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_log.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rp_log::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rp_log::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_log.msg)
}

// -------------------------------------------------------------------

// rp_message

// optional .rf_phreaker.protobuf.rp_status status = 1;
inline void rp_message::clear_status() {
  status_ = 0;
}
inline ::rf_phreaker::protobuf::rp_status rp_message::status() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_message.status)
  return static_cast< ::rf_phreaker::protobuf::rp_status >(status_);
}
inline void rp_message::set_status(::rf_phreaker::protobuf::rp_status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_message.status)
}

// optional string msg = 2;
inline void rp_message::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rp_message::msg() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_message.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rp_message::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_message.msg)
}
inline void rp_message::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rf_phreaker.protobuf.rp_message.msg)
}
inline void rp_message::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rf_phreaker.protobuf.rp_message.msg)
}
inline ::std::string* rp_message::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_message.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rp_message::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rp_message::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_message.msg)
}

// -------------------------------------------------------------------

// rp_frequency_path

// optional int64 low_freq = 1;
inline void rp_frequency_path::clear_low_freq() {
  low_freq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 rp_frequency_path::low_freq() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_frequency_path.low_freq)
  return low_freq_;
}
inline void rp_frequency_path::set_low_freq(::google::protobuf::int64 value) {
  
  low_freq_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_frequency_path.low_freq)
}

// optional int64 high_freq = 2;
inline void rp_frequency_path::clear_high_freq() {
  high_freq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 rp_frequency_path::high_freq() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_frequency_path.high_freq)
  return high_freq_;
}
inline void rp_frequency_path::set_high_freq(::google::protobuf::int64 value) {
  
  high_freq_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_frequency_path.high_freq)
}

// -------------------------------------------------------------------

// rp_device_info

// optional string serial = 1;
inline void rp_device_info::clear_serial() {
  serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rp_device_info::serial() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_device_info.serial)
  return serial_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rp_device_info::set_serial(const ::std::string& value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_device_info.serial)
}
inline void rp_device_info::set_serial(const char* value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rf_phreaker.protobuf.rp_device_info.serial)
}
inline void rp_device_info::set_serial(const char* value, size_t size) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rf_phreaker.protobuf.rp_device_info.serial)
}
inline ::std::string* rp_device_info::mutable_serial() {
  
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_device_info.serial)
  return serial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rp_device_info::release_serial() {
  
  return serial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rp_device_info::set_allocated_serial(::std::string* serial) {
  if (serial != NULL) {
    
  } else {
    
  }
  serial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial);
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_device_info.serial)
}

// optional .rf_phreaker.protobuf.rp_device_communication device_communication = 2;
inline void rp_device_info::clear_device_communication() {
  device_communication_ = 0;
}
inline ::rf_phreaker::protobuf::rp_device_communication rp_device_info::device_communication() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_device_info.device_communication)
  return static_cast< ::rf_phreaker::protobuf::rp_device_communication >(device_communication_);
}
inline void rp_device_info::set_device_communication(::rf_phreaker::protobuf::rp_device_communication value) {
  
  device_communication_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_device_info.device_communication)
}

// optional int64 frequency_correction_calibration_date = 3;
inline void rp_device_info::clear_frequency_correction_calibration_date() {
  frequency_correction_calibration_date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 rp_device_info::frequency_correction_calibration_date() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_device_info.frequency_correction_calibration_date)
  return frequency_correction_calibration_date_;
}
inline void rp_device_info::set_frequency_correction_calibration_date(::google::protobuf::int64 value) {
  
  frequency_correction_calibration_date_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_device_info.frequency_correction_calibration_date)
}

// optional int64 rf_calibration_date = 4;
inline void rp_device_info::clear_rf_calibration_date() {
  rf_calibration_date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 rp_device_info::rf_calibration_date() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_device_info.rf_calibration_date)
  return rf_calibration_date_;
}
inline void rp_device_info::set_rf_calibration_date(::google::protobuf::int64 value) {
  
  rf_calibration_date_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_device_info.rf_calibration_date)
}

// repeated .rf_phreaker.protobuf.rp_frequency_path frequency_paths = 5;
inline int rp_device_info::frequency_paths_size() const {
  return frequency_paths_.size();
}
inline void rp_device_info::clear_frequency_paths() {
  frequency_paths_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_frequency_path& rp_device_info::frequency_paths(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_device_info.frequency_paths)
  return frequency_paths_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_frequency_path* rp_device_info::mutable_frequency_paths(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_device_info.frequency_paths)
  return frequency_paths_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_frequency_path* rp_device_info::add_frequency_paths() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_device_info.frequency_paths)
  return frequency_paths_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_frequency_path >*
rp_device_info::mutable_frequency_paths() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_device_info.frequency_paths)
  return &frequency_paths_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_frequency_path >&
rp_device_info::frequency_paths() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_device_info.frequency_paths)
  return frequency_paths_;
}

// -------------------------------------------------------------------

// rp_satellite

// optional int32 prn = 1;
inline void rp_satellite::clear_prn() {
  prn_ = 0;
}
inline ::google::protobuf::int32 rp_satellite::prn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_satellite.prn)
  return prn_;
}
inline void rp_satellite::set_prn(::google::protobuf::int32 value) {
  
  prn_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_satellite.prn)
}

// optional double snr = 2;
inline void rp_satellite::clear_snr() {
  snr_ = 0;
}
inline double rp_satellite::snr() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_satellite.snr)
  return snr_;
}
inline void rp_satellite::set_snr(double value) {
  
  snr_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_satellite.snr)
}

// optional double elevation = 3;
inline void rp_satellite::clear_elevation() {
  elevation_ = 0;
}
inline double rp_satellite::elevation() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_satellite.elevation)
  return elevation_;
}
inline void rp_satellite::set_elevation(double value) {
  
  elevation_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_satellite.elevation)
}

// optional double azimuth = 4;
inline void rp_satellite::clear_azimuth() {
  azimuth_ = 0;
}
inline double rp_satellite::azimuth() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_satellite.azimuth)
  return azimuth_;
}
inline void rp_satellite::set_azimuth(double value) {
  
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_satellite.azimuth)
}

// -------------------------------------------------------------------

// rp_gps

// optional string serial = 1;
inline void rp_gps::clear_serial() {
  serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rp_gps::serial() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.serial)
  return serial_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rp_gps::set_serial(const ::std::string& value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.serial)
}
inline void rp_gps::set_serial(const char* value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rf_phreaker.protobuf.rp_gps.serial)
}
inline void rp_gps::set_serial(const char* value, size_t size) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rf_phreaker.protobuf.rp_gps.serial)
}
inline ::std::string* rp_gps::mutable_serial() {
  
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gps.serial)
  return serial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rp_gps::release_serial() {
  
  return serial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rp_gps::set_allocated_serial(::std::string* serial) {
  if (serial != NULL) {
    
  } else {
    
  }
  serial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial);
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gps.serial)
}

// optional bool lock = 2;
inline void rp_gps::clear_lock() {
  lock_ = false;
}
inline bool rp_gps::lock() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.lock)
  return lock_;
}
inline void rp_gps::set_lock(bool value) {
  
  lock_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.lock)
}

// optional int64 coordinated_universal_time = 3;
inline void rp_gps::clear_coordinated_universal_time() {
  coordinated_universal_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 rp_gps::coordinated_universal_time() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.coordinated_universal_time)
  return coordinated_universal_time_;
}
inline void rp_gps::set_coordinated_universal_time(::google::protobuf::int64 value) {
  
  coordinated_universal_time_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.coordinated_universal_time)
}

// optional int32 visible_satellites = 4;
inline void rp_gps::clear_visible_satellites() {
  visible_satellites_ = 0;
}
inline ::google::protobuf::int32 rp_gps::visible_satellites() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.visible_satellites)
  return visible_satellites_;
}
inline void rp_gps::set_visible_satellites(::google::protobuf::int32 value) {
  
  visible_satellites_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.visible_satellites)
}

// optional int32 tracking_satellites = 5;
inline void rp_gps::clear_tracking_satellites() {
  tracking_satellites_ = 0;
}
inline ::google::protobuf::int32 rp_gps::tracking_satellites() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.tracking_satellites)
  return tracking_satellites_;
}
inline void rp_gps::set_tracking_satellites(::google::protobuf::int32 value) {
  
  tracking_satellites_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.tracking_satellites)
}

// optional double latitude = 6;
inline void rp_gps::clear_latitude() {
  latitude_ = 0;
}
inline double rp_gps::latitude() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.latitude)
  return latitude_;
}
inline void rp_gps::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.latitude)
}

// optional double longitude = 7;
inline void rp_gps::clear_longitude() {
  longitude_ = 0;
}
inline double rp_gps::longitude() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.longitude)
  return longitude_;
}
inline void rp_gps::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.longitude)
}

// optional double altitude = 8;
inline void rp_gps::clear_altitude() {
  altitude_ = 0;
}
inline double rp_gps::altitude() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.altitude)
  return altitude_;
}
inline void rp_gps::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.altitude)
}

// optional double angle = 9;
inline void rp_gps::clear_angle() {
  angle_ = 0;
}
inline double rp_gps::angle() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.angle)
  return angle_;
}
inline void rp_gps::set_angle(double value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.angle)
}

// optional double speed = 10;
inline void rp_gps::clear_speed() {
  speed_ = 0;
}
inline double rp_gps::speed() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.speed)
  return speed_;
}
inline void rp_gps::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.speed)
}

// optional double dilution_of_precision = 11;
inline void rp_gps::clear_dilution_of_precision() {
  dilution_of_precision_ = 0;
}
inline double rp_gps::dilution_of_precision() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.dilution_of_precision)
  return dilution_of_precision_;
}
inline void rp_gps::set_dilution_of_precision(double value) {
  
  dilution_of_precision_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.dilution_of_precision)
}

// optional double horizontal_accuracy_meters = 12;
inline void rp_gps::clear_horizontal_accuracy_meters() {
  horizontal_accuracy_meters_ = 0;
}
inline double rp_gps::horizontal_accuracy_meters() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.horizontal_accuracy_meters)
  return horizontal_accuracy_meters_;
}
inline void rp_gps::set_horizontal_accuracy_meters(double value) {
  
  horizontal_accuracy_meters_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.horizontal_accuracy_meters)
}

// optional double vertical_accuracy_meters = 13;
inline void rp_gps::clear_vertical_accuracy_meters() {
  vertical_accuracy_meters_ = 0;
}
inline double rp_gps::vertical_accuracy_meters() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.vertical_accuracy_meters)
  return vertical_accuracy_meters_;
}
inline void rp_gps::set_vertical_accuracy_meters(double value) {
  
  vertical_accuracy_meters_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.vertical_accuracy_meters)
}

// optional int64 raw_status = 14;
inline void rp_gps::clear_raw_status() {
  raw_status_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 rp_gps::raw_status() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.raw_status)
  return raw_status_;
}
inline void rp_gps::set_raw_status(::google::protobuf::int64 value) {
  
  raw_status_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gps.raw_status)
}

// repeated .rf_phreaker.protobuf.rp_satellite satellites = 15;
inline int rp_gps::satellites_size() const {
  return satellites_.size();
}
inline void rp_gps::clear_satellites() {
  satellites_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_satellite& rp_gps::satellites(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gps.satellites)
  return satellites_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_satellite* rp_gps::mutable_satellites(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gps.satellites)
  return satellites_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_satellite* rp_gps::add_satellites() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gps.satellites)
  return satellites_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_satellite >*
rp_gps::mutable_satellites() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gps.satellites)
  return &satellites_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_satellite >&
rp_gps::satellites() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gps.satellites)
  return satellites_;
}

// -------------------------------------------------------------------

// rp_base

// optional string serial = 1;
inline void rp_base::clear_serial() {
  serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rp_base::serial() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_base.serial)
  return serial_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rp_base::set_serial(const ::std::string& value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_base.serial)
}
inline void rp_base::set_serial(const char* value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rf_phreaker.protobuf.rp_base.serial)
}
inline void rp_base::set_serial(const char* value, size_t size) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rf_phreaker.protobuf.rp_base.serial)
}
inline ::std::string* rp_base::mutable_serial() {
  
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_base.serial)
  return serial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rp_base::release_serial() {
  
  return serial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rp_base::set_allocated_serial(::std::string* serial) {
  if (serial != NULL) {
    
  } else {
    
  }
  serial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial);
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_base.serial)
}

// optional int64 collection_round = 2;
inline void rp_base::clear_collection_round() {
  collection_round_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 rp_base::collection_round() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_base.collection_round)
  return collection_round_;
}
inline void rp_base::set_collection_round(::google::protobuf::int64 value) {
  
  collection_round_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_base.collection_round)
}

// optional int64 measurement_frequency = 3;
inline void rp_base::clear_measurement_frequency() {
  measurement_frequency_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 rp_base::measurement_frequency() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_base.measurement_frequency)
  return measurement_frequency_;
}
inline void rp_base::set_measurement_frequency(::google::protobuf::int64 value) {
  
  measurement_frequency_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_base.measurement_frequency)
}

// optional int32 measurement_bandwidth = 4;
inline void rp_base::clear_measurement_bandwidth() {
  measurement_bandwidth_ = 0;
}
inline ::google::protobuf::int32 rp_base::measurement_bandwidth() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_base.measurement_bandwidth)
  return measurement_bandwidth_;
}
inline void rp_base::set_measurement_bandwidth(::google::protobuf::int32 value) {
  
  measurement_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_base.measurement_bandwidth)
}

// optional double measurement_signal_level = 5;
inline void rp_base::clear_measurement_signal_level() {
  measurement_signal_level_ = 0;
}
inline double rp_base::measurement_signal_level() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_base.measurement_signal_level)
  return measurement_signal_level_;
}
inline void rp_base::set_measurement_signal_level(double value) {
  
  measurement_signal_level_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_base.measurement_signal_level)
}

// optional int64 time = 6;
inline void rp_base::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 rp_base::time() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_base.time)
  return time_;
}
inline void rp_base::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_base.time)
}

// optional int32 status_flags = 7;
inline void rp_base::clear_status_flags() {
  status_flags_ = 0;
}
inline ::google::protobuf::int32 rp_base::status_flags() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_base.status_flags)
  return status_flags_;
}
inline void rp_base::set_status_flags(::google::protobuf::int32 value) {
  
  status_flags_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_base.status_flags)
}

// -------------------------------------------------------------------

// rp_plmn

// optional string mcc = 1;
inline void rp_plmn::clear_mcc() {
  mcc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rp_plmn::mcc() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_plmn.mcc)
  return mcc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rp_plmn::set_mcc(const ::std::string& value) {
  
  mcc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_plmn.mcc)
}
inline void rp_plmn::set_mcc(const char* value) {
  
  mcc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rf_phreaker.protobuf.rp_plmn.mcc)
}
inline void rp_plmn::set_mcc(const char* value, size_t size) {
  
  mcc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rf_phreaker.protobuf.rp_plmn.mcc)
}
inline ::std::string* rp_plmn::mutable_mcc() {
  
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_plmn.mcc)
  return mcc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rp_plmn::release_mcc() {
  
  return mcc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rp_plmn::set_allocated_mcc(::std::string* mcc) {
  if (mcc != NULL) {
    
  } else {
    
  }
  mcc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mcc);
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_plmn.mcc)
}

// optional string mnc = 2;
inline void rp_plmn::clear_mnc() {
  mnc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rp_plmn::mnc() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_plmn.mnc)
  return mnc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rp_plmn::set_mnc(const ::std::string& value) {
  
  mnc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_plmn.mnc)
}
inline void rp_plmn::set_mnc(const char* value) {
  
  mnc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rf_phreaker.protobuf.rp_plmn.mnc)
}
inline void rp_plmn::set_mnc(const char* value, size_t size) {
  
  mnc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rf_phreaker.protobuf.rp_plmn.mnc)
}
inline ::std::string* rp_plmn::mutable_mnc() {
  
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_plmn.mnc)
  return mnc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rp_plmn::release_mnc() {
  
  return mnc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rp_plmn::set_allocated_mnc(::std::string* mnc) {
  if (mnc != NULL) {
    
  } else {
    
  }
  mnc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mnc);
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_plmn.mnc)
}

// -------------------------------------------------------------------

// rp_raw_layer_3

// optional bytes bytes = 1;
inline void rp_raw_layer_3::clear_bytes() {
  bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rp_raw_layer_3::bytes() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_raw_layer_3.bytes)
  return bytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rp_raw_layer_3::set_bytes(const ::std::string& value) {
  
  bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_raw_layer_3.bytes)
}
inline void rp_raw_layer_3::set_bytes(const char* value) {
  
  bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rf_phreaker.protobuf.rp_raw_layer_3.bytes)
}
inline void rp_raw_layer_3::set_bytes(const void* value, size_t size) {
  
  bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rf_phreaker.protobuf.rp_raw_layer_3.bytes)
}
inline ::std::string* rp_raw_layer_3::mutable_bytes() {
  
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_raw_layer_3.bytes)
  return bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rp_raw_layer_3::release_bytes() {
  
  return bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rp_raw_layer_3::set_allocated_bytes(::std::string* bytes) {
  if (bytes != NULL) {
    
  } else {
    
  }
  bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes);
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_raw_layer_3.bytes)
}

// optional int32 unused_bits = 2;
inline void rp_raw_layer_3::clear_unused_bits() {
  unused_bits_ = 0;
}
inline ::google::protobuf::int32 rp_raw_layer_3::unused_bits() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_raw_layer_3.unused_bits)
  return unused_bits_;
}
inline void rp_raw_layer_3::set_unused_bits(::google::protobuf::int32 value) {
  
  unused_bits_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_raw_layer_3.unused_bits)
}

// -------------------------------------------------------------------

// rp_gsm_utran_neighbor

// optional .rf_phreaker.protobuf.rp_duplex_type duplexing = 1;
inline void rp_gsm_utran_neighbor::clear_duplexing() {
  duplexing_ = 0;
}
inline ::rf_phreaker::protobuf::rp_duplex_type rp_gsm_utran_neighbor::duplexing() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_utran_neighbor.duplexing)
  return static_cast< ::rf_phreaker::protobuf::rp_duplex_type >(duplexing_);
}
inline void rp_gsm_utran_neighbor::set_duplexing(::rf_phreaker::protobuf::rp_duplex_type value) {
  
  duplexing_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_utran_neighbor.duplexing)
}

// optional int32 arfcn = 2;
inline void rp_gsm_utran_neighbor::clear_arfcn() {
  arfcn_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_utran_neighbor::arfcn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_utran_neighbor.arfcn)
  return arfcn_;
}
inline void rp_gsm_utran_neighbor::set_arfcn(::google::protobuf::int32 value) {
  
  arfcn_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_utran_neighbor.arfcn)
}

// optional .rf_phreaker.protobuf.rp_utran_bandwidth_type bandwidth = 3;
inline void rp_gsm_utran_neighbor::clear_bandwidth() {
  bandwidth_ = 0;
}
inline ::rf_phreaker::protobuf::rp_utran_bandwidth_type rp_gsm_utran_neighbor::bandwidth() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_utran_neighbor.bandwidth)
  return static_cast< ::rf_phreaker::protobuf::rp_utran_bandwidth_type >(bandwidth_);
}
inline void rp_gsm_utran_neighbor::set_bandwidth(::rf_phreaker::protobuf::rp_utran_bandwidth_type value) {
  
  bandwidth_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_utran_neighbor.bandwidth)
}

// repeated int32 scrambling_codes = 4 [packed = true];
inline int rp_gsm_utran_neighbor::scrambling_codes_size() const {
  return scrambling_codes_.size();
}
inline void rp_gsm_utran_neighbor::clear_scrambling_codes() {
  scrambling_codes_.Clear();
}
inline ::google::protobuf::int32 rp_gsm_utran_neighbor::scrambling_codes(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_utran_neighbor.scrambling_codes)
  return scrambling_codes_.Get(index);
}
inline void rp_gsm_utran_neighbor::set_scrambling_codes(int index, ::google::protobuf::int32 value) {
  scrambling_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_utran_neighbor.scrambling_codes)
}
inline void rp_gsm_utran_neighbor::add_scrambling_codes(::google::protobuf::int32 value) {
  scrambling_codes_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_utran_neighbor.scrambling_codes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_gsm_utran_neighbor::scrambling_codes() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_utran_neighbor.scrambling_codes)
  return scrambling_codes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_gsm_utran_neighbor::mutable_scrambling_codes() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_utran_neighbor.scrambling_codes)
  return &scrambling_codes_;
}

// -------------------------------------------------------------------

// rp_pcid_group

// repeated int32 pcids = 1 [packed = true];
inline int rp_pcid_group::pcids_size() const {
  return pcids_.size();
}
inline void rp_pcid_group::clear_pcids() {
  pcids_.Clear();
}
inline ::google::protobuf::int32 rp_pcid_group::pcids(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_pcid_group.pcids)
  return pcids_.Get(index);
}
inline void rp_pcid_group::set_pcids(int index, ::google::protobuf::int32 value) {
  pcids_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_pcid_group.pcids)
}
inline void rp_pcid_group::add_pcids(::google::protobuf::int32 value) {
  pcids_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_pcid_group.pcids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_pcid_group::pcids() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_pcid_group.pcids)
  return pcids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_pcid_group::mutable_pcids() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_pcid_group.pcids)
  return &pcids_;
}

// -------------------------------------------------------------------

// rp_gsm_eutran_neighbor

// optional int32 earfcn = 1;
inline void rp_gsm_eutran_neighbor::clear_earfcn() {
  earfcn_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_eutran_neighbor::earfcn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.earfcn)
  return earfcn_;
}
inline void rp_gsm_eutran_neighbor::set_earfcn(::google::protobuf::int32 value) {
  
  earfcn_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.earfcn)
}

// optional .rf_phreaker.protobuf.rp_eutran_bandwidth_type bandwidth = 2;
inline void rp_gsm_eutran_neighbor::clear_bandwidth() {
  bandwidth_ = 0;
}
inline ::rf_phreaker::protobuf::rp_eutran_bandwidth_type rp_gsm_eutran_neighbor::bandwidth() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.bandwidth)
  return static_cast< ::rf_phreaker::protobuf::rp_eutran_bandwidth_type >(bandwidth_);
}
inline void rp_gsm_eutran_neighbor::set_bandwidth(::rf_phreaker::protobuf::rp_eutran_bandwidth_type value) {
  
  bandwidth_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.bandwidth)
}

// optional int32 priority = 3;
inline void rp_gsm_eutran_neighbor::clear_priority() {
  priority_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_eutran_neighbor::priority() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.priority)
  return priority_;
}
inline void rp_gsm_eutran_neighbor::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.priority)
}

// optional int32 threshold_high_db = 4;
inline void rp_gsm_eutran_neighbor::clear_threshold_high_db() {
  threshold_high_db_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_eutran_neighbor::threshold_high_db() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.threshold_high_db)
  return threshold_high_db_;
}
inline void rp_gsm_eutran_neighbor::set_threshold_high_db(::google::protobuf::int32 value) {
  
  threshold_high_db_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.threshold_high_db)
}

// optional int32 threshold_low_db = 5;
inline void rp_gsm_eutran_neighbor::clear_threshold_low_db() {
  threshold_low_db_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_eutran_neighbor::threshold_low_db() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.threshold_low_db)
  return threshold_low_db_;
}
inline void rp_gsm_eutran_neighbor::set_threshold_low_db(::google::protobuf::int32 value) {
  
  threshold_low_db_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.threshold_low_db)
}

// optional int32 qrxlevmin_db = 6;
inline void rp_gsm_eutran_neighbor::clear_qrxlevmin_db() {
  qrxlevmin_db_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_eutran_neighbor::qrxlevmin_db() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.qrxlevmin_db)
  return qrxlevmin_db_;
}
inline void rp_gsm_eutran_neighbor::set_qrxlevmin_db(::google::protobuf::int32 value) {
  
  qrxlevmin_db_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.qrxlevmin_db)
}

// optional .rf_phreaker.protobuf.rp_pcid_group pcids_allowed = 7;
inline bool rp_gsm_eutran_neighbor::has_pcids_allowed() const {
  return !_is_default_instance_ && pcids_allowed_ != NULL;
}
inline void rp_gsm_eutran_neighbor::clear_pcids_allowed() {
  if (GetArenaNoVirtual() == NULL && pcids_allowed_ != NULL) delete pcids_allowed_;
  pcids_allowed_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_pcid_group& rp_gsm_eutran_neighbor::pcids_allowed() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_allowed)
  return pcids_allowed_ != NULL ? *pcids_allowed_ : *default_instance_->pcids_allowed_;
}
inline ::rf_phreaker::protobuf::rp_pcid_group* rp_gsm_eutran_neighbor::mutable_pcids_allowed() {
  
  if (pcids_allowed_ == NULL) {
    pcids_allowed_ = new ::rf_phreaker::protobuf::rp_pcid_group;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_allowed)
  return pcids_allowed_;
}
inline ::rf_phreaker::protobuf::rp_pcid_group* rp_gsm_eutran_neighbor::release_pcids_allowed() {
  
  ::rf_phreaker::protobuf::rp_pcid_group* temp = pcids_allowed_;
  pcids_allowed_ = NULL;
  return temp;
}
inline void rp_gsm_eutran_neighbor::set_allocated_pcids_allowed(::rf_phreaker::protobuf::rp_pcid_group* pcids_allowed) {
  delete pcids_allowed_;
  pcids_allowed_ = pcids_allowed;
  if (pcids_allowed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_allowed)
}

// optional .rf_phreaker.protobuf.rp_pcid_group pcids_not_allowed = 8;
inline bool rp_gsm_eutran_neighbor::has_pcids_not_allowed() const {
  return !_is_default_instance_ && pcids_not_allowed_ != NULL;
}
inline void rp_gsm_eutran_neighbor::clear_pcids_not_allowed() {
  if (GetArenaNoVirtual() == NULL && pcids_not_allowed_ != NULL) delete pcids_not_allowed_;
  pcids_not_allowed_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_pcid_group& rp_gsm_eutran_neighbor::pcids_not_allowed() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_not_allowed)
  return pcids_not_allowed_ != NULL ? *pcids_not_allowed_ : *default_instance_->pcids_not_allowed_;
}
inline ::rf_phreaker::protobuf::rp_pcid_group* rp_gsm_eutran_neighbor::mutable_pcids_not_allowed() {
  
  if (pcids_not_allowed_ == NULL) {
    pcids_not_allowed_ = new ::rf_phreaker::protobuf::rp_pcid_group;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_not_allowed)
  return pcids_not_allowed_;
}
inline ::rf_phreaker::protobuf::rp_pcid_group* rp_gsm_eutran_neighbor::release_pcids_not_allowed() {
  
  ::rf_phreaker::protobuf::rp_pcid_group* temp = pcids_not_allowed_;
  pcids_not_allowed_ = NULL;
  return temp;
}
inline void rp_gsm_eutran_neighbor::set_allocated_pcids_not_allowed(::rf_phreaker::protobuf::rp_pcid_group* pcids_not_allowed) {
  delete pcids_not_allowed_;
  pcids_not_allowed_ = pcids_not_allowed;
  if (pcids_not_allowed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_not_allowed)
}

// repeated .rf_phreaker.protobuf.rp_pcid_group pcids_same_tracking_area = 9;
inline int rp_gsm_eutran_neighbor::pcids_same_tracking_area_size() const {
  return pcids_same_tracking_area_.size();
}
inline void rp_gsm_eutran_neighbor::clear_pcids_same_tracking_area() {
  pcids_same_tracking_area_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_pcid_group& rp_gsm_eutran_neighbor::pcids_same_tracking_area(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_same_tracking_area)
  return pcids_same_tracking_area_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_pcid_group* rp_gsm_eutran_neighbor::mutable_pcids_same_tracking_area(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_same_tracking_area)
  return pcids_same_tracking_area_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_pcid_group* rp_gsm_eutran_neighbor::add_pcids_same_tracking_area() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_same_tracking_area)
  return pcids_same_tracking_area_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_pcid_group >*
rp_gsm_eutran_neighbor::mutable_pcids_same_tracking_area() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_same_tracking_area)
  return &pcids_same_tracking_area_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_pcid_group >&
rp_gsm_eutran_neighbor::pcids_same_tracking_area() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_same_tracking_area)
  return pcids_same_tracking_area_;
}

// repeated .rf_phreaker.protobuf.rp_pcid_group pcids_different_tracking_area = 10;
inline int rp_gsm_eutran_neighbor::pcids_different_tracking_area_size() const {
  return pcids_different_tracking_area_.size();
}
inline void rp_gsm_eutran_neighbor::clear_pcids_different_tracking_area() {
  pcids_different_tracking_area_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_pcid_group& rp_gsm_eutran_neighbor::pcids_different_tracking_area(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_different_tracking_area)
  return pcids_different_tracking_area_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_pcid_group* rp_gsm_eutran_neighbor::mutable_pcids_different_tracking_area(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_different_tracking_area)
  return pcids_different_tracking_area_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_pcid_group* rp_gsm_eutran_neighbor::add_pcids_different_tracking_area() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_different_tracking_area)
  return pcids_different_tracking_area_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_pcid_group >*
rp_gsm_eutran_neighbor::mutable_pcids_different_tracking_area() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_different_tracking_area)
  return &pcids_different_tracking_area_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_pcid_group >&
rp_gsm_eutran_neighbor::pcids_different_tracking_area() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_eutran_neighbor.pcids_different_tracking_area)
  return pcids_different_tracking_area_;
}

// -------------------------------------------------------------------

// rp_gsm_si1

// optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 2;
inline void rp_gsm_si1::clear_band_indicator() {
  band_indicator_ = 0;
}
inline ::rf_phreaker::protobuf::rp_band_indicator_type rp_gsm_si1::band_indicator() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si1.band_indicator)
  return static_cast< ::rf_phreaker::protobuf::rp_band_indicator_type >(band_indicator_);
}
inline void rp_gsm_si1::set_band_indicator(::rf_phreaker::protobuf::rp_band_indicator_type value) {
  
  band_indicator_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si1.band_indicator)
}

// -------------------------------------------------------------------

// rp_gsm_si2

// repeated int32 bcch_neighbors = 2 [packed = true];
inline int rp_gsm_si2::bcch_neighbors_size() const {
  return bcch_neighbors_.size();
}
inline void rp_gsm_si2::clear_bcch_neighbors() {
  bcch_neighbors_.Clear();
}
inline ::google::protobuf::int32 rp_gsm_si2::bcch_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2.bcch_neighbors)
  return bcch_neighbors_.Get(index);
}
inline void rp_gsm_si2::set_bcch_neighbors(int index, ::google::protobuf::int32 value) {
  bcch_neighbors_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2.bcch_neighbors)
}
inline void rp_gsm_si2::add_bcch_neighbors(::google::protobuf::int32 value) {
  bcch_neighbors_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_si2.bcch_neighbors)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_gsm_si2::bcch_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_si2.bcch_neighbors)
  return bcch_neighbors_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_gsm_si2::mutable_bcch_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_si2.bcch_neighbors)
  return &bcch_neighbors_;
}

// optional bool extension_indication = 3;
inline void rp_gsm_si2::clear_extension_indication() {
  extension_indication_ = false;
}
inline bool rp_gsm_si2::extension_indication() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2.extension_indication)
  return extension_indication_;
}
inline void rp_gsm_si2::set_extension_indication(bool value) {
  
  extension_indication_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2.extension_indication)
}

// optional int32 bcch_allocation_indication = 4;
inline void rp_gsm_si2::clear_bcch_allocation_indication() {
  bcch_allocation_indication_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si2::bcch_allocation_indication() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2.bcch_allocation_indication)
  return bcch_allocation_indication_;
}
inline void rp_gsm_si2::set_bcch_allocation_indication(::google::protobuf::int32 value) {
  
  bcch_allocation_indication_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2.bcch_allocation_indication)
}

// -------------------------------------------------------------------

// rp_gsm_si2_bis

// repeated int32 extended_bcch_neighbors = 2 [packed = true];
inline int rp_gsm_si2_bis::extended_bcch_neighbors_size() const {
  return extended_bcch_neighbors_.size();
}
inline void rp_gsm_si2_bis::clear_extended_bcch_neighbors() {
  extended_bcch_neighbors_.Clear();
}
inline ::google::protobuf::int32 rp_gsm_si2_bis::extended_bcch_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_bis.extended_bcch_neighbors)
  return extended_bcch_neighbors_.Get(index);
}
inline void rp_gsm_si2_bis::set_extended_bcch_neighbors(int index, ::google::protobuf::int32 value) {
  extended_bcch_neighbors_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_bis.extended_bcch_neighbors)
}
inline void rp_gsm_si2_bis::add_extended_bcch_neighbors(::google::protobuf::int32 value) {
  extended_bcch_neighbors_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_si2_bis.extended_bcch_neighbors)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_gsm_si2_bis::extended_bcch_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_si2_bis.extended_bcch_neighbors)
  return extended_bcch_neighbors_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_gsm_si2_bis::mutable_extended_bcch_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_si2_bis.extended_bcch_neighbors)
  return &extended_bcch_neighbors_;
}

// optional bool extension_indication = 3;
inline void rp_gsm_si2_bis::clear_extension_indication() {
  extension_indication_ = false;
}
inline bool rp_gsm_si2_bis::extension_indication() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_bis.extension_indication)
  return extension_indication_;
}
inline void rp_gsm_si2_bis::set_extension_indication(bool value) {
  
  extension_indication_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_bis.extension_indication)
}

// optional int32 bcch_allocation_indication = 4;
inline void rp_gsm_si2_bis::clear_bcch_allocation_indication() {
  bcch_allocation_indication_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si2_bis::bcch_allocation_indication() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_bis.bcch_allocation_indication)
  return bcch_allocation_indication_;
}
inline void rp_gsm_si2_bis::set_bcch_allocation_indication(::google::protobuf::int32 value) {
  
  bcch_allocation_indication_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_bis.bcch_allocation_indication)
}

// optional int32 rest_octet_index = 5;
inline void rp_gsm_si2_bis::clear_rest_octet_index() {
  rest_octet_index_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si2_bis::rest_octet_index() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_bis.rest_octet_index)
  return rest_octet_index_;
}
inline void rp_gsm_si2_bis::set_rest_octet_index(::google::protobuf::int32 value) {
  
  rest_octet_index_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_bis.rest_octet_index)
}

// optional int32 rest_octet_count = 6;
inline void rp_gsm_si2_bis::clear_rest_octet_count() {
  rest_octet_count_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si2_bis::rest_octet_count() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_bis.rest_octet_count)
  return rest_octet_count_;
}
inline void rp_gsm_si2_bis::set_rest_octet_count(::google::protobuf::int32 value) {
  
  rest_octet_count_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_bis.rest_octet_count)
}

// -------------------------------------------------------------------

// rp_gsm_si2_ter

// repeated int32 extended_bcch_neighbors = 2 [packed = true];
inline int rp_gsm_si2_ter::extended_bcch_neighbors_size() const {
  return extended_bcch_neighbors_.size();
}
inline void rp_gsm_si2_ter::clear_extended_bcch_neighbors() {
  extended_bcch_neighbors_.Clear();
}
inline ::google::protobuf::int32 rp_gsm_si2_ter::extended_bcch_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_ter.extended_bcch_neighbors)
  return extended_bcch_neighbors_.Get(index);
}
inline void rp_gsm_si2_ter::set_extended_bcch_neighbors(int index, ::google::protobuf::int32 value) {
  extended_bcch_neighbors_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_ter.extended_bcch_neighbors)
}
inline void rp_gsm_si2_ter::add_extended_bcch_neighbors(::google::protobuf::int32 value) {
  extended_bcch_neighbors_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_si2_ter.extended_bcch_neighbors)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_gsm_si2_ter::extended_bcch_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_si2_ter.extended_bcch_neighbors)
  return extended_bcch_neighbors_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_gsm_si2_ter::mutable_extended_bcch_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_si2_ter.extended_bcch_neighbors)
  return &extended_bcch_neighbors_;
}

// optional int32 gsm_bcch_allocation_indication = 3;
inline void rp_gsm_si2_ter::clear_gsm_bcch_allocation_indication() {
  gsm_bcch_allocation_indication_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si2_ter::gsm_bcch_allocation_indication() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_ter.gsm_bcch_allocation_indication)
  return gsm_bcch_allocation_indication_;
}
inline void rp_gsm_si2_ter::set_gsm_bcch_allocation_indication(::google::protobuf::int32 value) {
  
  gsm_bcch_allocation_indication_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_ter.gsm_bcch_allocation_indication)
}

// optional int32 bcch_neighbors_multiband_reporting = 4;
inline void rp_gsm_si2_ter::clear_bcch_neighbors_multiband_reporting() {
  bcch_neighbors_multiband_reporting_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si2_ter::bcch_neighbors_multiband_reporting() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_ter.bcch_neighbors_multiband_reporting)
  return bcch_neighbors_multiband_reporting_;
}
inline void rp_gsm_si2_ter::set_bcch_neighbors_multiband_reporting(::google::protobuf::int32 value) {
  
  bcch_neighbors_multiband_reporting_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_ter.bcch_neighbors_multiband_reporting)
}

// repeated .rf_phreaker.protobuf.rp_gsm_utran_neighbor utran_neighbors = 5;
inline int rp_gsm_si2_ter::utran_neighbors_size() const {
  return utran_neighbors_.size();
}
inline void rp_gsm_si2_ter::clear_utran_neighbors() {
  utran_neighbors_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_gsm_utran_neighbor& rp_gsm_si2_ter::utran_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_ter.utran_neighbors)
  return utran_neighbors_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_gsm_utran_neighbor* rp_gsm_si2_ter::mutable_utran_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_si2_ter.utran_neighbors)
  return utran_neighbors_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_gsm_utran_neighbor* rp_gsm_si2_ter::add_utran_neighbors() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_si2_ter.utran_neighbors)
  return utran_neighbors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_utran_neighbor >*
rp_gsm_si2_ter::mutable_utran_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_si2_ter.utran_neighbors)
  return &utran_neighbors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_utran_neighbor >&
rp_gsm_si2_ter::utran_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_si2_ter.utran_neighbors)
  return utran_neighbors_;
}

// optional int32 rest_octet_index = 6;
inline void rp_gsm_si2_ter::clear_rest_octet_index() {
  rest_octet_index_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si2_ter::rest_octet_index() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_ter.rest_octet_index)
  return rest_octet_index_;
}
inline void rp_gsm_si2_ter::set_rest_octet_index(::google::protobuf::int32 value) {
  
  rest_octet_index_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_ter.rest_octet_index)
}

// optional int32 rest_octet_count = 7;
inline void rp_gsm_si2_ter::clear_rest_octet_count() {
  rest_octet_count_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si2_ter::rest_octet_count() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_ter.rest_octet_count)
  return rest_octet_count_;
}
inline void rp_gsm_si2_ter::set_rest_octet_count(::google::protobuf::int32 value) {
  
  rest_octet_count_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_ter.rest_octet_count)
}

// -------------------------------------------------------------------

// rp_gsm_si2_quater

// optional int32 gsm_bcch_allocation_indication = 2;
inline void rp_gsm_si2_quater::clear_gsm_bcch_allocation_indication() {
  gsm_bcch_allocation_indication_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si2_quater::gsm_bcch_allocation_indication() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_quater.gsm_bcch_allocation_indication)
  return gsm_bcch_allocation_indication_;
}
inline void rp_gsm_si2_quater::set_gsm_bcch_allocation_indication(::google::protobuf::int32 value) {
  
  gsm_bcch_allocation_indication_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_quater.gsm_bcch_allocation_indication)
}

// optional int32 p3g_bcch_allocation_indication = 3;
inline void rp_gsm_si2_quater::clear_p3g_bcch_allocation_indication() {
  p3g_bcch_allocation_indication_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si2_quater::p3g_bcch_allocation_indication() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_quater.p3g_bcch_allocation_indication)
  return p3g_bcch_allocation_indication_;
}
inline void rp_gsm_si2_quater::set_p3g_bcch_allocation_indication(::google::protobuf::int32 value) {
  
  p3g_bcch_allocation_indication_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_quater.p3g_bcch_allocation_indication)
}

// optional int32 utran_neighbor_cell_index_start_3g = 4;
inline void rp_gsm_si2_quater::clear_utran_neighbor_cell_index_start_3g() {
  utran_neighbor_cell_index_start_3g_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si2_quater::utran_neighbor_cell_index_start_3g() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbor_cell_index_start_3g)
  return utran_neighbor_cell_index_start_3g_;
}
inline void rp_gsm_si2_quater::set_utran_neighbor_cell_index_start_3g(::google::protobuf::int32 value) {
  
  utran_neighbor_cell_index_start_3g_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbor_cell_index_start_3g)
}

// optional int32 utran_neighbor_cell_absolute_index_start_emr = 5;
inline void rp_gsm_si2_quater::clear_utran_neighbor_cell_absolute_index_start_emr() {
  utran_neighbor_cell_absolute_index_start_emr_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si2_quater::utran_neighbor_cell_absolute_index_start_emr() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbor_cell_absolute_index_start_emr)
  return utran_neighbor_cell_absolute_index_start_emr_;
}
inline void rp_gsm_si2_quater::set_utran_neighbor_cell_absolute_index_start_emr(::google::protobuf::int32 value) {
  
  utran_neighbor_cell_absolute_index_start_emr_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbor_cell_absolute_index_start_emr)
}

// repeated .rf_phreaker.protobuf.rp_gsm_utran_neighbor utran_neighbors = 6;
inline int rp_gsm_si2_quater::utran_neighbors_size() const {
  return utran_neighbors_.size();
}
inline void rp_gsm_si2_quater::clear_utran_neighbors() {
  utran_neighbors_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_gsm_utran_neighbor& rp_gsm_si2_quater::utran_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbors)
  return utran_neighbors_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_gsm_utran_neighbor* rp_gsm_si2_quater::mutable_utran_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbors)
  return utran_neighbors_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_gsm_utran_neighbor* rp_gsm_si2_quater::add_utran_neighbors() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbors)
  return utran_neighbors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_utran_neighbor >*
rp_gsm_si2_quater::mutable_utran_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbors)
  return &utran_neighbors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_utran_neighbor >&
rp_gsm_si2_quater::utran_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_si2_quater.utran_neighbors)
  return utran_neighbors_;
}

// repeated .rf_phreaker.protobuf.rp_gsm_eutran_neighbor eutran_neighbors = 7;
inline int rp_gsm_si2_quater::eutran_neighbors_size() const {
  return eutran_neighbors_.size();
}
inline void rp_gsm_si2_quater::clear_eutran_neighbors() {
  eutran_neighbors_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_gsm_eutran_neighbor& rp_gsm_si2_quater::eutran_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_quater.eutran_neighbors)
  return eutran_neighbors_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_gsm_eutran_neighbor* rp_gsm_si2_quater::mutable_eutran_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_si2_quater.eutran_neighbors)
  return eutran_neighbors_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_gsm_eutran_neighbor* rp_gsm_si2_quater::add_eutran_neighbors() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_si2_quater.eutran_neighbors)
  return eutran_neighbors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_eutran_neighbor >*
rp_gsm_si2_quater::mutable_eutran_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_si2_quater.eutran_neighbors)
  return &eutran_neighbors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm_eutran_neighbor >&
rp_gsm_si2_quater::eutran_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_si2_quater.eutran_neighbors)
  return eutran_neighbors_;
}

// optional int32 rest_octet_index = 8;
inline void rp_gsm_si2_quater::clear_rest_octet_index() {
  rest_octet_index_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si2_quater::rest_octet_index() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_quater.rest_octet_index)
  return rest_octet_index_;
}
inline void rp_gsm_si2_quater::set_rest_octet_index(::google::protobuf::int32 value) {
  
  rest_octet_index_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_quater.rest_octet_index)
}

// optional int32 rest_octet_count = 9;
inline void rp_gsm_si2_quater::clear_rest_octet_count() {
  rest_octet_count_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si2_quater::rest_octet_count() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si2_quater.rest_octet_count)
  return rest_octet_count_;
}
inline void rp_gsm_si2_quater::set_rest_octet_count(::google::protobuf::int32 value) {
  
  rest_octet_count_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si2_quater.rest_octet_count)
}

// -------------------------------------------------------------------

// rp_gsm_selection_parameters

// optional int32 cbq = 1;
inline void rp_gsm_selection_parameters::clear_cbq() {
  cbq_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_selection_parameters::cbq() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_selection_parameters.cbq)
  return cbq_;
}
inline void rp_gsm_selection_parameters::set_cbq(::google::protobuf::int32 value) {
  
  cbq_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_selection_parameters.cbq)
}

// optional int32 cell_reselect_offset_db = 2;
inline void rp_gsm_selection_parameters::clear_cell_reselect_offset_db() {
  cell_reselect_offset_db_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_selection_parameters::cell_reselect_offset_db() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_selection_parameters.cell_reselect_offset_db)
  return cell_reselect_offset_db_;
}
inline void rp_gsm_selection_parameters::set_cell_reselect_offset_db(::google::protobuf::int32 value) {
  
  cell_reselect_offset_db_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_selection_parameters.cell_reselect_offset_db)
}

// optional int32 temporary_offset_db = 3;
inline void rp_gsm_selection_parameters::clear_temporary_offset_db() {
  temporary_offset_db_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_selection_parameters::temporary_offset_db() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_selection_parameters.temporary_offset_db)
  return temporary_offset_db_;
}
inline void rp_gsm_selection_parameters::set_temporary_offset_db(::google::protobuf::int32 value) {
  
  temporary_offset_db_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_selection_parameters.temporary_offset_db)
}

// optional int32 penalty_time_seconds = 4;
inline void rp_gsm_selection_parameters::clear_penalty_time_seconds() {
  penalty_time_seconds_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_selection_parameters::penalty_time_seconds() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_selection_parameters.penalty_time_seconds)
  return penalty_time_seconds_;
}
inline void rp_gsm_selection_parameters::set_penalty_time_seconds(::google::protobuf::int32 value) {
  
  penalty_time_seconds_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_selection_parameters.penalty_time_seconds)
}

// optional bool subtract_reselect_cell_offset_ignore_temp_offset = 5;
inline void rp_gsm_selection_parameters::clear_subtract_reselect_cell_offset_ignore_temp_offset() {
  subtract_reselect_cell_offset_ignore_temp_offset_ = false;
}
inline bool rp_gsm_selection_parameters::subtract_reselect_cell_offset_ignore_temp_offset() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_selection_parameters.subtract_reselect_cell_offset_ignore_temp_offset)
  return subtract_reselect_cell_offset_ignore_temp_offset_;
}
inline void rp_gsm_selection_parameters::set_subtract_reselect_cell_offset_ignore_temp_offset(bool value) {
  
  subtract_reselect_cell_offset_ignore_temp_offset_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_selection_parameters.subtract_reselect_cell_offset_ignore_temp_offset)
}

// optional bool apply_infinity_offset = 6;
inline void rp_gsm_selection_parameters::clear_apply_infinity_offset() {
  apply_infinity_offset_ = false;
}
inline bool rp_gsm_selection_parameters::apply_infinity_offset() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_selection_parameters.apply_infinity_offset)
  return apply_infinity_offset_;
}
inline void rp_gsm_selection_parameters::set_apply_infinity_offset(bool value) {
  
  apply_infinity_offset_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_selection_parameters.apply_infinity_offset)
}

// -------------------------------------------------------------------

// rp_gsm_si3

// optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
inline bool rp_gsm_si3::has_plmn() const {
  return !_is_default_instance_ && plmn_ != NULL;
}
inline void rp_gsm_si3::clear_plmn() {
  if (GetArenaNoVirtual() == NULL && plmn_ != NULL) delete plmn_;
  plmn_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_plmn& rp_gsm_si3::plmn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si3.plmn)
  return plmn_ != NULL ? *plmn_ : *default_instance_->plmn_;
}
inline ::rf_phreaker::protobuf::rp_plmn* rp_gsm_si3::mutable_plmn() {
  
  if (plmn_ == NULL) {
    plmn_ = new ::rf_phreaker::protobuf::rp_plmn;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_si3.plmn)
  return plmn_;
}
inline ::rf_phreaker::protobuf::rp_plmn* rp_gsm_si3::release_plmn() {
  
  ::rf_phreaker::protobuf::rp_plmn* temp = plmn_;
  plmn_ = NULL;
  return temp;
}
inline void rp_gsm_si3::set_allocated_plmn(::rf_phreaker::protobuf::rp_plmn* plmn) {
  delete plmn_;
  plmn_ = plmn;
  if (plmn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_si3.plmn)
}

// optional int32 location_area_code = 3;
inline void rp_gsm_si3::clear_location_area_code() {
  location_area_code_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si3::location_area_code() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si3.location_area_code)
  return location_area_code_;
}
inline void rp_gsm_si3::set_location_area_code(::google::protobuf::int32 value) {
  
  location_area_code_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si3.location_area_code)
}

// optional int32 cell_id = 4;
inline void rp_gsm_si3::clear_cell_id() {
  cell_id_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si3::cell_id() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si3.cell_id)
  return cell_id_;
}
inline void rp_gsm_si3::set_cell_id(::google::protobuf::int32 value) {
  
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si3.cell_id)
}

// optional int32 cell_reselect_hysteresis_db = 5;
inline void rp_gsm_si3::clear_cell_reselect_hysteresis_db() {
  cell_reselect_hysteresis_db_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si3::cell_reselect_hysteresis_db() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si3.cell_reselect_hysteresis_db)
  return cell_reselect_hysteresis_db_;
}
inline void rp_gsm_si3::set_cell_reselect_hysteresis_db(::google::protobuf::int32 value) {
  
  cell_reselect_hysteresis_db_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si3.cell_reselect_hysteresis_db)
}

// optional .rf_phreaker.protobuf.rp_gsm_selection_parameters selection_parameters = 6;
inline bool rp_gsm_si3::has_selection_parameters() const {
  return !_is_default_instance_ && selection_parameters_ != NULL;
}
inline void rp_gsm_si3::clear_selection_parameters() {
  if (GetArenaNoVirtual() == NULL && selection_parameters_ != NULL) delete selection_parameters_;
  selection_parameters_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_gsm_selection_parameters& rp_gsm_si3::selection_parameters() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si3.selection_parameters)
  return selection_parameters_ != NULL ? *selection_parameters_ : *default_instance_->selection_parameters_;
}
inline ::rf_phreaker::protobuf::rp_gsm_selection_parameters* rp_gsm_si3::mutable_selection_parameters() {
  
  if (selection_parameters_ == NULL) {
    selection_parameters_ = new ::rf_phreaker::protobuf::rp_gsm_selection_parameters;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_si3.selection_parameters)
  return selection_parameters_;
}
inline ::rf_phreaker::protobuf::rp_gsm_selection_parameters* rp_gsm_si3::release_selection_parameters() {
  
  ::rf_phreaker::protobuf::rp_gsm_selection_parameters* temp = selection_parameters_;
  selection_parameters_ = NULL;
  return temp;
}
inline void rp_gsm_si3::set_allocated_selection_parameters(::rf_phreaker::protobuf::rp_gsm_selection_parameters* selection_parameters) {
  delete selection_parameters_;
  selection_parameters_ = selection_parameters;
  if (selection_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_si3.selection_parameters)
}

// optional int32 bs_ag_blks_res = 7;
inline void rp_gsm_si3::clear_bs_ag_blks_res() {
  bs_ag_blks_res_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si3::bs_ag_blks_res() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si3.bs_ag_blks_res)
  return bs_ag_blks_res_;
}
inline void rp_gsm_si3::set_bs_ag_blks_res(::google::protobuf::int32 value) {
  
  bs_ag_blks_res_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si3.bs_ag_blks_res)
}

// optional bool is_2ter_present = 8;
inline void rp_gsm_si3::clear_is_2ter_present() {
  is_2ter_present_ = false;
}
inline bool rp_gsm_si3::is_2ter_present() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si3.is_2ter_present)
  return is_2ter_present_;
}
inline void rp_gsm_si3::set_is_2ter_present(bool value) {
  
  is_2ter_present_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si3.is_2ter_present)
}

// optional bool is_2quater_present = 9;
inline void rp_gsm_si3::clear_is_2quater_present() {
  is_2quater_present_ = false;
}
inline bool rp_gsm_si3::is_2quater_present() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si3.is_2quater_present)
  return is_2quater_present_;
}
inline void rp_gsm_si3::set_is_2quater_present(bool value) {
  
  is_2quater_present_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si3.is_2quater_present)
}

// -------------------------------------------------------------------

// rp_gsm_si4

// optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
inline bool rp_gsm_si4::has_plmn() const {
  return !_is_default_instance_ && plmn_ != NULL;
}
inline void rp_gsm_si4::clear_plmn() {
  if (GetArenaNoVirtual() == NULL && plmn_ != NULL) delete plmn_;
  plmn_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_plmn& rp_gsm_si4::plmn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si4.plmn)
  return plmn_ != NULL ? *plmn_ : *default_instance_->plmn_;
}
inline ::rf_phreaker::protobuf::rp_plmn* rp_gsm_si4::mutable_plmn() {
  
  if (plmn_ == NULL) {
    plmn_ = new ::rf_phreaker::protobuf::rp_plmn;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_si4.plmn)
  return plmn_;
}
inline ::rf_phreaker::protobuf::rp_plmn* rp_gsm_si4::release_plmn() {
  
  ::rf_phreaker::protobuf::rp_plmn* temp = plmn_;
  plmn_ = NULL;
  return temp;
}
inline void rp_gsm_si4::set_allocated_plmn(::rf_phreaker::protobuf::rp_plmn* plmn) {
  delete plmn_;
  plmn_ = plmn;
  if (plmn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_si4.plmn)
}

// optional int32 location_area_code = 3;
inline void rp_gsm_si4::clear_location_area_code() {
  location_area_code_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si4::location_area_code() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si4.location_area_code)
  return location_area_code_;
}
inline void rp_gsm_si4::set_location_area_code(::google::protobuf::int32 value) {
  
  location_area_code_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si4.location_area_code)
}

// optional int32 cell_id = 4;
inline void rp_gsm_si4::clear_cell_id() {
  cell_id_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si4::cell_id() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si4.cell_id)
  return cell_id_;
}
inline void rp_gsm_si4::set_cell_id(::google::protobuf::int32 value) {
  
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si4.cell_id)
}

// optional int32 cell_reselect_hysteresis_db = 5;
inline void rp_gsm_si4::clear_cell_reselect_hysteresis_db() {
  cell_reselect_hysteresis_db_ = 0;
}
inline ::google::protobuf::int32 rp_gsm_si4::cell_reselect_hysteresis_db() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si4.cell_reselect_hysteresis_db)
  return cell_reselect_hysteresis_db_;
}
inline void rp_gsm_si4::set_cell_reselect_hysteresis_db(::google::protobuf::int32 value) {
  
  cell_reselect_hysteresis_db_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si4.cell_reselect_hysteresis_db)
}

// optional .rf_phreaker.protobuf.rp_gsm_selection_parameters selection_parameters = 6;
inline bool rp_gsm_si4::has_selection_parameters() const {
  return !_is_default_instance_ && selection_parameters_ != NULL;
}
inline void rp_gsm_si4::clear_selection_parameters() {
  if (GetArenaNoVirtual() == NULL && selection_parameters_ != NULL) delete selection_parameters_;
  selection_parameters_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_gsm_selection_parameters& rp_gsm_si4::selection_parameters() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si4.selection_parameters)
  return selection_parameters_ != NULL ? *selection_parameters_ : *default_instance_->selection_parameters_;
}
inline ::rf_phreaker::protobuf::rp_gsm_selection_parameters* rp_gsm_si4::mutable_selection_parameters() {
  
  if (selection_parameters_ == NULL) {
    selection_parameters_ = new ::rf_phreaker::protobuf::rp_gsm_selection_parameters;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_si4.selection_parameters)
  return selection_parameters_;
}
inline ::rf_phreaker::protobuf::rp_gsm_selection_parameters* rp_gsm_si4::release_selection_parameters() {
  
  ::rf_phreaker::protobuf::rp_gsm_selection_parameters* temp = selection_parameters_;
  selection_parameters_ = NULL;
  return temp;
}
inline void rp_gsm_si4::set_allocated_selection_parameters(::rf_phreaker::protobuf::rp_gsm_selection_parameters* selection_parameters) {
  delete selection_parameters_;
  selection_parameters_ = selection_parameters;
  if (selection_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_si4.selection_parameters)
}

// optional bool is_cbch_present = 7;
inline void rp_gsm_si4::clear_is_cbch_present() {
  is_cbch_present_ = false;
}
inline bool rp_gsm_si4::is_cbch_present() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si4.is_cbch_present)
  return is_cbch_present_;
}
inline void rp_gsm_si4::set_is_cbch_present(bool value) {
  
  is_cbch_present_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si4.is_cbch_present)
}

// optional bool have_additional_param_in_si7_si8 = 8;
inline void rp_gsm_si4::clear_have_additional_param_in_si7_si8() {
  have_additional_param_in_si7_si8_ = false;
}
inline bool rp_gsm_si4::have_additional_param_in_si7_si8() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_si4.have_additional_param_in_si7_si8)
  return have_additional_param_in_si7_si8_;
}
inline void rp_gsm_si4::set_have_additional_param_in_si7_si8(bool value) {
  
  have_additional_param_in_si7_si8_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm_si4.have_additional_param_in_si7_si8)
}

// -------------------------------------------------------------------

// rp_gsm_layer_3

// repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
inline int rp_gsm_layer_3::raw_layer_3_size() const {
  return raw_layer_3_.size();
}
inline void rp_gsm_layer_3::clear_raw_layer_3() {
  raw_layer_3_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_raw_layer_3& rp_gsm_layer_3::raw_layer_3(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_layer_3.raw_layer_3)
  return raw_layer_3_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_raw_layer_3* rp_gsm_layer_3::mutable_raw_layer_3(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_layer_3.raw_layer_3)
  return raw_layer_3_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_raw_layer_3* rp_gsm_layer_3::add_raw_layer_3() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_layer_3.raw_layer_3)
  return raw_layer_3_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >*
rp_gsm_layer_3::mutable_raw_layer_3() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_layer_3.raw_layer_3)
  return &raw_layer_3_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >&
rp_gsm_layer_3::raw_layer_3() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_layer_3.raw_layer_3)
  return raw_layer_3_;
}

// optional .rf_phreaker.protobuf.rp_gsm_si1 si1 = 2;
inline bool rp_gsm_layer_3::has_si1() const {
  return !_is_default_instance_ && si1_ != NULL;
}
inline void rp_gsm_layer_3::clear_si1() {
  if (GetArenaNoVirtual() == NULL && si1_ != NULL) delete si1_;
  si1_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_gsm_si1& rp_gsm_layer_3::si1() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_layer_3.si1)
  return si1_ != NULL ? *si1_ : *default_instance_->si1_;
}
inline ::rf_phreaker::protobuf::rp_gsm_si1* rp_gsm_layer_3::mutable_si1() {
  
  if (si1_ == NULL) {
    si1_ = new ::rf_phreaker::protobuf::rp_gsm_si1;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_layer_3.si1)
  return si1_;
}
inline ::rf_phreaker::protobuf::rp_gsm_si1* rp_gsm_layer_3::release_si1() {
  
  ::rf_phreaker::protobuf::rp_gsm_si1* temp = si1_;
  si1_ = NULL;
  return temp;
}
inline void rp_gsm_layer_3::set_allocated_si1(::rf_phreaker::protobuf::rp_gsm_si1* si1) {
  delete si1_;
  si1_ = si1;
  if (si1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_layer_3.si1)
}

// optional .rf_phreaker.protobuf.rp_gsm_si2 si2 = 3;
inline bool rp_gsm_layer_3::has_si2() const {
  return !_is_default_instance_ && si2_ != NULL;
}
inline void rp_gsm_layer_3::clear_si2() {
  if (GetArenaNoVirtual() == NULL && si2_ != NULL) delete si2_;
  si2_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_gsm_si2& rp_gsm_layer_3::si2() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_layer_3.si2)
  return si2_ != NULL ? *si2_ : *default_instance_->si2_;
}
inline ::rf_phreaker::protobuf::rp_gsm_si2* rp_gsm_layer_3::mutable_si2() {
  
  if (si2_ == NULL) {
    si2_ = new ::rf_phreaker::protobuf::rp_gsm_si2;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_layer_3.si2)
  return si2_;
}
inline ::rf_phreaker::protobuf::rp_gsm_si2* rp_gsm_layer_3::release_si2() {
  
  ::rf_phreaker::protobuf::rp_gsm_si2* temp = si2_;
  si2_ = NULL;
  return temp;
}
inline void rp_gsm_layer_3::set_allocated_si2(::rf_phreaker::protobuf::rp_gsm_si2* si2) {
  delete si2_;
  si2_ = si2;
  if (si2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_layer_3.si2)
}

// optional .rf_phreaker.protobuf.rp_gsm_si2_bis si2_bis = 4;
inline bool rp_gsm_layer_3::has_si2_bis() const {
  return !_is_default_instance_ && si2_bis_ != NULL;
}
inline void rp_gsm_layer_3::clear_si2_bis() {
  if (GetArenaNoVirtual() == NULL && si2_bis_ != NULL) delete si2_bis_;
  si2_bis_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_gsm_si2_bis& rp_gsm_layer_3::si2_bis() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_layer_3.si2_bis)
  return si2_bis_ != NULL ? *si2_bis_ : *default_instance_->si2_bis_;
}
inline ::rf_phreaker::protobuf::rp_gsm_si2_bis* rp_gsm_layer_3::mutable_si2_bis() {
  
  if (si2_bis_ == NULL) {
    si2_bis_ = new ::rf_phreaker::protobuf::rp_gsm_si2_bis;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_layer_3.si2_bis)
  return si2_bis_;
}
inline ::rf_phreaker::protobuf::rp_gsm_si2_bis* rp_gsm_layer_3::release_si2_bis() {
  
  ::rf_phreaker::protobuf::rp_gsm_si2_bis* temp = si2_bis_;
  si2_bis_ = NULL;
  return temp;
}
inline void rp_gsm_layer_3::set_allocated_si2_bis(::rf_phreaker::protobuf::rp_gsm_si2_bis* si2_bis) {
  delete si2_bis_;
  si2_bis_ = si2_bis;
  if (si2_bis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_layer_3.si2_bis)
}

// optional .rf_phreaker.protobuf.rp_gsm_si2_ter si2_ter = 5;
inline bool rp_gsm_layer_3::has_si2_ter() const {
  return !_is_default_instance_ && si2_ter_ != NULL;
}
inline void rp_gsm_layer_3::clear_si2_ter() {
  if (GetArenaNoVirtual() == NULL && si2_ter_ != NULL) delete si2_ter_;
  si2_ter_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_gsm_si2_ter& rp_gsm_layer_3::si2_ter() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_layer_3.si2_ter)
  return si2_ter_ != NULL ? *si2_ter_ : *default_instance_->si2_ter_;
}
inline ::rf_phreaker::protobuf::rp_gsm_si2_ter* rp_gsm_layer_3::mutable_si2_ter() {
  
  if (si2_ter_ == NULL) {
    si2_ter_ = new ::rf_phreaker::protobuf::rp_gsm_si2_ter;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_layer_3.si2_ter)
  return si2_ter_;
}
inline ::rf_phreaker::protobuf::rp_gsm_si2_ter* rp_gsm_layer_3::release_si2_ter() {
  
  ::rf_phreaker::protobuf::rp_gsm_si2_ter* temp = si2_ter_;
  si2_ter_ = NULL;
  return temp;
}
inline void rp_gsm_layer_3::set_allocated_si2_ter(::rf_phreaker::protobuf::rp_gsm_si2_ter* si2_ter) {
  delete si2_ter_;
  si2_ter_ = si2_ter;
  if (si2_ter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_layer_3.si2_ter)
}

// optional .rf_phreaker.protobuf.rp_gsm_si2_quater si2_quater = 6;
inline bool rp_gsm_layer_3::has_si2_quater() const {
  return !_is_default_instance_ && si2_quater_ != NULL;
}
inline void rp_gsm_layer_3::clear_si2_quater() {
  if (GetArenaNoVirtual() == NULL && si2_quater_ != NULL) delete si2_quater_;
  si2_quater_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_gsm_si2_quater& rp_gsm_layer_3::si2_quater() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_layer_3.si2_quater)
  return si2_quater_ != NULL ? *si2_quater_ : *default_instance_->si2_quater_;
}
inline ::rf_phreaker::protobuf::rp_gsm_si2_quater* rp_gsm_layer_3::mutable_si2_quater() {
  
  if (si2_quater_ == NULL) {
    si2_quater_ = new ::rf_phreaker::protobuf::rp_gsm_si2_quater;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_layer_3.si2_quater)
  return si2_quater_;
}
inline ::rf_phreaker::protobuf::rp_gsm_si2_quater* rp_gsm_layer_3::release_si2_quater() {
  
  ::rf_phreaker::protobuf::rp_gsm_si2_quater* temp = si2_quater_;
  si2_quater_ = NULL;
  return temp;
}
inline void rp_gsm_layer_3::set_allocated_si2_quater(::rf_phreaker::protobuf::rp_gsm_si2_quater* si2_quater) {
  delete si2_quater_;
  si2_quater_ = si2_quater;
  if (si2_quater) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_layer_3.si2_quater)
}

// optional .rf_phreaker.protobuf.rp_gsm_si3 si3 = 7;
inline bool rp_gsm_layer_3::has_si3() const {
  return !_is_default_instance_ && si3_ != NULL;
}
inline void rp_gsm_layer_3::clear_si3() {
  if (GetArenaNoVirtual() == NULL && si3_ != NULL) delete si3_;
  si3_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_gsm_si3& rp_gsm_layer_3::si3() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_layer_3.si3)
  return si3_ != NULL ? *si3_ : *default_instance_->si3_;
}
inline ::rf_phreaker::protobuf::rp_gsm_si3* rp_gsm_layer_3::mutable_si3() {
  
  if (si3_ == NULL) {
    si3_ = new ::rf_phreaker::protobuf::rp_gsm_si3;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_layer_3.si3)
  return si3_;
}
inline ::rf_phreaker::protobuf::rp_gsm_si3* rp_gsm_layer_3::release_si3() {
  
  ::rf_phreaker::protobuf::rp_gsm_si3* temp = si3_;
  si3_ = NULL;
  return temp;
}
inline void rp_gsm_layer_3::set_allocated_si3(::rf_phreaker::protobuf::rp_gsm_si3* si3) {
  delete si3_;
  si3_ = si3;
  if (si3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_layer_3.si3)
}

// optional .rf_phreaker.protobuf.rp_gsm_si4 si4 = 8;
inline bool rp_gsm_layer_3::has_si4() const {
  return !_is_default_instance_ && si4_ != NULL;
}
inline void rp_gsm_layer_3::clear_si4() {
  if (GetArenaNoVirtual() == NULL && si4_ != NULL) delete si4_;
  si4_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_gsm_si4& rp_gsm_layer_3::si4() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_layer_3.si4)
  return si4_ != NULL ? *si4_ : *default_instance_->si4_;
}
inline ::rf_phreaker::protobuf::rp_gsm_si4* rp_gsm_layer_3::mutable_si4() {
  
  if (si4_ == NULL) {
    si4_ = new ::rf_phreaker::protobuf::rp_gsm_si4;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_layer_3.si4)
  return si4_;
}
inline ::rf_phreaker::protobuf::rp_gsm_si4* rp_gsm_layer_3::release_si4() {
  
  ::rf_phreaker::protobuf::rp_gsm_si4* temp = si4_;
  si4_ = NULL;
  return temp;
}
inline void rp_gsm_layer_3::set_allocated_si4(::rf_phreaker::protobuf::rp_gsm_si4* si4) {
  delete si4_;
  si4_ = si4;
  if (si4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_layer_3.si4)
}

// -------------------------------------------------------------------

// rp_gsm

// optional .rf_phreaker.protobuf.rp_base base = 1;
inline bool rp_gsm::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
inline void rp_gsm::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_base& rp_gsm::base() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::rf_phreaker::protobuf::rp_base* rp_gsm::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::rf_phreaker::protobuf::rp_base;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm.base)
  return base_;
}
inline ::rf_phreaker::protobuf::rp_base* rp_gsm::release_base() {
  
  ::rf_phreaker::protobuf::rp_base* temp = base_;
  base_ = NULL;
  return temp;
}
inline void rp_gsm::set_allocated_base(::rf_phreaker::protobuf::rp_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm.base)
}

// optional int32 arfcn = 2;
inline void rp_gsm::clear_arfcn() {
  arfcn_ = 0;
}
inline ::google::protobuf::int32 rp_gsm::arfcn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm.arfcn)
  return arfcn_;
}
inline void rp_gsm::set_arfcn(::google::protobuf::int32 value) {
  
  arfcn_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm.arfcn)
}

// optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
inline void rp_gsm::clear_operating_band() {
  operating_band_ = 0;
}
inline ::rf_phreaker::protobuf::rp_operating_band rp_gsm::operating_band() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm.operating_band)
  return static_cast< ::rf_phreaker::protobuf::rp_operating_band >(operating_band_);
}
inline void rp_gsm::set_operating_band(::rf_phreaker::protobuf::rp_operating_band value) {
  
  operating_band_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm.operating_band)
}

// optional int32 bsic = 4;
inline void rp_gsm::clear_bsic() {
  bsic_ = 0;
}
inline ::google::protobuf::int32 rp_gsm::bsic() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm.bsic)
  return bsic_;
}
inline void rp_gsm::set_bsic(::google::protobuf::int32 value) {
  
  bsic_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm.bsic)
}

// optional int32 tdma_frame_number = 5;
inline void rp_gsm::clear_tdma_frame_number() {
  tdma_frame_number_ = 0;
}
inline ::google::protobuf::int32 rp_gsm::tdma_frame_number() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm.tdma_frame_number)
  return tdma_frame_number_;
}
inline void rp_gsm::set_tdma_frame_number(::google::protobuf::int32 value) {
  
  tdma_frame_number_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm.tdma_frame_number)
}

// optional double bcch_signal_level = 6;
inline void rp_gsm::clear_bcch_signal_level() {
  bcch_signal_level_ = 0;
}
inline double rp_gsm::bcch_signal_level() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm.bcch_signal_level)
  return bcch_signal_level_;
}
inline void rp_gsm::set_bcch_signal_level(double value) {
  
  bcch_signal_level_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm.bcch_signal_level)
}

// optional double ctoi = 7;
inline void rp_gsm::clear_ctoi() {
  ctoi_ = 0;
}
inline double rp_gsm::ctoi() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm.ctoi)
  return ctoi_;
}
inline void rp_gsm::set_ctoi(double value) {
  
  ctoi_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_gsm.ctoi)
}

// optional .rf_phreaker.protobuf.rp_gsm_layer_3 layer_3 = 8;
inline bool rp_gsm::has_layer_3() const {
  return !_is_default_instance_ && layer_3_ != NULL;
}
inline void rp_gsm::clear_layer_3() {
  if (GetArenaNoVirtual() == NULL && layer_3_ != NULL) delete layer_3_;
  layer_3_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_gsm_layer_3& rp_gsm::layer_3() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm.layer_3)
  return layer_3_ != NULL ? *layer_3_ : *default_instance_->layer_3_;
}
inline ::rf_phreaker::protobuf::rp_gsm_layer_3* rp_gsm::mutable_layer_3() {
  
  if (layer_3_ == NULL) {
    layer_3_ = new ::rf_phreaker::protobuf::rp_gsm_layer_3;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm.layer_3)
  return layer_3_;
}
inline ::rf_phreaker::protobuf::rp_gsm_layer_3* rp_gsm::release_layer_3() {
  
  ::rf_phreaker::protobuf::rp_gsm_layer_3* temp = layer_3_;
  layer_3_ = NULL;
  return temp;
}
inline void rp_gsm::set_allocated_layer_3(::rf_phreaker::protobuf::rp_gsm_layer_3* layer_3) {
  delete layer_3_;
  layer_3_ = layer_3;
  if (layer_3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm.layer_3)
}

// -------------------------------------------------------------------

// rp_gsm_update

// optional .rf_phreaker.protobuf.rp_base base = 1;
inline bool rp_gsm_update::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
inline void rp_gsm_update::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_base& rp_gsm_update::base() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_update.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::rf_phreaker::protobuf::rp_base* rp_gsm_update::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::rf_phreaker::protobuf::rp_base;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_update.base)
  return base_;
}
inline ::rf_phreaker::protobuf::rp_base* rp_gsm_update::release_base() {
  
  ::rf_phreaker::protobuf::rp_base* temp = base_;
  base_ = NULL;
  return temp;
}
inline void rp_gsm_update::set_allocated_base(::rf_phreaker::protobuf::rp_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_gsm_update.base)
}

// repeated .rf_phreaker.protobuf.rp_gsm gsm = 2;
inline int rp_gsm_update::gsm_size() const {
  return gsm_.size();
}
inline void rp_gsm_update::clear_gsm() {
  gsm_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_gsm& rp_gsm_update::gsm(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_gsm_update.gsm)
  return gsm_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_gsm* rp_gsm_update::mutable_gsm(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_gsm_update.gsm)
  return gsm_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_gsm* rp_gsm_update::add_gsm() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_gsm_update.gsm)
  return gsm_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm >*
rp_gsm_update::mutable_gsm() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_gsm_update.gsm)
  return &gsm_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_gsm >&
rp_gsm_update::gsm() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_gsm_update.gsm)
  return gsm_;
}

// -------------------------------------------------------------------

// rp_wcdma_utran_neighbor

// optional int32 uarfcn = 1;
inline void rp_wcdma_utran_neighbor::clear_uarfcn() {
  uarfcn_ = 0;
}
inline ::google::protobuf::int32 rp_wcdma_utran_neighbor::uarfcn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_utran_neighbor.uarfcn)
  return uarfcn_;
}
inline void rp_wcdma_utran_neighbor::set_uarfcn(::google::protobuf::int32 value) {
  
  uarfcn_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_utran_neighbor.uarfcn)
}

// optional int32 cpich = 2;
inline void rp_wcdma_utran_neighbor::clear_cpich() {
  cpich_ = 0;
}
inline ::google::protobuf::int32 rp_wcdma_utran_neighbor::cpich() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_utran_neighbor.cpich)
  return cpich_;
}
inline void rp_wcdma_utran_neighbor::set_cpich(::google::protobuf::int32 value) {
  
  cpich_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_utran_neighbor.cpich)
}

// -------------------------------------------------------------------

// rp_wcdma_gsm_neighbor

// optional int32 bsic = 1;
inline void rp_wcdma_gsm_neighbor::clear_bsic() {
  bsic_ = 0;
}
inline ::google::protobuf::int32 rp_wcdma_gsm_neighbor::bsic() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor.bsic)
  return bsic_;
}
inline void rp_wcdma_gsm_neighbor::set_bsic(::google::protobuf::int32 value) {
  
  bsic_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor.bsic)
}

// optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 2;
inline void rp_wcdma_gsm_neighbor::clear_band_indicator() {
  band_indicator_ = 0;
}
inline ::rf_phreaker::protobuf::rp_band_indicator_type rp_wcdma_gsm_neighbor::band_indicator() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor.band_indicator)
  return static_cast< ::rf_phreaker::protobuf::rp_band_indicator_type >(band_indicator_);
}
inline void rp_wcdma_gsm_neighbor::set_band_indicator(::rf_phreaker::protobuf::rp_band_indicator_type value) {
  
  band_indicator_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor.band_indicator)
}

// optional int32 arfcn = 3;
inline void rp_wcdma_gsm_neighbor::clear_arfcn() {
  arfcn_ = 0;
}
inline ::google::protobuf::int32 rp_wcdma_gsm_neighbor::arfcn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor.arfcn)
  return arfcn_;
}
inline void rp_wcdma_gsm_neighbor::set_arfcn(::google::protobuf::int32 value) {
  
  arfcn_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor.arfcn)
}

// optional int32 qrx_lev_min = 4;
inline void rp_wcdma_gsm_neighbor::clear_qrx_lev_min() {
  qrx_lev_min_ = 0;
}
inline ::google::protobuf::int32 rp_wcdma_gsm_neighbor::qrx_lev_min() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor.qrx_lev_min)
  return qrx_lev_min_;
}
inline void rp_wcdma_gsm_neighbor::set_qrx_lev_min(::google::protobuf::int32 value) {
  
  qrx_lev_min_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_gsm_neighbor.qrx_lev_min)
}

// -------------------------------------------------------------------

// rp_wcdma_mib

// optional .rf_phreaker.protobuf.rp_plmn plmn = 2;
inline bool rp_wcdma_mib::has_plmn() const {
  return !_is_default_instance_ && plmn_ != NULL;
}
inline void rp_wcdma_mib::clear_plmn() {
  if (GetArenaNoVirtual() == NULL && plmn_ != NULL) delete plmn_;
  plmn_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_plmn& rp_wcdma_mib::plmn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_mib.plmn)
  return plmn_ != NULL ? *plmn_ : *default_instance_->plmn_;
}
inline ::rf_phreaker::protobuf::rp_plmn* rp_wcdma_mib::mutable_plmn() {
  
  if (plmn_ == NULL) {
    plmn_ = new ::rf_phreaker::protobuf::rp_plmn;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_mib.plmn)
  return plmn_;
}
inline ::rf_phreaker::protobuf::rp_plmn* rp_wcdma_mib::release_plmn() {
  
  ::rf_phreaker::protobuf::rp_plmn* temp = plmn_;
  plmn_ = NULL;
  return temp;
}
inline void rp_wcdma_mib::set_allocated_plmn(::rf_phreaker::protobuf::rp_plmn* plmn) {
  delete plmn_;
  plmn_ = plmn;
  if (plmn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma_mib.plmn)
}

// repeated .rf_phreaker.protobuf.rp_plmn multiple_plmns = 3;
inline int rp_wcdma_mib::multiple_plmns_size() const {
  return multiple_plmns_.size();
}
inline void rp_wcdma_mib::clear_multiple_plmns() {
  multiple_plmns_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_plmn& rp_wcdma_mib::multiple_plmns(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_mib.multiple_plmns)
  return multiple_plmns_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_plmn* rp_wcdma_mib::mutable_multiple_plmns(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_mib.multiple_plmns)
  return multiple_plmns_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_plmn* rp_wcdma_mib::add_multiple_plmns() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_mib.multiple_plmns)
  return multiple_plmns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_plmn >*
rp_wcdma_mib::mutable_multiple_plmns() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_mib.multiple_plmns)
  return &multiple_plmns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_plmn >&
rp_wcdma_mib::multiple_plmns() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_mib.multiple_plmns)
  return multiple_plmns_;
}

// -------------------------------------------------------------------

// rp_wcdma_sib1

// optional int32 lac = 2;
inline void rp_wcdma_sib1::clear_lac() {
  lac_ = 0;
}
inline ::google::protobuf::int32 rp_wcdma_sib1::lac() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib1.lac)
  return lac_;
}
inline void rp_wcdma_sib1::set_lac(::google::protobuf::int32 value) {
  
  lac_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_sib1.lac)
}

// -------------------------------------------------------------------

// rp_wcdma_sib3

// optional int32 cid = 2;
inline void rp_wcdma_sib3::clear_cid() {
  cid_ = 0;
}
inline ::google::protobuf::int32 rp_wcdma_sib3::cid() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib3.cid)
  return cid_;
}
inline void rp_wcdma_sib3::set_cid(::google::protobuf::int32 value) {
  
  cid_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_sib3.cid)
}

// -------------------------------------------------------------------

// rp_wcdma_sib4

// optional int32 cid = 2;
inline void rp_wcdma_sib4::clear_cid() {
  cid_ = 0;
}
inline ::google::protobuf::int32 rp_wcdma_sib4::cid() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib4.cid)
  return cid_;
}
inline void rp_wcdma_sib4::set_cid(::google::protobuf::int32 value) {
  
  cid_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_sib4.cid)
}

// -------------------------------------------------------------------

// rp_wcdma_sib11

// repeated int32 utran_intra_neighbor_cpichs = 2 [packed = true];
inline int rp_wcdma_sib11::utran_intra_neighbor_cpichs_size() const {
  return utran_intra_neighbor_cpichs_.size();
}
inline void rp_wcdma_sib11::clear_utran_intra_neighbor_cpichs() {
  utran_intra_neighbor_cpichs_.Clear();
}
inline ::google::protobuf::int32 rp_wcdma_sib11::utran_intra_neighbor_cpichs(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib11.utran_intra_neighbor_cpichs)
  return utran_intra_neighbor_cpichs_.Get(index);
}
inline void rp_wcdma_sib11::set_utran_intra_neighbor_cpichs(int index, ::google::protobuf::int32 value) {
  utran_intra_neighbor_cpichs_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_sib11.utran_intra_neighbor_cpichs)
}
inline void rp_wcdma_sib11::add_utran_intra_neighbor_cpichs(::google::protobuf::int32 value) {
  utran_intra_neighbor_cpichs_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_sib11.utran_intra_neighbor_cpichs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_wcdma_sib11::utran_intra_neighbor_cpichs() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_sib11.utran_intra_neighbor_cpichs)
  return utran_intra_neighbor_cpichs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_wcdma_sib11::mutable_utran_intra_neighbor_cpichs() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_sib11.utran_intra_neighbor_cpichs)
  return &utran_intra_neighbor_cpichs_;
}

// repeated .rf_phreaker.protobuf.rp_wcdma_utran_neighbor utran_inter_neighbors = 3;
inline int rp_wcdma_sib11::utran_inter_neighbors_size() const {
  return utran_inter_neighbors_.size();
}
inline void rp_wcdma_sib11::clear_utran_inter_neighbors() {
  utran_inter_neighbors_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor& rp_wcdma_sib11::utran_inter_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib11.utran_inter_neighbors)
  return utran_inter_neighbors_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor* rp_wcdma_sib11::mutable_utran_inter_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_sib11.utran_inter_neighbors)
  return utran_inter_neighbors_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor* rp_wcdma_sib11::add_utran_inter_neighbors() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_sib11.utran_inter_neighbors)
  return utran_inter_neighbors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor >*
rp_wcdma_sib11::mutable_utran_inter_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_sib11.utran_inter_neighbors)
  return &utran_inter_neighbors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor >&
rp_wcdma_sib11::utran_inter_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_sib11.utran_inter_neighbors)
  return utran_inter_neighbors_;
}

// repeated .rf_phreaker.protobuf.rp_wcdma_gsm_neighbor gsm_inter_neighbors = 4;
inline int rp_wcdma_sib11::gsm_inter_neighbors_size() const {
  return gsm_inter_neighbors_.size();
}
inline void rp_wcdma_sib11::clear_gsm_inter_neighbors() {
  gsm_inter_neighbors_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor& rp_wcdma_sib11::gsm_inter_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib11.gsm_inter_neighbors)
  return gsm_inter_neighbors_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor* rp_wcdma_sib11::mutable_gsm_inter_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_sib11.gsm_inter_neighbors)
  return gsm_inter_neighbors_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor* rp_wcdma_sib11::add_gsm_inter_neighbors() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_sib11.gsm_inter_neighbors)
  return gsm_inter_neighbors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor >*
rp_wcdma_sib11::mutable_gsm_inter_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_sib11.gsm_inter_neighbors)
  return &gsm_inter_neighbors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor >&
rp_wcdma_sib11::gsm_inter_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_sib11.gsm_inter_neighbors)
  return gsm_inter_neighbors_;
}

// -------------------------------------------------------------------

// rp_wcdma_sib11_bis

// repeated int32 utran_intra_neighbor_cpichs = 2 [packed = true];
inline int rp_wcdma_sib11_bis::utran_intra_neighbor_cpichs_size() const {
  return utran_intra_neighbor_cpichs_.size();
}
inline void rp_wcdma_sib11_bis::clear_utran_intra_neighbor_cpichs() {
  utran_intra_neighbor_cpichs_.Clear();
}
inline ::google::protobuf::int32 rp_wcdma_sib11_bis::utran_intra_neighbor_cpichs(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_intra_neighbor_cpichs)
  return utran_intra_neighbor_cpichs_.Get(index);
}
inline void rp_wcdma_sib11_bis::set_utran_intra_neighbor_cpichs(int index, ::google::protobuf::int32 value) {
  utran_intra_neighbor_cpichs_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_intra_neighbor_cpichs)
}
inline void rp_wcdma_sib11_bis::add_utran_intra_neighbor_cpichs(::google::protobuf::int32 value) {
  utran_intra_neighbor_cpichs_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_intra_neighbor_cpichs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_wcdma_sib11_bis::utran_intra_neighbor_cpichs() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_intra_neighbor_cpichs)
  return utran_intra_neighbor_cpichs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_wcdma_sib11_bis::mutable_utran_intra_neighbor_cpichs() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_intra_neighbor_cpichs)
  return &utran_intra_neighbor_cpichs_;
}

// repeated .rf_phreaker.protobuf.rp_wcdma_utran_neighbor utran_inter_neighbors = 3;
inline int rp_wcdma_sib11_bis::utran_inter_neighbors_size() const {
  return utran_inter_neighbors_.size();
}
inline void rp_wcdma_sib11_bis::clear_utran_inter_neighbors() {
  utran_inter_neighbors_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor& rp_wcdma_sib11_bis::utran_inter_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_inter_neighbors)
  return utran_inter_neighbors_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor* rp_wcdma_sib11_bis::mutable_utran_inter_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_inter_neighbors)
  return utran_inter_neighbors_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor* rp_wcdma_sib11_bis::add_utran_inter_neighbors() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_inter_neighbors)
  return utran_inter_neighbors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor >*
rp_wcdma_sib11_bis::mutable_utran_inter_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_inter_neighbors)
  return &utran_inter_neighbors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_utran_neighbor >&
rp_wcdma_sib11_bis::utran_inter_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_sib11_bis.utran_inter_neighbors)
  return utran_inter_neighbors_;
}

// repeated .rf_phreaker.protobuf.rp_wcdma_gsm_neighbor gsm_inter_neighbors = 4;
inline int rp_wcdma_sib11_bis::gsm_inter_neighbors_size() const {
  return gsm_inter_neighbors_.size();
}
inline void rp_wcdma_sib11_bis::clear_gsm_inter_neighbors() {
  gsm_inter_neighbors_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor& rp_wcdma_sib11_bis::gsm_inter_neighbors(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_sib11_bis.gsm_inter_neighbors)
  return gsm_inter_neighbors_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor* rp_wcdma_sib11_bis::mutable_gsm_inter_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_sib11_bis.gsm_inter_neighbors)
  return gsm_inter_neighbors_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor* rp_wcdma_sib11_bis::add_gsm_inter_neighbors() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_sib11_bis.gsm_inter_neighbors)
  return gsm_inter_neighbors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor >*
rp_wcdma_sib11_bis::mutable_gsm_inter_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_sib11_bis.gsm_inter_neighbors)
  return &gsm_inter_neighbors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma_gsm_neighbor >&
rp_wcdma_sib11_bis::gsm_inter_neighbors() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_sib11_bis.gsm_inter_neighbors)
  return gsm_inter_neighbors_;
}

// -------------------------------------------------------------------

// rp_wcdma_layer_3

// repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
inline int rp_wcdma_layer_3::raw_layer_3_size() const {
  return raw_layer_3_.size();
}
inline void rp_wcdma_layer_3::clear_raw_layer_3() {
  raw_layer_3_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_raw_layer_3& rp_wcdma_layer_3::raw_layer_3(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_layer_3.raw_layer_3)
  return raw_layer_3_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_raw_layer_3* rp_wcdma_layer_3::mutable_raw_layer_3(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_layer_3.raw_layer_3)
  return raw_layer_3_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_raw_layer_3* rp_wcdma_layer_3::add_raw_layer_3() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_layer_3.raw_layer_3)
  return raw_layer_3_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >*
rp_wcdma_layer_3::mutable_raw_layer_3() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_layer_3.raw_layer_3)
  return &raw_layer_3_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >&
rp_wcdma_layer_3::raw_layer_3() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_layer_3.raw_layer_3)
  return raw_layer_3_;
}

// optional .rf_phreaker.protobuf.rp_wcdma_mib mib = 2;
inline bool rp_wcdma_layer_3::has_mib() const {
  return !_is_default_instance_ && mib_ != NULL;
}
inline void rp_wcdma_layer_3::clear_mib() {
  if (GetArenaNoVirtual() == NULL && mib_ != NULL) delete mib_;
  mib_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_wcdma_mib& rp_wcdma_layer_3::mib() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_layer_3.mib)
  return mib_ != NULL ? *mib_ : *default_instance_->mib_;
}
inline ::rf_phreaker::protobuf::rp_wcdma_mib* rp_wcdma_layer_3::mutable_mib() {
  
  if (mib_ == NULL) {
    mib_ = new ::rf_phreaker::protobuf::rp_wcdma_mib;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_layer_3.mib)
  return mib_;
}
inline ::rf_phreaker::protobuf::rp_wcdma_mib* rp_wcdma_layer_3::release_mib() {
  
  ::rf_phreaker::protobuf::rp_wcdma_mib* temp = mib_;
  mib_ = NULL;
  return temp;
}
inline void rp_wcdma_layer_3::set_allocated_mib(::rf_phreaker::protobuf::rp_wcdma_mib* mib) {
  delete mib_;
  mib_ = mib;
  if (mib) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma_layer_3.mib)
}

// optional .rf_phreaker.protobuf.rp_wcdma_sib1 sib1 = 3;
inline bool rp_wcdma_layer_3::has_sib1() const {
  return !_is_default_instance_ && sib1_ != NULL;
}
inline void rp_wcdma_layer_3::clear_sib1() {
  if (GetArenaNoVirtual() == NULL && sib1_ != NULL) delete sib1_;
  sib1_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_wcdma_sib1& rp_wcdma_layer_3::sib1() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_layer_3.sib1)
  return sib1_ != NULL ? *sib1_ : *default_instance_->sib1_;
}
inline ::rf_phreaker::protobuf::rp_wcdma_sib1* rp_wcdma_layer_3::mutable_sib1() {
  
  if (sib1_ == NULL) {
    sib1_ = new ::rf_phreaker::protobuf::rp_wcdma_sib1;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_layer_3.sib1)
  return sib1_;
}
inline ::rf_phreaker::protobuf::rp_wcdma_sib1* rp_wcdma_layer_3::release_sib1() {
  
  ::rf_phreaker::protobuf::rp_wcdma_sib1* temp = sib1_;
  sib1_ = NULL;
  return temp;
}
inline void rp_wcdma_layer_3::set_allocated_sib1(::rf_phreaker::protobuf::rp_wcdma_sib1* sib1) {
  delete sib1_;
  sib1_ = sib1;
  if (sib1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma_layer_3.sib1)
}

// optional .rf_phreaker.protobuf.rp_wcdma_sib3 sib3 = 4;
inline bool rp_wcdma_layer_3::has_sib3() const {
  return !_is_default_instance_ && sib3_ != NULL;
}
inline void rp_wcdma_layer_3::clear_sib3() {
  if (GetArenaNoVirtual() == NULL && sib3_ != NULL) delete sib3_;
  sib3_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_wcdma_sib3& rp_wcdma_layer_3::sib3() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_layer_3.sib3)
  return sib3_ != NULL ? *sib3_ : *default_instance_->sib3_;
}
inline ::rf_phreaker::protobuf::rp_wcdma_sib3* rp_wcdma_layer_3::mutable_sib3() {
  
  if (sib3_ == NULL) {
    sib3_ = new ::rf_phreaker::protobuf::rp_wcdma_sib3;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_layer_3.sib3)
  return sib3_;
}
inline ::rf_phreaker::protobuf::rp_wcdma_sib3* rp_wcdma_layer_3::release_sib3() {
  
  ::rf_phreaker::protobuf::rp_wcdma_sib3* temp = sib3_;
  sib3_ = NULL;
  return temp;
}
inline void rp_wcdma_layer_3::set_allocated_sib3(::rf_phreaker::protobuf::rp_wcdma_sib3* sib3) {
  delete sib3_;
  sib3_ = sib3;
  if (sib3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma_layer_3.sib3)
}

// optional .rf_phreaker.protobuf.rp_wcdma_sib4 sib4 = 5;
inline bool rp_wcdma_layer_3::has_sib4() const {
  return !_is_default_instance_ && sib4_ != NULL;
}
inline void rp_wcdma_layer_3::clear_sib4() {
  if (GetArenaNoVirtual() == NULL && sib4_ != NULL) delete sib4_;
  sib4_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_wcdma_sib4& rp_wcdma_layer_3::sib4() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_layer_3.sib4)
  return sib4_ != NULL ? *sib4_ : *default_instance_->sib4_;
}
inline ::rf_phreaker::protobuf::rp_wcdma_sib4* rp_wcdma_layer_3::mutable_sib4() {
  
  if (sib4_ == NULL) {
    sib4_ = new ::rf_phreaker::protobuf::rp_wcdma_sib4;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_layer_3.sib4)
  return sib4_;
}
inline ::rf_phreaker::protobuf::rp_wcdma_sib4* rp_wcdma_layer_3::release_sib4() {
  
  ::rf_phreaker::protobuf::rp_wcdma_sib4* temp = sib4_;
  sib4_ = NULL;
  return temp;
}
inline void rp_wcdma_layer_3::set_allocated_sib4(::rf_phreaker::protobuf::rp_wcdma_sib4* sib4) {
  delete sib4_;
  sib4_ = sib4;
  if (sib4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma_layer_3.sib4)
}

// optional .rf_phreaker.protobuf.rp_wcdma_sib11 sib11 = 6;
inline bool rp_wcdma_layer_3::has_sib11() const {
  return !_is_default_instance_ && sib11_ != NULL;
}
inline void rp_wcdma_layer_3::clear_sib11() {
  if (GetArenaNoVirtual() == NULL && sib11_ != NULL) delete sib11_;
  sib11_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_wcdma_sib11& rp_wcdma_layer_3::sib11() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_layer_3.sib11)
  return sib11_ != NULL ? *sib11_ : *default_instance_->sib11_;
}
inline ::rf_phreaker::protobuf::rp_wcdma_sib11* rp_wcdma_layer_3::mutable_sib11() {
  
  if (sib11_ == NULL) {
    sib11_ = new ::rf_phreaker::protobuf::rp_wcdma_sib11;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_layer_3.sib11)
  return sib11_;
}
inline ::rf_phreaker::protobuf::rp_wcdma_sib11* rp_wcdma_layer_3::release_sib11() {
  
  ::rf_phreaker::protobuf::rp_wcdma_sib11* temp = sib11_;
  sib11_ = NULL;
  return temp;
}
inline void rp_wcdma_layer_3::set_allocated_sib11(::rf_phreaker::protobuf::rp_wcdma_sib11* sib11) {
  delete sib11_;
  sib11_ = sib11;
  if (sib11) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma_layer_3.sib11)
}

// optional .rf_phreaker.protobuf.rp_wcdma_sib11_bis sib11_bis = 7;
inline bool rp_wcdma_layer_3::has_sib11_bis() const {
  return !_is_default_instance_ && sib11_bis_ != NULL;
}
inline void rp_wcdma_layer_3::clear_sib11_bis() {
  if (GetArenaNoVirtual() == NULL && sib11_bis_ != NULL) delete sib11_bis_;
  sib11_bis_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_wcdma_sib11_bis& rp_wcdma_layer_3::sib11_bis() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_layer_3.sib11_bis)
  return sib11_bis_ != NULL ? *sib11_bis_ : *default_instance_->sib11_bis_;
}
inline ::rf_phreaker::protobuf::rp_wcdma_sib11_bis* rp_wcdma_layer_3::mutable_sib11_bis() {
  
  if (sib11_bis_ == NULL) {
    sib11_bis_ = new ::rf_phreaker::protobuf::rp_wcdma_sib11_bis;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_layer_3.sib11_bis)
  return sib11_bis_;
}
inline ::rf_phreaker::protobuf::rp_wcdma_sib11_bis* rp_wcdma_layer_3::release_sib11_bis() {
  
  ::rf_phreaker::protobuf::rp_wcdma_sib11_bis* temp = sib11_bis_;
  sib11_bis_ = NULL;
  return temp;
}
inline void rp_wcdma_layer_3::set_allocated_sib11_bis(::rf_phreaker::protobuf::rp_wcdma_sib11_bis* sib11_bis) {
  delete sib11_bis_;
  sib11_bis_ = sib11_bis;
  if (sib11_bis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma_layer_3.sib11_bis)
}

// -------------------------------------------------------------------

// rp_wcdma

// optional .rf_phreaker.protobuf.rp_base base = 1;
inline bool rp_wcdma::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
inline void rp_wcdma::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_base& rp_wcdma::base() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::rf_phreaker::protobuf::rp_base* rp_wcdma::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::rf_phreaker::protobuf::rp_base;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma.base)
  return base_;
}
inline ::rf_phreaker::protobuf::rp_base* rp_wcdma::release_base() {
  
  ::rf_phreaker::protobuf::rp_base* temp = base_;
  base_ = NULL;
  return temp;
}
inline void rp_wcdma::set_allocated_base(::rf_phreaker::protobuf::rp_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma.base)
}

// optional int32 uarfcn = 2;
inline void rp_wcdma::clear_uarfcn() {
  uarfcn_ = 0;
}
inline ::google::protobuf::int32 rp_wcdma::uarfcn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma.uarfcn)
  return uarfcn_;
}
inline void rp_wcdma::set_uarfcn(::google::protobuf::int32 value) {
  
  uarfcn_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma.uarfcn)
}

// optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
inline void rp_wcdma::clear_operating_band() {
  operating_band_ = 0;
}
inline ::rf_phreaker::protobuf::rp_operating_band rp_wcdma::operating_band() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma.operating_band)
  return static_cast< ::rf_phreaker::protobuf::rp_operating_band >(operating_band_);
}
inline void rp_wcdma::set_operating_band(::rf_phreaker::protobuf::rp_operating_band value) {
  
  operating_band_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma.operating_band)
}

// optional int32 cpich = 4;
inline void rp_wcdma::clear_cpich() {
  cpich_ = 0;
}
inline ::google::protobuf::int32 rp_wcdma::cpich() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma.cpich)
  return cpich_;
}
inline void rp_wcdma::set_cpich(::google::protobuf::int32 value) {
  
  cpich_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma.cpich)
}

// optional double ecio = 5;
inline void rp_wcdma::clear_ecio() {
  ecio_ = 0;
}
inline double rp_wcdma::ecio() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma.ecio)
  return ecio_;
}
inline void rp_wcdma::set_ecio(double value) {
  
  ecio_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma.ecio)
}

// optional double rscp = 6;
inline void rp_wcdma::clear_rscp() {
  rscp_ = 0;
}
inline double rp_wcdma::rscp() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma.rscp)
  return rscp_;
}
inline void rp_wcdma::set_rscp(double value) {
  
  rscp_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_wcdma.rscp)
}

// optional .rf_phreaker.protobuf.rp_wcdma_layer_3 layer_3 = 7;
inline bool rp_wcdma::has_layer_3() const {
  return !_is_default_instance_ && layer_3_ != NULL;
}
inline void rp_wcdma::clear_layer_3() {
  if (GetArenaNoVirtual() == NULL && layer_3_ != NULL) delete layer_3_;
  layer_3_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_wcdma_layer_3& rp_wcdma::layer_3() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma.layer_3)
  return layer_3_ != NULL ? *layer_3_ : *default_instance_->layer_3_;
}
inline ::rf_phreaker::protobuf::rp_wcdma_layer_3* rp_wcdma::mutable_layer_3() {
  
  if (layer_3_ == NULL) {
    layer_3_ = new ::rf_phreaker::protobuf::rp_wcdma_layer_3;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma.layer_3)
  return layer_3_;
}
inline ::rf_phreaker::protobuf::rp_wcdma_layer_3* rp_wcdma::release_layer_3() {
  
  ::rf_phreaker::protobuf::rp_wcdma_layer_3* temp = layer_3_;
  layer_3_ = NULL;
  return temp;
}
inline void rp_wcdma::set_allocated_layer_3(::rf_phreaker::protobuf::rp_wcdma_layer_3* layer_3) {
  delete layer_3_;
  layer_3_ = layer_3;
  if (layer_3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma.layer_3)
}

// -------------------------------------------------------------------

// rp_wcdma_update

// optional .rf_phreaker.protobuf.rp_base base = 1;
inline bool rp_wcdma_update::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
inline void rp_wcdma_update::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_base& rp_wcdma_update::base() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_update.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::rf_phreaker::protobuf::rp_base* rp_wcdma_update::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::rf_phreaker::protobuf::rp_base;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_update.base)
  return base_;
}
inline ::rf_phreaker::protobuf::rp_base* rp_wcdma_update::release_base() {
  
  ::rf_phreaker::protobuf::rp_base* temp = base_;
  base_ = NULL;
  return temp;
}
inline void rp_wcdma_update::set_allocated_base(::rf_phreaker::protobuf::rp_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_wcdma_update.base)
}

// repeated .rf_phreaker.protobuf.rp_wcdma wcdma = 2;
inline int rp_wcdma_update::wcdma_size() const {
  return wcdma_.size();
}
inline void rp_wcdma_update::clear_wcdma() {
  wcdma_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_wcdma& rp_wcdma_update::wcdma(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_wcdma_update.wcdma)
  return wcdma_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_wcdma* rp_wcdma_update::mutable_wcdma(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_wcdma_update.wcdma)
  return wcdma_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_wcdma* rp_wcdma_update::add_wcdma() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_wcdma_update.wcdma)
  return wcdma_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma >*
rp_wcdma_update::mutable_wcdma() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_wcdma_update.wcdma)
  return &wcdma_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_wcdma >&
rp_wcdma_update::wcdma() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_wcdma_update.wcdma)
  return wcdma_;
}

// -------------------------------------------------------------------

// rp_lte_scheduling_info

// optional int32 periodicity_in_frames = 1;
inline void rp_lte_scheduling_info::clear_periodicity_in_frames() {
  periodicity_in_frames_ = 0;
}
inline ::google::protobuf::int32 rp_lte_scheduling_info::periodicity_in_frames() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_scheduling_info.periodicity_in_frames)
  return periodicity_in_frames_;
}
inline void rp_lte_scheduling_info::set_periodicity_in_frames(::google::protobuf::int32 value) {
  
  periodicity_in_frames_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_scheduling_info.periodicity_in_frames)
}

// repeated .rf_phreaker.protobuf.rp_lte_sib_type sibs = 3;
inline int rp_lte_scheduling_info::sibs_size() const {
  return sibs_.size();
}
inline void rp_lte_scheduling_info::clear_sibs() {
  sibs_.Clear();
}
inline ::rf_phreaker::protobuf::rp_lte_sib_type rp_lte_scheduling_info::sibs(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_scheduling_info.sibs)
  return static_cast< ::rf_phreaker::protobuf::rp_lte_sib_type >(sibs_.Get(index));
}
inline void rp_lte_scheduling_info::set_sibs(int index, ::rf_phreaker::protobuf::rp_lte_sib_type value) {
  sibs_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_scheduling_info.sibs)
}
inline void rp_lte_scheduling_info::add_sibs(::rf_phreaker::protobuf::rp_lte_sib_type value) {
  sibs_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_scheduling_info.sibs)
}
inline const ::google::protobuf::RepeatedField<int>&
rp_lte_scheduling_info::sibs() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_scheduling_info.sibs)
  return sibs_;
}
inline ::google::protobuf::RepeatedField<int>*
rp_lte_scheduling_info::mutable_sibs() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_scheduling_info.sibs)
  return &sibs_;
}

// -------------------------------------------------------------------

// rp_lte_sib1

// repeated .rf_phreaker.protobuf.rp_plmn multiple_plmns = 2;
inline int rp_lte_sib1::multiple_plmns_size() const {
  return multiple_plmns_.size();
}
inline void rp_lte_sib1::clear_multiple_plmns() {
  multiple_plmns_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_plmn& rp_lte_sib1::multiple_plmns(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib1.multiple_plmns)
  return multiple_plmns_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_plmn* rp_lte_sib1::mutable_multiple_plmns(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib1.multiple_plmns)
  return multiple_plmns_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_plmn* rp_lte_sib1::add_multiple_plmns() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_sib1.multiple_plmns)
  return multiple_plmns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_plmn >*
rp_lte_sib1::mutable_multiple_plmns() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_sib1.multiple_plmns)
  return &multiple_plmns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_plmn >&
rp_lte_sib1::multiple_plmns() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_sib1.multiple_plmns)
  return multiple_plmns_;
}

// optional int32 tac = 3;
inline void rp_lte_sib1::clear_tac() {
  tac_ = 0;
}
inline ::google::protobuf::int32 rp_lte_sib1::tac() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib1.tac)
  return tac_;
}
inline void rp_lte_sib1::set_tac(::google::protobuf::int32 value) {
  
  tac_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_sib1.tac)
}

// optional int32 cid = 4;
inline void rp_lte_sib1::clear_cid() {
  cid_ = 0;
}
inline ::google::protobuf::int32 rp_lte_sib1::cid() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib1.cid)
  return cid_;
}
inline void rp_lte_sib1::set_cid(::google::protobuf::int32 value) {
  
  cid_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_sib1.cid)
}

// repeated .rf_phreaker.protobuf.rp_lte_scheduling_info scheduling_info = 5;
inline int rp_lte_sib1::scheduling_info_size() const {
  return scheduling_info_.size();
}
inline void rp_lte_sib1::clear_scheduling_info() {
  scheduling_info_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_lte_scheduling_info& rp_lte_sib1::scheduling_info(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib1.scheduling_info)
  return scheduling_info_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_lte_scheduling_info* rp_lte_sib1::mutable_scheduling_info(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib1.scheduling_info)
  return scheduling_info_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_lte_scheduling_info* rp_lte_sib1::add_scheduling_info() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_sib1.scheduling_info)
  return scheduling_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_scheduling_info >*
rp_lte_sib1::mutable_scheduling_info() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_sib1.scheduling_info)
  return &scheduling_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_scheduling_info >&
rp_lte_sib1::scheduling_info() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_sib1.scheduling_info)
  return scheduling_info_;
}

// optional int32 si_window_length_ms = 6;
inline void rp_lte_sib1::clear_si_window_length_ms() {
  si_window_length_ms_ = 0;
}
inline ::google::protobuf::int32 rp_lte_sib1::si_window_length_ms() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib1.si_window_length_ms)
  return si_window_length_ms_;
}
inline void rp_lte_sib1::set_si_window_length_ms(::google::protobuf::int32 value) {
  
  si_window_length_ms_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_sib1.si_window_length_ms)
}

// -------------------------------------------------------------------

// rp_lte_cell_reselection_serving_freq_info

// optional int32 s_non_intra_search = 1;
inline void rp_lte_cell_reselection_serving_freq_info::clear_s_non_intra_search() {
  s_non_intra_search_ = 0;
}
inline ::google::protobuf::int32 rp_lte_cell_reselection_serving_freq_info::s_non_intra_search() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info.s_non_intra_search)
  return s_non_intra_search_;
}
inline void rp_lte_cell_reselection_serving_freq_info::set_s_non_intra_search(::google::protobuf::int32 value) {
  
  s_non_intra_search_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info.s_non_intra_search)
}

// optional int32 threshold_serving_low = 2;
inline void rp_lte_cell_reselection_serving_freq_info::clear_threshold_serving_low() {
  threshold_serving_low_ = 0;
}
inline ::google::protobuf::int32 rp_lte_cell_reselection_serving_freq_info::threshold_serving_low() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info.threshold_serving_low)
  return threshold_serving_low_;
}
inline void rp_lte_cell_reselection_serving_freq_info::set_threshold_serving_low(::google::protobuf::int32 value) {
  
  threshold_serving_low_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info.threshold_serving_low)
}

// optional int32 cell_reselection_priority = 3;
inline void rp_lte_cell_reselection_serving_freq_info::clear_cell_reselection_priority() {
  cell_reselection_priority_ = 0;
}
inline ::google::protobuf::int32 rp_lte_cell_reselection_serving_freq_info::cell_reselection_priority() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info.cell_reselection_priority)
  return cell_reselection_priority_;
}
inline void rp_lte_cell_reselection_serving_freq_info::set_cell_reselection_priority(::google::protobuf::int32 value) {
  
  cell_reselection_priority_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info.cell_reselection_priority)
}

// -------------------------------------------------------------------

// rp_lte_s_search_v920

// optional int32 p = 1;
inline void rp_lte_s_search_v920::clear_p() {
  p_ = 0;
}
inline ::google::protobuf::int32 rp_lte_s_search_v920::p() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_s_search_v920.p)
  return p_;
}
inline void rp_lte_s_search_v920::set_p(::google::protobuf::int32 value) {
  
  p_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_s_search_v920.p)
}

// optional int32 q = 2;
inline void rp_lte_s_search_v920::clear_q() {
  q_ = 0;
}
inline ::google::protobuf::int32 rp_lte_s_search_v920::q() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_s_search_v920.q)
  return q_;
}
inline void rp_lte_s_search_v920::set_q(::google::protobuf::int32 value) {
  
  q_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_s_search_v920.q)
}

// -------------------------------------------------------------------

// rp_lte_sib3

// optional .rf_phreaker.protobuf.rp_lte_cell_reselection_serving_freq_info cell_reselection_serving_freq_info = 2;
inline bool rp_lte_sib3::has_cell_reselection_serving_freq_info() const {
  return !_is_default_instance_ && cell_reselection_serving_freq_info_ != NULL;
}
inline void rp_lte_sib3::clear_cell_reselection_serving_freq_info() {
  if (GetArenaNoVirtual() == NULL && cell_reselection_serving_freq_info_ != NULL) delete cell_reselection_serving_freq_info_;
  cell_reselection_serving_freq_info_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info& rp_lte_sib3::cell_reselection_serving_freq_info() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib3.cell_reselection_serving_freq_info)
  return cell_reselection_serving_freq_info_ != NULL ? *cell_reselection_serving_freq_info_ : *default_instance_->cell_reselection_serving_freq_info_;
}
inline ::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info* rp_lte_sib3::mutable_cell_reselection_serving_freq_info() {
  
  if (cell_reselection_serving_freq_info_ == NULL) {
    cell_reselection_serving_freq_info_ = new ::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib3.cell_reselection_serving_freq_info)
  return cell_reselection_serving_freq_info_;
}
inline ::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info* rp_lte_sib3::release_cell_reselection_serving_freq_info() {
  
  ::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info* temp = cell_reselection_serving_freq_info_;
  cell_reselection_serving_freq_info_ = NULL;
  return temp;
}
inline void rp_lte_sib3::set_allocated_cell_reselection_serving_freq_info(::rf_phreaker::protobuf::rp_lte_cell_reselection_serving_freq_info* cell_reselection_serving_freq_info) {
  delete cell_reselection_serving_freq_info_;
  cell_reselection_serving_freq_info_ = cell_reselection_serving_freq_info;
  if (cell_reselection_serving_freq_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_sib3.cell_reselection_serving_freq_info)
}

// optional int32 intra_freq_cell_reselection_info_s_intra_search = 3;
inline void rp_lte_sib3::clear_intra_freq_cell_reselection_info_s_intra_search() {
  intra_freq_cell_reselection_info_s_intra_search_ = 0;
}
inline ::google::protobuf::int32 rp_lte_sib3::intra_freq_cell_reselection_info_s_intra_search() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib3.intra_freq_cell_reselection_info_s_intra_search)
  return intra_freq_cell_reselection_info_s_intra_search_;
}
inline void rp_lte_sib3::set_intra_freq_cell_reselection_info_s_intra_search(::google::protobuf::int32 value) {
  
  intra_freq_cell_reselection_info_s_intra_search_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_sib3.intra_freq_cell_reselection_info_s_intra_search)
}

// optional .rf_phreaker.protobuf.rp_lte_s_search_v920 s_intra_search_v920 = 4;
inline bool rp_lte_sib3::has_s_intra_search_v920() const {
  return !_is_default_instance_ && s_intra_search_v920_ != NULL;
}
inline void rp_lte_sib3::clear_s_intra_search_v920() {
  if (GetArenaNoVirtual() == NULL && s_intra_search_v920_ != NULL) delete s_intra_search_v920_;
  s_intra_search_v920_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_lte_s_search_v920& rp_lte_sib3::s_intra_search_v920() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib3.s_intra_search_v920)
  return s_intra_search_v920_ != NULL ? *s_intra_search_v920_ : *default_instance_->s_intra_search_v920_;
}
inline ::rf_phreaker::protobuf::rp_lte_s_search_v920* rp_lte_sib3::mutable_s_intra_search_v920() {
  
  if (s_intra_search_v920_ == NULL) {
    s_intra_search_v920_ = new ::rf_phreaker::protobuf::rp_lte_s_search_v920;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib3.s_intra_search_v920)
  return s_intra_search_v920_;
}
inline ::rf_phreaker::protobuf::rp_lte_s_search_v920* rp_lte_sib3::release_s_intra_search_v920() {
  
  ::rf_phreaker::protobuf::rp_lte_s_search_v920* temp = s_intra_search_v920_;
  s_intra_search_v920_ = NULL;
  return temp;
}
inline void rp_lte_sib3::set_allocated_s_intra_search_v920(::rf_phreaker::protobuf::rp_lte_s_search_v920* s_intra_search_v920) {
  delete s_intra_search_v920_;
  s_intra_search_v920_ = s_intra_search_v920;
  if (s_intra_search_v920) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_sib3.s_intra_search_v920)
}

// optional .rf_phreaker.protobuf.rp_lte_s_search_v920 s_non_intra_search_v920 = 5;
inline bool rp_lte_sib3::has_s_non_intra_search_v920() const {
  return !_is_default_instance_ && s_non_intra_search_v920_ != NULL;
}
inline void rp_lte_sib3::clear_s_non_intra_search_v920() {
  if (GetArenaNoVirtual() == NULL && s_non_intra_search_v920_ != NULL) delete s_non_intra_search_v920_;
  s_non_intra_search_v920_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_lte_s_search_v920& rp_lte_sib3::s_non_intra_search_v920() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib3.s_non_intra_search_v920)
  return s_non_intra_search_v920_ != NULL ? *s_non_intra_search_v920_ : *default_instance_->s_non_intra_search_v920_;
}
inline ::rf_phreaker::protobuf::rp_lte_s_search_v920* rp_lte_sib3::mutable_s_non_intra_search_v920() {
  
  if (s_non_intra_search_v920_ == NULL) {
    s_non_intra_search_v920_ = new ::rf_phreaker::protobuf::rp_lte_s_search_v920;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib3.s_non_intra_search_v920)
  return s_non_intra_search_v920_;
}
inline ::rf_phreaker::protobuf::rp_lte_s_search_v920* rp_lte_sib3::release_s_non_intra_search_v920() {
  
  ::rf_phreaker::protobuf::rp_lte_s_search_v920* temp = s_non_intra_search_v920_;
  s_non_intra_search_v920_ = NULL;
  return temp;
}
inline void rp_lte_sib3::set_allocated_s_non_intra_search_v920(::rf_phreaker::protobuf::rp_lte_s_search_v920* s_non_intra_search_v920) {
  delete s_non_intra_search_v920_;
  s_non_intra_search_v920_ = s_non_intra_search_v920;
  if (s_non_intra_search_v920) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_sib3.s_non_intra_search_v920)
}

// optional int32 threshold_serving_low_q = 6;
inline void rp_lte_sib3::clear_threshold_serving_low_q() {
  threshold_serving_low_q_ = 0;
}
inline ::google::protobuf::int32 rp_lte_sib3::threshold_serving_low_q() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib3.threshold_serving_low_q)
  return threshold_serving_low_q_;
}
inline void rp_lte_sib3::set_threshold_serving_low_q(::google::protobuf::int32 value) {
  
  threshold_serving_low_q_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_sib3.threshold_serving_low_q)
}

// -------------------------------------------------------------------

// rp_lte_physical_cellid_range

// optional int32 start = 1;
inline void rp_lte_physical_cellid_range::clear_start() {
  start_ = 0;
}
inline ::google::protobuf::int32 rp_lte_physical_cellid_range::start() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_physical_cellid_range.start)
  return start_;
}
inline void rp_lte_physical_cellid_range::set_start(::google::protobuf::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_physical_cellid_range.start)
}

// optional int32 range = 2;
inline void rp_lte_physical_cellid_range::clear_range() {
  range_ = 0;
}
inline ::google::protobuf::int32 rp_lte_physical_cellid_range::range() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_physical_cellid_range.range)
  return range_;
}
inline void rp_lte_physical_cellid_range::set_range(::google::protobuf::int32 value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_physical_cellid_range.range)
}

// -------------------------------------------------------------------

// rp_lte_neighbor_cell

// optional int32 physical_cell_id = 1;
inline void rp_lte_neighbor_cell::clear_physical_cell_id() {
  physical_cell_id_ = 0;
}
inline ::google::protobuf::int32 rp_lte_neighbor_cell::physical_cell_id() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_neighbor_cell.physical_cell_id)
  return physical_cell_id_;
}
inline void rp_lte_neighbor_cell::set_physical_cell_id(::google::protobuf::int32 value) {
  
  physical_cell_id_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_neighbor_cell.physical_cell_id)
}

// optional int32 q_offset_cell = 2;
inline void rp_lte_neighbor_cell::clear_q_offset_cell() {
  q_offset_cell_ = 0;
}
inline ::google::protobuf::int32 rp_lte_neighbor_cell::q_offset_cell() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_neighbor_cell.q_offset_cell)
  return q_offset_cell_;
}
inline void rp_lte_neighbor_cell::set_q_offset_cell(::google::protobuf::int32 value) {
  
  q_offset_cell_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_neighbor_cell.q_offset_cell)
}

// -------------------------------------------------------------------

// rp_lte_sib4

// repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell intra_freq_neighbor_cell_list = 2;
inline int rp_lte_sib4::intra_freq_neighbor_cell_list_size() const {
  return intra_freq_neighbor_cell_list_.size();
}
inline void rp_lte_sib4::clear_intra_freq_neighbor_cell_list() {
  intra_freq_neighbor_cell_list_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_lte_neighbor_cell& rp_lte_sib4::intra_freq_neighbor_cell_list(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_neighbor_cell_list)
  return intra_freq_neighbor_cell_list_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_lte_neighbor_cell* rp_lte_sib4::mutable_intra_freq_neighbor_cell_list(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_neighbor_cell_list)
  return intra_freq_neighbor_cell_list_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_lte_neighbor_cell* rp_lte_sib4::add_intra_freq_neighbor_cell_list() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_neighbor_cell_list)
  return intra_freq_neighbor_cell_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell >*
rp_lte_sib4::mutable_intra_freq_neighbor_cell_list() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_neighbor_cell_list)
  return &intra_freq_neighbor_cell_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell >&
rp_lte_sib4::intra_freq_neighbor_cell_list() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_neighbor_cell_list)
  return intra_freq_neighbor_cell_list_;
}

// repeated .rf_phreaker.protobuf.rp_lte_physical_cellid_range intra_freq_black_cell_list = 3;
inline int rp_lte_sib4::intra_freq_black_cell_list_size() const {
  return intra_freq_black_cell_list_.size();
}
inline void rp_lte_sib4::clear_intra_freq_black_cell_list() {
  intra_freq_black_cell_list_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_lte_physical_cellid_range& rp_lte_sib4::intra_freq_black_cell_list(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_black_cell_list)
  return intra_freq_black_cell_list_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_lte_physical_cellid_range* rp_lte_sib4::mutable_intra_freq_black_cell_list(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_black_cell_list)
  return intra_freq_black_cell_list_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_lte_physical_cellid_range* rp_lte_sib4::add_intra_freq_black_cell_list() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_black_cell_list)
  return intra_freq_black_cell_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_physical_cellid_range >*
rp_lte_sib4::mutable_intra_freq_black_cell_list() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_black_cell_list)
  return &intra_freq_black_cell_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_physical_cellid_range >&
rp_lte_sib4::intra_freq_black_cell_list() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_sib4.intra_freq_black_cell_list)
  return intra_freq_black_cell_list_;
}

// optional .rf_phreaker.protobuf.rp_lte_physical_cellid_range csg_physical_cellid_range = 4;
inline bool rp_lte_sib4::has_csg_physical_cellid_range() const {
  return !_is_default_instance_ && csg_physical_cellid_range_ != NULL;
}
inline void rp_lte_sib4::clear_csg_physical_cellid_range() {
  if (GetArenaNoVirtual() == NULL && csg_physical_cellid_range_ != NULL) delete csg_physical_cellid_range_;
  csg_physical_cellid_range_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_lte_physical_cellid_range& rp_lte_sib4::csg_physical_cellid_range() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib4.csg_physical_cellid_range)
  return csg_physical_cellid_range_ != NULL ? *csg_physical_cellid_range_ : *default_instance_->csg_physical_cellid_range_;
}
inline ::rf_phreaker::protobuf::rp_lte_physical_cellid_range* rp_lte_sib4::mutable_csg_physical_cellid_range() {
  
  if (csg_physical_cellid_range_ == NULL) {
    csg_physical_cellid_range_ = new ::rf_phreaker::protobuf::rp_lte_physical_cellid_range;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib4.csg_physical_cellid_range)
  return csg_physical_cellid_range_;
}
inline ::rf_phreaker::protobuf::rp_lte_physical_cellid_range* rp_lte_sib4::release_csg_physical_cellid_range() {
  
  ::rf_phreaker::protobuf::rp_lte_physical_cellid_range* temp = csg_physical_cellid_range_;
  csg_physical_cellid_range_ = NULL;
  return temp;
}
inline void rp_lte_sib4::set_allocated_csg_physical_cellid_range(::rf_phreaker::protobuf::rp_lte_physical_cellid_range* csg_physical_cellid_range) {
  delete csg_physical_cellid_range_;
  csg_physical_cellid_range_ = csg_physical_cellid_range;
  if (csg_physical_cellid_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_sib4.csg_physical_cellid_range)
}

// -------------------------------------------------------------------

// rp_lte_inter_freq_carrier_freq_info

// optional int32 downlink_arfcn_value_eutra = 1;
inline void rp_lte_inter_freq_carrier_freq_info::clear_downlink_arfcn_value_eutra() {
  downlink_arfcn_value_eutra_ = 0;
}
inline ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::downlink_arfcn_value_eutra() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.downlink_arfcn_value_eutra)
  return downlink_arfcn_value_eutra_;
}
inline void rp_lte_inter_freq_carrier_freq_info::set_downlink_arfcn_value_eutra(::google::protobuf::int32 value) {
  
  downlink_arfcn_value_eutra_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.downlink_arfcn_value_eutra)
}

// optional int32 q_rx_lev_min = 2;
inline void rp_lte_inter_freq_carrier_freq_info::clear_q_rx_lev_min() {
  q_rx_lev_min_ = 0;
}
inline ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::q_rx_lev_min() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.q_rx_lev_min)
  return q_rx_lev_min_;
}
inline void rp_lte_inter_freq_carrier_freq_info::set_q_rx_lev_min(::google::protobuf::int32 value) {
  
  q_rx_lev_min_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.q_rx_lev_min)
}

// optional int32 q_offset_freq = 3;
inline void rp_lte_inter_freq_carrier_freq_info::clear_q_offset_freq() {
  q_offset_freq_ = 0;
}
inline ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::q_offset_freq() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.q_offset_freq)
  return q_offset_freq_;
}
inline void rp_lte_inter_freq_carrier_freq_info::set_q_offset_freq(::google::protobuf::int32 value) {
  
  q_offset_freq_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.q_offset_freq)
}

// optional int32 allowed_measurement_bandwidth = 4;
inline void rp_lte_inter_freq_carrier_freq_info::clear_allowed_measurement_bandwidth() {
  allowed_measurement_bandwidth_ = 0;
}
inline ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::allowed_measurement_bandwidth() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.allowed_measurement_bandwidth)
  return allowed_measurement_bandwidth_;
}
inline void rp_lte_inter_freq_carrier_freq_info::set_allowed_measurement_bandwidth(::google::protobuf::int32 value) {
  
  allowed_measurement_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.allowed_measurement_bandwidth)
}

// optional bool presence_antenna_port_1 = 5;
inline void rp_lte_inter_freq_carrier_freq_info::clear_presence_antenna_port_1() {
  presence_antenna_port_1_ = false;
}
inline bool rp_lte_inter_freq_carrier_freq_info::presence_antenna_port_1() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.presence_antenna_port_1)
  return presence_antenna_port_1_;
}
inline void rp_lte_inter_freq_carrier_freq_info::set_presence_antenna_port_1(bool value) {
  
  presence_antenna_port_1_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.presence_antenna_port_1)
}

// optional int32 threshold_x_high = 6;
inline void rp_lte_inter_freq_carrier_freq_info::clear_threshold_x_high() {
  threshold_x_high_ = 0;
}
inline ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::threshold_x_high() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.threshold_x_high)
  return threshold_x_high_;
}
inline void rp_lte_inter_freq_carrier_freq_info::set_threshold_x_high(::google::protobuf::int32 value) {
  
  threshold_x_high_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.threshold_x_high)
}

// optional int32 threshold_x_low = 7;
inline void rp_lte_inter_freq_carrier_freq_info::clear_threshold_x_low() {
  threshold_x_low_ = 0;
}
inline ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::threshold_x_low() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.threshold_x_low)
  return threshold_x_low_;
}
inline void rp_lte_inter_freq_carrier_freq_info::set_threshold_x_low(::google::protobuf::int32 value) {
  
  threshold_x_low_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.threshold_x_low)
}

// optional int32 threshold_x_high_q_r9 = 8;
inline void rp_lte_inter_freq_carrier_freq_info::clear_threshold_x_high_q_r9() {
  threshold_x_high_q_r9_ = 0;
}
inline ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::threshold_x_high_q_r9() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.threshold_x_high_q_r9)
  return threshold_x_high_q_r9_;
}
inline void rp_lte_inter_freq_carrier_freq_info::set_threshold_x_high_q_r9(::google::protobuf::int32 value) {
  
  threshold_x_high_q_r9_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.threshold_x_high_q_r9)
}

// optional int32 threshold_x_low_q_r9 = 9;
inline void rp_lte_inter_freq_carrier_freq_info::clear_threshold_x_low_q_r9() {
  threshold_x_low_q_r9_ = 0;
}
inline ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::threshold_x_low_q_r9() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.threshold_x_low_q_r9)
  return threshold_x_low_q_r9_;
}
inline void rp_lte_inter_freq_carrier_freq_info::set_threshold_x_low_q_r9(::google::protobuf::int32 value) {
  
  threshold_x_low_q_r9_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.threshold_x_low_q_r9)
}

// optional int32 cell_reselection_priority = 10;
inline void rp_lte_inter_freq_carrier_freq_info::clear_cell_reselection_priority() {
  cell_reselection_priority_ = 0;
}
inline ::google::protobuf::int32 rp_lte_inter_freq_carrier_freq_info::cell_reselection_priority() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.cell_reselection_priority)
  return cell_reselection_priority_;
}
inline void rp_lte_inter_freq_carrier_freq_info::set_cell_reselection_priority(::google::protobuf::int32 value) {
  
  cell_reselection_priority_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.cell_reselection_priority)
}

// repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell inter_freq_neighbor_cell_list = 11;
inline int rp_lte_inter_freq_carrier_freq_info::inter_freq_neighbor_cell_list_size() const {
  return inter_freq_neighbor_cell_list_.size();
}
inline void rp_lte_inter_freq_carrier_freq_info::clear_inter_freq_neighbor_cell_list() {
  inter_freq_neighbor_cell_list_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_lte_neighbor_cell& rp_lte_inter_freq_carrier_freq_info::inter_freq_neighbor_cell_list(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_neighbor_cell_list)
  return inter_freq_neighbor_cell_list_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_lte_neighbor_cell* rp_lte_inter_freq_carrier_freq_info::mutable_inter_freq_neighbor_cell_list(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_neighbor_cell_list)
  return inter_freq_neighbor_cell_list_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_lte_neighbor_cell* rp_lte_inter_freq_carrier_freq_info::add_inter_freq_neighbor_cell_list() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_neighbor_cell_list)
  return inter_freq_neighbor_cell_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell >*
rp_lte_inter_freq_carrier_freq_info::mutable_inter_freq_neighbor_cell_list() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_neighbor_cell_list)
  return &inter_freq_neighbor_cell_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell >&
rp_lte_inter_freq_carrier_freq_info::inter_freq_neighbor_cell_list() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_neighbor_cell_list)
  return inter_freq_neighbor_cell_list_;
}

// repeated .rf_phreaker.protobuf.rp_lte_physical_cellid_range inter_freq_black_cell_list = 12;
inline int rp_lte_inter_freq_carrier_freq_info::inter_freq_black_cell_list_size() const {
  return inter_freq_black_cell_list_.size();
}
inline void rp_lte_inter_freq_carrier_freq_info::clear_inter_freq_black_cell_list() {
  inter_freq_black_cell_list_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_lte_physical_cellid_range& rp_lte_inter_freq_carrier_freq_info::inter_freq_black_cell_list(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_black_cell_list)
  return inter_freq_black_cell_list_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_lte_physical_cellid_range* rp_lte_inter_freq_carrier_freq_info::mutable_inter_freq_black_cell_list(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_black_cell_list)
  return inter_freq_black_cell_list_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_lte_physical_cellid_range* rp_lte_inter_freq_carrier_freq_info::add_inter_freq_black_cell_list() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_black_cell_list)
  return inter_freq_black_cell_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_physical_cellid_range >*
rp_lte_inter_freq_carrier_freq_info::mutable_inter_freq_black_cell_list() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_black_cell_list)
  return &inter_freq_black_cell_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_physical_cellid_range >&
rp_lte_inter_freq_carrier_freq_info::inter_freq_black_cell_list() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info.inter_freq_black_cell_list)
  return inter_freq_black_cell_list_;
}

// -------------------------------------------------------------------

// rp_lte_sib5

// repeated .rf_phreaker.protobuf.rp_lte_inter_freq_carrier_freq_info inter_freq_carrier_info_list = 2;
inline int rp_lte_sib5::inter_freq_carrier_info_list_size() const {
  return inter_freq_carrier_info_list_.size();
}
inline void rp_lte_sib5::clear_inter_freq_carrier_info_list() {
  inter_freq_carrier_info_list_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_lte_inter_freq_carrier_freq_info& rp_lte_sib5::inter_freq_carrier_info_list(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib5.inter_freq_carrier_info_list)
  return inter_freq_carrier_info_list_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_lte_inter_freq_carrier_freq_info* rp_lte_sib5::mutable_inter_freq_carrier_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib5.inter_freq_carrier_info_list)
  return inter_freq_carrier_info_list_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_lte_inter_freq_carrier_freq_info* rp_lte_sib5::add_inter_freq_carrier_info_list() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_sib5.inter_freq_carrier_info_list)
  return inter_freq_carrier_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_inter_freq_carrier_freq_info >*
rp_lte_sib5::mutable_inter_freq_carrier_info_list() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_sib5.inter_freq_carrier_info_list)
  return &inter_freq_carrier_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_inter_freq_carrier_freq_info >&
rp_lte_sib5::inter_freq_carrier_info_list() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_sib5.inter_freq_carrier_info_list)
  return inter_freq_carrier_info_list_;
}

// -------------------------------------------------------------------

// rp_lte_carrier_freq_utra

// optional int32 arfcn_value_utra = 1;
inline void rp_lte_carrier_freq_utra::clear_arfcn_value_utra() {
  arfcn_value_utra_ = 0;
}
inline ::google::protobuf::int32 rp_lte_carrier_freq_utra::arfcn_value_utra() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.arfcn_value_utra)
  return arfcn_value_utra_;
}
inline void rp_lte_carrier_freq_utra::set_arfcn_value_utra(::google::protobuf::int32 value) {
  
  arfcn_value_utra_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.arfcn_value_utra)
}

// optional int32 threshold_x_low = 2;
inline void rp_lte_carrier_freq_utra::clear_threshold_x_low() {
  threshold_x_low_ = 0;
}
inline ::google::protobuf::int32 rp_lte_carrier_freq_utra::threshold_x_low() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.threshold_x_low)
  return threshold_x_low_;
}
inline void rp_lte_carrier_freq_utra::set_threshold_x_low(::google::protobuf::int32 value) {
  
  threshold_x_low_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.threshold_x_low)
}

// optional int32 threshold_x_high = 3;
inline void rp_lte_carrier_freq_utra::clear_threshold_x_high() {
  threshold_x_high_ = 0;
}
inline ::google::protobuf::int32 rp_lte_carrier_freq_utra::threshold_x_high() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.threshold_x_high)
  return threshold_x_high_;
}
inline void rp_lte_carrier_freq_utra::set_threshold_x_high(::google::protobuf::int32 value) {
  
  threshold_x_high_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.threshold_x_high)
}

// optional int32 threshold_x_low_q_r9 = 4;
inline void rp_lte_carrier_freq_utra::clear_threshold_x_low_q_r9() {
  threshold_x_low_q_r9_ = 0;
}
inline ::google::protobuf::int32 rp_lte_carrier_freq_utra::threshold_x_low_q_r9() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.threshold_x_low_q_r9)
  return threshold_x_low_q_r9_;
}
inline void rp_lte_carrier_freq_utra::set_threshold_x_low_q_r9(::google::protobuf::int32 value) {
  
  threshold_x_low_q_r9_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.threshold_x_low_q_r9)
}

// optional int32 threshold_x_high_q_r9 = 5;
inline void rp_lte_carrier_freq_utra::clear_threshold_x_high_q_r9() {
  threshold_x_high_q_r9_ = 0;
}
inline ::google::protobuf::int32 rp_lte_carrier_freq_utra::threshold_x_high_q_r9() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.threshold_x_high_q_r9)
  return threshold_x_high_q_r9_;
}
inline void rp_lte_carrier_freq_utra::set_threshold_x_high_q_r9(::google::protobuf::int32 value) {
  
  threshold_x_high_q_r9_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.threshold_x_high_q_r9)
}

// optional int32 cell_reselection_priority = 6;
inline void rp_lte_carrier_freq_utra::clear_cell_reselection_priority() {
  cell_reselection_priority_ = 0;
}
inline ::google::protobuf::int32 rp_lte_carrier_freq_utra::cell_reselection_priority() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.cell_reselection_priority)
  return cell_reselection_priority_;
}
inline void rp_lte_carrier_freq_utra::set_cell_reselection_priority(::google::protobuf::int32 value) {
  
  cell_reselection_priority_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_carrier_freq_utra.cell_reselection_priority)
}

// -------------------------------------------------------------------

// rp_lte_sib6

// repeated .rf_phreaker.protobuf.rp_lte_carrier_freq_utra carrier_freq_list_utra_fdd = 2;
inline int rp_lte_sib6::carrier_freq_list_utra_fdd_size() const {
  return carrier_freq_list_utra_fdd_.size();
}
inline void rp_lte_sib6::clear_carrier_freq_list_utra_fdd() {
  carrier_freq_list_utra_fdd_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra& rp_lte_sib6::carrier_freq_list_utra_fdd(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_fdd)
  return carrier_freq_list_utra_fdd_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra* rp_lte_sib6::mutable_carrier_freq_list_utra_fdd(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_fdd)
  return carrier_freq_list_utra_fdd_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra* rp_lte_sib6::add_carrier_freq_list_utra_fdd() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_fdd)
  return carrier_freq_list_utra_fdd_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra >*
rp_lte_sib6::mutable_carrier_freq_list_utra_fdd() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_fdd)
  return &carrier_freq_list_utra_fdd_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra >&
rp_lte_sib6::carrier_freq_list_utra_fdd() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_fdd)
  return carrier_freq_list_utra_fdd_;
}

// repeated .rf_phreaker.protobuf.rp_lte_carrier_freq_utra carrier_freq_list_utra_tdd = 3;
inline int rp_lte_sib6::carrier_freq_list_utra_tdd_size() const {
  return carrier_freq_list_utra_tdd_.size();
}
inline void rp_lte_sib6::clear_carrier_freq_list_utra_tdd() {
  carrier_freq_list_utra_tdd_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra& rp_lte_sib6::carrier_freq_list_utra_tdd(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_tdd)
  return carrier_freq_list_utra_tdd_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra* rp_lte_sib6::mutable_carrier_freq_list_utra_tdd(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_tdd)
  return carrier_freq_list_utra_tdd_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra* rp_lte_sib6::add_carrier_freq_list_utra_tdd() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_tdd)
  return carrier_freq_list_utra_tdd_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra >*
rp_lte_sib6::mutable_carrier_freq_list_utra_tdd() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_tdd)
  return &carrier_freq_list_utra_tdd_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freq_utra >&
rp_lte_sib6::carrier_freq_list_utra_tdd() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_sib6.carrier_freq_list_utra_tdd)
  return carrier_freq_list_utra_tdd_;
}

// -------------------------------------------------------------------

// rp_lte_carrier_freqs_geran

// optional .rf_phreaker.protobuf.rp_band_indicator_type band_indicator = 1;
inline void rp_lte_carrier_freqs_geran::clear_band_indicator() {
  band_indicator_ = 0;
}
inline ::rf_phreaker::protobuf::rp_band_indicator_type rp_lte_carrier_freqs_geran::band_indicator() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran.band_indicator)
  return static_cast< ::rf_phreaker::protobuf::rp_band_indicator_type >(band_indicator_);
}
inline void rp_lte_carrier_freqs_geran::set_band_indicator(::rf_phreaker::protobuf::rp_band_indicator_type value) {
  
  band_indicator_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran.band_indicator)
}

// repeated int32 arfcns = 2 [packed = true];
inline int rp_lte_carrier_freqs_geran::arfcns_size() const {
  return arfcns_.size();
}
inline void rp_lte_carrier_freqs_geran::clear_arfcns() {
  arfcns_.Clear();
}
inline ::google::protobuf::int32 rp_lte_carrier_freqs_geran::arfcns(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran.arfcns)
  return arfcns_.Get(index);
}
inline void rp_lte_carrier_freqs_geran::set_arfcns(int index, ::google::protobuf::int32 value) {
  arfcns_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran.arfcns)
}
inline void rp_lte_carrier_freqs_geran::add_arfcns(::google::protobuf::int32 value) {
  arfcns_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran.arfcns)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_lte_carrier_freqs_geran::arfcns() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran.arfcns)
  return arfcns_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_lte_carrier_freqs_geran::mutable_arfcns() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_carrier_freqs_geran.arfcns)
  return &arfcns_;
}

// -------------------------------------------------------------------

// rp_lte_geran_common_info

// optional int32 cell_reselection_priority = 1;
inline void rp_lte_geran_common_info::clear_cell_reselection_priority() {
  cell_reselection_priority_ = 0;
}
inline ::google::protobuf::int32 rp_lte_geran_common_info::cell_reselection_priority() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_geran_common_info.cell_reselection_priority)
  return cell_reselection_priority_;
}
inline void rp_lte_geran_common_info::set_cell_reselection_priority(::google::protobuf::int32 value) {
  
  cell_reselection_priority_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_geran_common_info.cell_reselection_priority)
}

// optional int32 threshold_x_high = 2;
inline void rp_lte_geran_common_info::clear_threshold_x_high() {
  threshold_x_high_ = 0;
}
inline ::google::protobuf::int32 rp_lte_geran_common_info::threshold_x_high() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_geran_common_info.threshold_x_high)
  return threshold_x_high_;
}
inline void rp_lte_geran_common_info::set_threshold_x_high(::google::protobuf::int32 value) {
  
  threshold_x_high_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_geran_common_info.threshold_x_high)
}

// optional int32 threshold_x_low = 3;
inline void rp_lte_geran_common_info::clear_threshold_x_low() {
  threshold_x_low_ = 0;
}
inline ::google::protobuf::int32 rp_lte_geran_common_info::threshold_x_low() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_geran_common_info.threshold_x_low)
  return threshold_x_low_;
}
inline void rp_lte_geran_common_info::set_threshold_x_low(::google::protobuf::int32 value) {
  
  threshold_x_low_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_geran_common_info.threshold_x_low)
}

// -------------------------------------------------------------------

// rp_lte_carrier_freqs_info_geran

// optional .rf_phreaker.protobuf.rp_lte_carrier_freqs_geran carrier_freqs = 1;
inline bool rp_lte_carrier_freqs_info_geran::has_carrier_freqs() const {
  return !_is_default_instance_ && carrier_freqs_ != NULL;
}
inline void rp_lte_carrier_freqs_info_geran::clear_carrier_freqs() {
  if (GetArenaNoVirtual() == NULL && carrier_freqs_ != NULL) delete carrier_freqs_;
  carrier_freqs_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran& rp_lte_carrier_freqs_info_geran::carrier_freqs() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran.carrier_freqs)
  return carrier_freqs_ != NULL ? *carrier_freqs_ : *default_instance_->carrier_freqs_;
}
inline ::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran* rp_lte_carrier_freqs_info_geran::mutable_carrier_freqs() {
  
  if (carrier_freqs_ == NULL) {
    carrier_freqs_ = new ::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran.carrier_freqs)
  return carrier_freqs_;
}
inline ::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran* rp_lte_carrier_freqs_info_geran::release_carrier_freqs() {
  
  ::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran* temp = carrier_freqs_;
  carrier_freqs_ = NULL;
  return temp;
}
inline void rp_lte_carrier_freqs_info_geran::set_allocated_carrier_freqs(::rf_phreaker::protobuf::rp_lte_carrier_freqs_geran* carrier_freqs) {
  delete carrier_freqs_;
  carrier_freqs_ = carrier_freqs;
  if (carrier_freqs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran.carrier_freqs)
}

// optional .rf_phreaker.protobuf.rp_lte_geran_common_info common_info = 2;
inline bool rp_lte_carrier_freqs_info_geran::has_common_info() const {
  return !_is_default_instance_ && common_info_ != NULL;
}
inline void rp_lte_carrier_freqs_info_geran::clear_common_info() {
  if (GetArenaNoVirtual() == NULL && common_info_ != NULL) delete common_info_;
  common_info_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_lte_geran_common_info& rp_lte_carrier_freqs_info_geran::common_info() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran.common_info)
  return common_info_ != NULL ? *common_info_ : *default_instance_->common_info_;
}
inline ::rf_phreaker::protobuf::rp_lte_geran_common_info* rp_lte_carrier_freqs_info_geran::mutable_common_info() {
  
  if (common_info_ == NULL) {
    common_info_ = new ::rf_phreaker::protobuf::rp_lte_geran_common_info;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran.common_info)
  return common_info_;
}
inline ::rf_phreaker::protobuf::rp_lte_geran_common_info* rp_lte_carrier_freqs_info_geran::release_common_info() {
  
  ::rf_phreaker::protobuf::rp_lte_geran_common_info* temp = common_info_;
  common_info_ = NULL;
  return temp;
}
inline void rp_lte_carrier_freqs_info_geran::set_allocated_common_info(::rf_phreaker::protobuf::rp_lte_geran_common_info* common_info) {
  delete common_info_;
  common_info_ = common_info;
  if (common_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran.common_info)
}

// -------------------------------------------------------------------

// rp_lte_sib7

// repeated .rf_phreaker.protobuf.rp_lte_carrier_freqs_info_geran carrier_freqs_info_list_geran = 2;
inline int rp_lte_sib7::carrier_freqs_info_list_geran_size() const {
  return carrier_freqs_info_list_geran_.size();
}
inline void rp_lte_sib7::clear_carrier_freqs_info_list_geran() {
  carrier_freqs_info_list_geran_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_lte_carrier_freqs_info_geran& rp_lte_sib7::carrier_freqs_info_list_geran(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib7.carrier_freqs_info_list_geran)
  return carrier_freqs_info_list_geran_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_lte_carrier_freqs_info_geran* rp_lte_sib7::mutable_carrier_freqs_info_list_geran(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib7.carrier_freqs_info_list_geran)
  return carrier_freqs_info_list_geran_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_lte_carrier_freqs_info_geran* rp_lte_sib7::add_carrier_freqs_info_list_geran() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_sib7.carrier_freqs_info_list_geran)
  return carrier_freqs_info_list_geran_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freqs_info_geran >*
rp_lte_sib7::mutable_carrier_freqs_info_list_geran() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_sib7.carrier_freqs_info_list_geran)
  return &carrier_freqs_info_list_geran_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_carrier_freqs_info_geran >&
rp_lte_sib7::carrier_freqs_info_list_geran() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_sib7.carrier_freqs_info_list_geran)
  return carrier_freqs_info_list_geran_;
}

// -------------------------------------------------------------------

// rp_lte_neighbor_cells_per_band_class_cdma_2000

// optional int32 arfcn_value_cdma_2000 = 1;
inline void rp_lte_neighbor_cells_per_band_class_cdma_2000::clear_arfcn_value_cdma_2000() {
  arfcn_value_cdma_2000_ = 0;
}
inline ::google::protobuf::int32 rp_lte_neighbor_cells_per_band_class_cdma_2000::arfcn_value_cdma_2000() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000.arfcn_value_cdma_2000)
  return arfcn_value_cdma_2000_;
}
inline void rp_lte_neighbor_cells_per_band_class_cdma_2000::set_arfcn_value_cdma_2000(::google::protobuf::int32 value) {
  
  arfcn_value_cdma_2000_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000.arfcn_value_cdma_2000)
}

// repeated int32 physical_cell_ids = 2 [packed = true];
inline int rp_lte_neighbor_cells_per_band_class_cdma_2000::physical_cell_ids_size() const {
  return physical_cell_ids_.size();
}
inline void rp_lte_neighbor_cells_per_band_class_cdma_2000::clear_physical_cell_ids() {
  physical_cell_ids_.Clear();
}
inline ::google::protobuf::int32 rp_lte_neighbor_cells_per_band_class_cdma_2000::physical_cell_ids(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000.physical_cell_ids)
  return physical_cell_ids_.Get(index);
}
inline void rp_lte_neighbor_cells_per_band_class_cdma_2000::set_physical_cell_ids(int index, ::google::protobuf::int32 value) {
  physical_cell_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000.physical_cell_ids)
}
inline void rp_lte_neighbor_cells_per_band_class_cdma_2000::add_physical_cell_ids(::google::protobuf::int32 value) {
  physical_cell_ids_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000.physical_cell_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rp_lte_neighbor_cells_per_band_class_cdma_2000::physical_cell_ids() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000.physical_cell_ids)
  return physical_cell_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rp_lte_neighbor_cells_per_band_class_cdma_2000::mutable_physical_cell_ids() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000.physical_cell_ids)
  return &physical_cell_ids_;
}

// -------------------------------------------------------------------

// rp_lte_neighbor_cell_cdma_2000

// optional .rf_phreaker.protobuf.rp_lte_band_class_cdma_2000_type band = 1;
inline void rp_lte_neighbor_cell_cdma_2000::clear_band() {
  band_ = 0;
}
inline ::rf_phreaker::protobuf::rp_lte_band_class_cdma_2000_type rp_lte_neighbor_cell_cdma_2000::band() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000.band)
  return static_cast< ::rf_phreaker::protobuf::rp_lte_band_class_cdma_2000_type >(band_);
}
inline void rp_lte_neighbor_cell_cdma_2000::set_band(::rf_phreaker::protobuf::rp_lte_band_class_cdma_2000_type value) {
  
  band_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000.band)
}

// repeated .rf_phreaker.protobuf.rp_lte_neighbor_cells_per_band_class_cdma_2000 neighbor_cells_per_freq_list = 2;
inline int rp_lte_neighbor_cell_cdma_2000::neighbor_cells_per_freq_list_size() const {
  return neighbor_cells_per_freq_list_.size();
}
inline void rp_lte_neighbor_cell_cdma_2000::clear_neighbor_cells_per_freq_list() {
  neighbor_cells_per_freq_list_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_lte_neighbor_cells_per_band_class_cdma_2000& rp_lte_neighbor_cell_cdma_2000::neighbor_cells_per_freq_list(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000.neighbor_cells_per_freq_list)
  return neighbor_cells_per_freq_list_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_lte_neighbor_cells_per_band_class_cdma_2000* rp_lte_neighbor_cell_cdma_2000::mutable_neighbor_cells_per_freq_list(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000.neighbor_cells_per_freq_list)
  return neighbor_cells_per_freq_list_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_lte_neighbor_cells_per_band_class_cdma_2000* rp_lte_neighbor_cell_cdma_2000::add_neighbor_cells_per_freq_list() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000.neighbor_cells_per_freq_list)
  return neighbor_cells_per_freq_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cells_per_band_class_cdma_2000 >*
rp_lte_neighbor_cell_cdma_2000::mutable_neighbor_cells_per_freq_list() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000.neighbor_cells_per_freq_list)
  return &neighbor_cells_per_freq_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cells_per_band_class_cdma_2000 >&
rp_lte_neighbor_cell_cdma_2000::neighbor_cells_per_freq_list() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000.neighbor_cells_per_freq_list)
  return neighbor_cells_per_freq_list_;
}

// -------------------------------------------------------------------

// rp_lte_cell_reselection_parameters_cmda_2000

// repeated .rf_phreaker.protobuf.rp_lte_neighbor_cell_cdma_2000 neighbor_cell_list = 1;
inline int rp_lte_cell_reselection_parameters_cmda_2000::neighbor_cell_list_size() const {
  return neighbor_cell_list_.size();
}
inline void rp_lte_cell_reselection_parameters_cmda_2000::clear_neighbor_cell_list() {
  neighbor_cell_list_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_lte_neighbor_cell_cdma_2000& rp_lte_cell_reselection_parameters_cmda_2000::neighbor_cell_list(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000.neighbor_cell_list)
  return neighbor_cell_list_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_lte_neighbor_cell_cdma_2000* rp_lte_cell_reselection_parameters_cmda_2000::mutable_neighbor_cell_list(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000.neighbor_cell_list)
  return neighbor_cell_list_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_lte_neighbor_cell_cdma_2000* rp_lte_cell_reselection_parameters_cmda_2000::add_neighbor_cell_list() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000.neighbor_cell_list)
  return neighbor_cell_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell_cdma_2000 >*
rp_lte_cell_reselection_parameters_cmda_2000::mutable_neighbor_cell_list() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000.neighbor_cell_list)
  return &neighbor_cell_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte_neighbor_cell_cdma_2000 >&
rp_lte_cell_reselection_parameters_cmda_2000::neighbor_cell_list() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000.neighbor_cell_list)
  return neighbor_cell_list_;
}

// -------------------------------------------------------------------

// rp_lte_sib8

// optional .rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000 parameters_hrpd = 2;
inline bool rp_lte_sib8::has_parameters_hrpd() const {
  return !_is_default_instance_ && parameters_hrpd_ != NULL;
}
inline void rp_lte_sib8::clear_parameters_hrpd() {
  if (GetArenaNoVirtual() == NULL && parameters_hrpd_ != NULL) delete parameters_hrpd_;
  parameters_hrpd_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000& rp_lte_sib8::parameters_hrpd() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib8.parameters_hrpd)
  return parameters_hrpd_ != NULL ? *parameters_hrpd_ : *default_instance_->parameters_hrpd_;
}
inline ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* rp_lte_sib8::mutable_parameters_hrpd() {
  
  if (parameters_hrpd_ == NULL) {
    parameters_hrpd_ = new ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib8.parameters_hrpd)
  return parameters_hrpd_;
}
inline ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* rp_lte_sib8::release_parameters_hrpd() {
  
  ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* temp = parameters_hrpd_;
  parameters_hrpd_ = NULL;
  return temp;
}
inline void rp_lte_sib8::set_allocated_parameters_hrpd(::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* parameters_hrpd) {
  delete parameters_hrpd_;
  parameters_hrpd_ = parameters_hrpd;
  if (parameters_hrpd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_sib8.parameters_hrpd)
}

// optional .rf_phreaker.protobuf.rp_lte_cell_reselection_parameters_cmda_2000 parameters_1xrtt = 3;
inline bool rp_lte_sib8::has_parameters_1xrtt() const {
  return !_is_default_instance_ && parameters_1xrtt_ != NULL;
}
inline void rp_lte_sib8::clear_parameters_1xrtt() {
  if (GetArenaNoVirtual() == NULL && parameters_1xrtt_ != NULL) delete parameters_1xrtt_;
  parameters_1xrtt_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000& rp_lte_sib8::parameters_1xrtt() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_sib8.parameters_1xrtt)
  return parameters_1xrtt_ != NULL ? *parameters_1xrtt_ : *default_instance_->parameters_1xrtt_;
}
inline ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* rp_lte_sib8::mutable_parameters_1xrtt() {
  
  if (parameters_1xrtt_ == NULL) {
    parameters_1xrtt_ = new ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_sib8.parameters_1xrtt)
  return parameters_1xrtt_;
}
inline ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* rp_lte_sib8::release_parameters_1xrtt() {
  
  ::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* temp = parameters_1xrtt_;
  parameters_1xrtt_ = NULL;
  return temp;
}
inline void rp_lte_sib8::set_allocated_parameters_1xrtt(::rf_phreaker::protobuf::rp_lte_cell_reselection_parameters_cmda_2000* parameters_1xrtt) {
  delete parameters_1xrtt_;
  parameters_1xrtt_ = parameters_1xrtt;
  if (parameters_1xrtt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_sib8.parameters_1xrtt)
}

// -------------------------------------------------------------------

// rp_lte_layer_3

// repeated .rf_phreaker.protobuf.rp_raw_layer_3 raw_layer_3 = 1;
inline int rp_lte_layer_3::raw_layer_3_size() const {
  return raw_layer_3_.size();
}
inline void rp_lte_layer_3::clear_raw_layer_3() {
  raw_layer_3_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_raw_layer_3& rp_lte_layer_3::raw_layer_3(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_layer_3.raw_layer_3)
  return raw_layer_3_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_raw_layer_3* rp_lte_layer_3::mutable_raw_layer_3(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_layer_3.raw_layer_3)
  return raw_layer_3_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_raw_layer_3* rp_lte_layer_3::add_raw_layer_3() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_layer_3.raw_layer_3)
  return raw_layer_3_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >*
rp_lte_layer_3::mutable_raw_layer_3() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_layer_3.raw_layer_3)
  return &raw_layer_3_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_raw_layer_3 >&
rp_lte_layer_3::raw_layer_3() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_layer_3.raw_layer_3)
  return raw_layer_3_;
}

// optional .rf_phreaker.protobuf.rp_lte_sib1 sib1 = 2;
inline bool rp_lte_layer_3::has_sib1() const {
  return !_is_default_instance_ && sib1_ != NULL;
}
inline void rp_lte_layer_3::clear_sib1() {
  if (GetArenaNoVirtual() == NULL && sib1_ != NULL) delete sib1_;
  sib1_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_lte_sib1& rp_lte_layer_3::sib1() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_layer_3.sib1)
  return sib1_ != NULL ? *sib1_ : *default_instance_->sib1_;
}
inline ::rf_phreaker::protobuf::rp_lte_sib1* rp_lte_layer_3::mutable_sib1() {
  
  if (sib1_ == NULL) {
    sib1_ = new ::rf_phreaker::protobuf::rp_lte_sib1;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_layer_3.sib1)
  return sib1_;
}
inline ::rf_phreaker::protobuf::rp_lte_sib1* rp_lte_layer_3::release_sib1() {
  
  ::rf_phreaker::protobuf::rp_lte_sib1* temp = sib1_;
  sib1_ = NULL;
  return temp;
}
inline void rp_lte_layer_3::set_allocated_sib1(::rf_phreaker::protobuf::rp_lte_sib1* sib1) {
  delete sib1_;
  sib1_ = sib1;
  if (sib1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_layer_3.sib1)
}

// optional .rf_phreaker.protobuf.rp_lte_sib3 sib3 = 4;
inline bool rp_lte_layer_3::has_sib3() const {
  return !_is_default_instance_ && sib3_ != NULL;
}
inline void rp_lte_layer_3::clear_sib3() {
  if (GetArenaNoVirtual() == NULL && sib3_ != NULL) delete sib3_;
  sib3_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_lte_sib3& rp_lte_layer_3::sib3() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_layer_3.sib3)
  return sib3_ != NULL ? *sib3_ : *default_instance_->sib3_;
}
inline ::rf_phreaker::protobuf::rp_lte_sib3* rp_lte_layer_3::mutable_sib3() {
  
  if (sib3_ == NULL) {
    sib3_ = new ::rf_phreaker::protobuf::rp_lte_sib3;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_layer_3.sib3)
  return sib3_;
}
inline ::rf_phreaker::protobuf::rp_lte_sib3* rp_lte_layer_3::release_sib3() {
  
  ::rf_phreaker::protobuf::rp_lte_sib3* temp = sib3_;
  sib3_ = NULL;
  return temp;
}
inline void rp_lte_layer_3::set_allocated_sib3(::rf_phreaker::protobuf::rp_lte_sib3* sib3) {
  delete sib3_;
  sib3_ = sib3;
  if (sib3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_layer_3.sib3)
}

// optional .rf_phreaker.protobuf.rp_lte_sib4 sib4 = 5;
inline bool rp_lte_layer_3::has_sib4() const {
  return !_is_default_instance_ && sib4_ != NULL;
}
inline void rp_lte_layer_3::clear_sib4() {
  if (GetArenaNoVirtual() == NULL && sib4_ != NULL) delete sib4_;
  sib4_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_lte_sib4& rp_lte_layer_3::sib4() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_layer_3.sib4)
  return sib4_ != NULL ? *sib4_ : *default_instance_->sib4_;
}
inline ::rf_phreaker::protobuf::rp_lte_sib4* rp_lte_layer_3::mutable_sib4() {
  
  if (sib4_ == NULL) {
    sib4_ = new ::rf_phreaker::protobuf::rp_lte_sib4;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_layer_3.sib4)
  return sib4_;
}
inline ::rf_phreaker::protobuf::rp_lte_sib4* rp_lte_layer_3::release_sib4() {
  
  ::rf_phreaker::protobuf::rp_lte_sib4* temp = sib4_;
  sib4_ = NULL;
  return temp;
}
inline void rp_lte_layer_3::set_allocated_sib4(::rf_phreaker::protobuf::rp_lte_sib4* sib4) {
  delete sib4_;
  sib4_ = sib4;
  if (sib4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_layer_3.sib4)
}

// optional .rf_phreaker.protobuf.rp_lte_sib5 sib5 = 6;
inline bool rp_lte_layer_3::has_sib5() const {
  return !_is_default_instance_ && sib5_ != NULL;
}
inline void rp_lte_layer_3::clear_sib5() {
  if (GetArenaNoVirtual() == NULL && sib5_ != NULL) delete sib5_;
  sib5_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_lte_sib5& rp_lte_layer_3::sib5() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_layer_3.sib5)
  return sib5_ != NULL ? *sib5_ : *default_instance_->sib5_;
}
inline ::rf_phreaker::protobuf::rp_lte_sib5* rp_lte_layer_3::mutable_sib5() {
  
  if (sib5_ == NULL) {
    sib5_ = new ::rf_phreaker::protobuf::rp_lte_sib5;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_layer_3.sib5)
  return sib5_;
}
inline ::rf_phreaker::protobuf::rp_lte_sib5* rp_lte_layer_3::release_sib5() {
  
  ::rf_phreaker::protobuf::rp_lte_sib5* temp = sib5_;
  sib5_ = NULL;
  return temp;
}
inline void rp_lte_layer_3::set_allocated_sib5(::rf_phreaker::protobuf::rp_lte_sib5* sib5) {
  delete sib5_;
  sib5_ = sib5;
  if (sib5) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_layer_3.sib5)
}

// optional .rf_phreaker.protobuf.rp_lte_sib6 sib6 = 7;
inline bool rp_lte_layer_3::has_sib6() const {
  return !_is_default_instance_ && sib6_ != NULL;
}
inline void rp_lte_layer_3::clear_sib6() {
  if (GetArenaNoVirtual() == NULL && sib6_ != NULL) delete sib6_;
  sib6_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_lte_sib6& rp_lte_layer_3::sib6() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_layer_3.sib6)
  return sib6_ != NULL ? *sib6_ : *default_instance_->sib6_;
}
inline ::rf_phreaker::protobuf::rp_lte_sib6* rp_lte_layer_3::mutable_sib6() {
  
  if (sib6_ == NULL) {
    sib6_ = new ::rf_phreaker::protobuf::rp_lte_sib6;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_layer_3.sib6)
  return sib6_;
}
inline ::rf_phreaker::protobuf::rp_lte_sib6* rp_lte_layer_3::release_sib6() {
  
  ::rf_phreaker::protobuf::rp_lte_sib6* temp = sib6_;
  sib6_ = NULL;
  return temp;
}
inline void rp_lte_layer_3::set_allocated_sib6(::rf_phreaker::protobuf::rp_lte_sib6* sib6) {
  delete sib6_;
  sib6_ = sib6;
  if (sib6) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_layer_3.sib6)
}

// optional .rf_phreaker.protobuf.rp_lte_sib7 sib7 = 8;
inline bool rp_lte_layer_3::has_sib7() const {
  return !_is_default_instance_ && sib7_ != NULL;
}
inline void rp_lte_layer_3::clear_sib7() {
  if (GetArenaNoVirtual() == NULL && sib7_ != NULL) delete sib7_;
  sib7_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_lte_sib7& rp_lte_layer_3::sib7() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_layer_3.sib7)
  return sib7_ != NULL ? *sib7_ : *default_instance_->sib7_;
}
inline ::rf_phreaker::protobuf::rp_lte_sib7* rp_lte_layer_3::mutable_sib7() {
  
  if (sib7_ == NULL) {
    sib7_ = new ::rf_phreaker::protobuf::rp_lte_sib7;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_layer_3.sib7)
  return sib7_;
}
inline ::rf_phreaker::protobuf::rp_lte_sib7* rp_lte_layer_3::release_sib7() {
  
  ::rf_phreaker::protobuf::rp_lte_sib7* temp = sib7_;
  sib7_ = NULL;
  return temp;
}
inline void rp_lte_layer_3::set_allocated_sib7(::rf_phreaker::protobuf::rp_lte_sib7* sib7) {
  delete sib7_;
  sib7_ = sib7;
  if (sib7) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_layer_3.sib7)
}

// optional .rf_phreaker.protobuf.rp_lte_sib8 sib8 = 9;
inline bool rp_lte_layer_3::has_sib8() const {
  return !_is_default_instance_ && sib8_ != NULL;
}
inline void rp_lte_layer_3::clear_sib8() {
  if (GetArenaNoVirtual() == NULL && sib8_ != NULL) delete sib8_;
  sib8_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_lte_sib8& rp_lte_layer_3::sib8() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_layer_3.sib8)
  return sib8_ != NULL ? *sib8_ : *default_instance_->sib8_;
}
inline ::rf_phreaker::protobuf::rp_lte_sib8* rp_lte_layer_3::mutable_sib8() {
  
  if (sib8_ == NULL) {
    sib8_ = new ::rf_phreaker::protobuf::rp_lte_sib8;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_layer_3.sib8)
  return sib8_;
}
inline ::rf_phreaker::protobuf::rp_lte_sib8* rp_lte_layer_3::release_sib8() {
  
  ::rf_phreaker::protobuf::rp_lte_sib8* temp = sib8_;
  sib8_ = NULL;
  return temp;
}
inline void rp_lte_layer_3::set_allocated_sib8(::rf_phreaker::protobuf::rp_lte_sib8* sib8) {
  delete sib8_;
  sib8_ = sib8;
  if (sib8) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_layer_3.sib8)
}

// -------------------------------------------------------------------

// rp_lte

// optional .rf_phreaker.protobuf.rp_base base = 1;
inline bool rp_lte::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
inline void rp_lte::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_base& rp_lte::base() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::rf_phreaker::protobuf::rp_base* rp_lte::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::rf_phreaker::protobuf::rp_base;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte.base)
  return base_;
}
inline ::rf_phreaker::protobuf::rp_base* rp_lte::release_base() {
  
  ::rf_phreaker::protobuf::rp_base* temp = base_;
  base_ = NULL;
  return temp;
}
inline void rp_lte::set_allocated_base(::rf_phreaker::protobuf::rp_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte.base)
}

// optional int32 earfcn = 2;
inline void rp_lte::clear_earfcn() {
  earfcn_ = 0;
}
inline ::google::protobuf::int32 rp_lte::earfcn() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.earfcn)
  return earfcn_;
}
inline void rp_lte::set_earfcn(::google::protobuf::int32 value) {
  
  earfcn_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.earfcn)
}

// optional .rf_phreaker.protobuf.rp_operating_band operating_band = 3;
inline void rp_lte::clear_operating_band() {
  operating_band_ = 0;
}
inline ::rf_phreaker::protobuf::rp_operating_band rp_lte::operating_band() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.operating_band)
  return static_cast< ::rf_phreaker::protobuf::rp_operating_band >(operating_band_);
}
inline void rp_lte::set_operating_band(::rf_phreaker::protobuf::rp_operating_band value) {
  
  operating_band_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.operating_band)
}

// optional int32 physical_cell_id = 4;
inline void rp_lte::clear_physical_cell_id() {
  physical_cell_id_ = 0;
}
inline ::google::protobuf::int32 rp_lte::physical_cell_id() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.physical_cell_id)
  return physical_cell_id_;
}
inline void rp_lte::set_physical_cell_id(::google::protobuf::int32 value) {
  
  physical_cell_id_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.physical_cell_id)
}

// optional double rsrp = 5;
inline void rp_lte::clear_rsrp() {
  rsrp_ = 0;
}
inline double rp_lte::rsrp() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.rsrp)
  return rsrp_;
}
inline void rp_lte::set_rsrp(double value) {
  
  rsrp_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.rsrp)
}

// optional double rsrq = 6;
inline void rp_lte::clear_rsrq() {
  rsrq_ = 0;
}
inline double rp_lte::rsrq() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.rsrq)
  return rsrq_;
}
inline void rp_lte::set_rsrq(double value) {
  
  rsrq_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.rsrq)
}

// optional double rssi = 7;
inline void rp_lte::clear_rssi() {
  rssi_ = 0;
}
inline double rp_lte::rssi() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.rssi)
  return rssi_;
}
inline void rp_lte::set_rssi(double value) {
  
  rssi_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.rssi)
}

// optional int32 psch_id = 8;
inline void rp_lte::clear_psch_id() {
  psch_id_ = 0;
}
inline ::google::protobuf::int32 rp_lte::psch_id() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.psch_id)
  return psch_id_;
}
inline void rp_lte::set_psch_id(::google::protobuf::int32 value) {
  
  psch_id_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.psch_id)
}

// optional double psch_quality = 9;
inline void rp_lte::clear_psch_quality() {
  psch_quality_ = 0;
}
inline double rp_lte::psch_quality() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.psch_quality)
  return psch_quality_;
}
inline void rp_lte::set_psch_quality(double value) {
  
  psch_quality_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.psch_quality)
}

// optional int32 ssch_id = 10;
inline void rp_lte::clear_ssch_id() {
  ssch_id_ = 0;
}
inline ::google::protobuf::int32 rp_lte::ssch_id() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.ssch_id)
  return ssch_id_;
}
inline void rp_lte::set_ssch_id(::google::protobuf::int32 value) {
  
  ssch_id_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.ssch_id)
}

// optional double ssch_quality = 11;
inline void rp_lte::clear_ssch_quality() {
  ssch_quality_ = 0;
}
inline double rp_lte::ssch_quality() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.ssch_quality)
  return ssch_quality_;
}
inline void rp_lte::set_ssch_quality(double value) {
  
  ssch_quality_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.ssch_quality)
}

// optional double sync_quality = 12;
inline void rp_lte::clear_sync_quality() {
  sync_quality_ = 0;
}
inline double rp_lte::sync_quality() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.sync_quality)
  return sync_quality_;
}
inline void rp_lte::set_sync_quality(double value) {
  
  sync_quality_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.sync_quality)
}

// optional int32 cyclic_prefix = 13;
inline void rp_lte::clear_cyclic_prefix() {
  cyclic_prefix_ = 0;
}
inline ::google::protobuf::int32 rp_lte::cyclic_prefix() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.cyclic_prefix)
  return cyclic_prefix_;
}
inline void rp_lte::set_cyclic_prefix(::google::protobuf::int32 value) {
  
  cyclic_prefix_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.cyclic_prefix)
}

// optional int32 num_antenna_ports = 14;
inline void rp_lte::clear_num_antenna_ports() {
  num_antenna_ports_ = 0;
}
inline ::google::protobuf::int32 rp_lte::num_antenna_ports() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.num_antenna_ports)
  return num_antenna_ports_;
}
inline void rp_lte::set_num_antenna_ports(::google::protobuf::int32 value) {
  
  num_antenna_ports_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.num_antenna_ports)
}

// optional int32 downlink_bandwidth = 15;
inline void rp_lte::clear_downlink_bandwidth() {
  downlink_bandwidth_ = 0;
}
inline ::google::protobuf::int32 rp_lte::downlink_bandwidth() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.downlink_bandwidth)
  return downlink_bandwidth_;
}
inline void rp_lte::set_downlink_bandwidth(::google::protobuf::int32 value) {
  
  downlink_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.downlink_bandwidth)
}

// optional int32 frame_number = 16;
inline void rp_lte::clear_frame_number() {
  frame_number_ = 0;
}
inline ::google::protobuf::int32 rp_lte::frame_number() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.frame_number)
  return frame_number_;
}
inline void rp_lte::set_frame_number(::google::protobuf::int32 value) {
  
  frame_number_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_lte.frame_number)
}

// optional .rf_phreaker.protobuf.rp_lte_layer_3 layer_3 = 17;
inline bool rp_lte::has_layer_3() const {
  return !_is_default_instance_ && layer_3_ != NULL;
}
inline void rp_lte::clear_layer_3() {
  if (GetArenaNoVirtual() == NULL && layer_3_ != NULL) delete layer_3_;
  layer_3_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_lte_layer_3& rp_lte::layer_3() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte.layer_3)
  return layer_3_ != NULL ? *layer_3_ : *default_instance_->layer_3_;
}
inline ::rf_phreaker::protobuf::rp_lte_layer_3* rp_lte::mutable_layer_3() {
  
  if (layer_3_ == NULL) {
    layer_3_ = new ::rf_phreaker::protobuf::rp_lte_layer_3;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte.layer_3)
  return layer_3_;
}
inline ::rf_phreaker::protobuf::rp_lte_layer_3* rp_lte::release_layer_3() {
  
  ::rf_phreaker::protobuf::rp_lte_layer_3* temp = layer_3_;
  layer_3_ = NULL;
  return temp;
}
inline void rp_lte::set_allocated_layer_3(::rf_phreaker::protobuf::rp_lte_layer_3* layer_3) {
  delete layer_3_;
  layer_3_ = layer_3;
  if (layer_3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte.layer_3)
}

// -------------------------------------------------------------------

// rp_lte_update

// optional .rf_phreaker.protobuf.rp_base base = 1;
inline bool rp_lte_update::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
inline void rp_lte_update::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_base& rp_lte_update::base() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_update.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::rf_phreaker::protobuf::rp_base* rp_lte_update::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::rf_phreaker::protobuf::rp_base;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_update.base)
  return base_;
}
inline ::rf_phreaker::protobuf::rp_base* rp_lte_update::release_base() {
  
  ::rf_phreaker::protobuf::rp_base* temp = base_;
  base_ = NULL;
  return temp;
}
inline void rp_lte_update::set_allocated_base(::rf_phreaker::protobuf::rp_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_lte_update.base)
}

// repeated .rf_phreaker.protobuf.rp_lte lte = 2;
inline int rp_lte_update::lte_size() const {
  return lte_.size();
}
inline void rp_lte_update::clear_lte() {
  lte_.Clear();
}
inline const ::rf_phreaker::protobuf::rp_lte& rp_lte_update::lte(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_lte_update.lte)
  return lte_.Get(index);
}
inline ::rf_phreaker::protobuf::rp_lte* rp_lte_update::mutable_lte(int index) {
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_lte_update.lte)
  return lte_.Mutable(index);
}
inline ::rf_phreaker::protobuf::rp_lte* rp_lte_update::add_lte() {
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_lte_update.lte)
  return lte_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte >*
rp_lte_update::mutable_lte() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_lte_update.lte)
  return &lte_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rf_phreaker::protobuf::rp_lte >&
rp_lte_update::lte() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_lte_update.lte)
  return lte_;
}

// -------------------------------------------------------------------

// rp_raw_data

// optional .rf_phreaker.protobuf.rp_base base = 1;
inline bool rp_raw_data::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
inline void rp_raw_data::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
inline const ::rf_phreaker::protobuf::rp_base& rp_raw_data::base() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_raw_data.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::rf_phreaker::protobuf::rp_base* rp_raw_data::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::rf_phreaker::protobuf::rp_base;
  }
  // @@protoc_insertion_point(field_mutable:rf_phreaker.protobuf.rp_raw_data.base)
  return base_;
}
inline ::rf_phreaker::protobuf::rp_base* rp_raw_data::release_base() {
  
  ::rf_phreaker::protobuf::rp_base* temp = base_;
  base_ = NULL;
  return temp;
}
inline void rp_raw_data::set_allocated_base(::rf_phreaker::protobuf::rp_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rf_phreaker.protobuf.rp_raw_data.base)
}

// optional double power_adjustment = 2;
inline void rp_raw_data::clear_power_adjustment() {
  power_adjustment_ = 0;
}
inline double rp_raw_data::power_adjustment() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_raw_data.power_adjustment)
  return power_adjustment_;
}
inline void rp_raw_data::set_power_adjustment(double value) {
  
  power_adjustment_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_raw_data.power_adjustment)
}

// optional .rf_phreaker.protobuf.rp_sample_format_type sample_format = 3;
inline void rp_raw_data::clear_sample_format() {
  sample_format_ = 0;
}
inline ::rf_phreaker::protobuf::rp_sample_format_type rp_raw_data::sample_format() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_raw_data.sample_format)
  return static_cast< ::rf_phreaker::protobuf::rp_sample_format_type >(sample_format_);
}
inline void rp_raw_data::set_sample_format(::rf_phreaker::protobuf::rp_sample_format_type value) {
  
  sample_format_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_raw_data.sample_format)
}

// optional int64 num_samples = 4;
inline void rp_raw_data::clear_num_samples() {
  num_samples_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 rp_raw_data::num_samples() const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_raw_data.num_samples)
  return num_samples_;
}
inline void rp_raw_data::set_num_samples(::google::protobuf::int64 value) {
  
  num_samples_ = value;
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_raw_data.num_samples)
}

// repeated float samples = 5 [packed = true];
inline int rp_raw_data::samples_size() const {
  return samples_.size();
}
inline void rp_raw_data::clear_samples() {
  samples_.Clear();
}
inline float rp_raw_data::samples(int index) const {
  // @@protoc_insertion_point(field_get:rf_phreaker.protobuf.rp_raw_data.samples)
  return samples_.Get(index);
}
inline void rp_raw_data::set_samples(int index, float value) {
  samples_.Set(index, value);
  // @@protoc_insertion_point(field_set:rf_phreaker.protobuf.rp_raw_data.samples)
}
inline void rp_raw_data::add_samples(float value) {
  samples_.Add(value);
  // @@protoc_insertion_point(field_add:rf_phreaker.protobuf.rp_raw_data.samples)
}
inline const ::google::protobuf::RepeatedField< float >&
rp_raw_data::samples() const {
  // @@protoc_insertion_point(field_list:rf_phreaker.protobuf.rp_raw_data.samples)
  return samples_;
}
inline ::google::protobuf::RepeatedField< float >*
rp_raw_data::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:rf_phreaker.protobuf.rp_raw_data.samples)
  return &samples_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace rf_phreaker

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rf_phreaker::protobuf::rp_status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rf_phreaker::protobuf::rp_status>() {
  return ::rf_phreaker::protobuf::rp_status_descriptor();
}
template <> struct is_proto_enum< ::rf_phreaker::protobuf::rp_operating_band> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rf_phreaker::protobuf::rp_operating_band>() {
  return ::rf_phreaker::protobuf::rp_operating_band_descriptor();
}
template <> struct is_proto_enum< ::rf_phreaker::protobuf::rp_device_communication> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rf_phreaker::protobuf::rp_device_communication>() {
  return ::rf_phreaker::protobuf::rp_device_communication_descriptor();
}
template <> struct is_proto_enum< ::rf_phreaker::protobuf::rp_band_indicator_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rf_phreaker::protobuf::rp_band_indicator_type>() {
  return ::rf_phreaker::protobuf::rp_band_indicator_type_descriptor();
}
template <> struct is_proto_enum< ::rf_phreaker::protobuf::rp_duplex_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rf_phreaker::protobuf::rp_duplex_type>() {
  return ::rf_phreaker::protobuf::rp_duplex_type_descriptor();
}
template <> struct is_proto_enum< ::rf_phreaker::protobuf::rp_utran_bandwidth_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rf_phreaker::protobuf::rp_utran_bandwidth_type>() {
  return ::rf_phreaker::protobuf::rp_utran_bandwidth_type_descriptor();
}
template <> struct is_proto_enum< ::rf_phreaker::protobuf::rp_eutran_bandwidth_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rf_phreaker::protobuf::rp_eutran_bandwidth_type>() {
  return ::rf_phreaker::protobuf::rp_eutran_bandwidth_type_descriptor();
}
template <> struct is_proto_enum< ::rf_phreaker::protobuf::rp_lte_sib_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rf_phreaker::protobuf::rp_lte_sib_type>() {
  return ::rf_phreaker::protobuf::rp_lte_sib_type_descriptor();
}
template <> struct is_proto_enum< ::rf_phreaker::protobuf::rp_lte_band_class_cdma_2000_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rf_phreaker::protobuf::rp_lte_band_class_cdma_2000_type>() {
  return ::rf_phreaker::protobuf::rp_lte_band_class_cdma_2000_type_descriptor();
}
template <> struct is_proto_enum< ::rf_phreaker::protobuf::rp_sample_format_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rf_phreaker::protobuf::rp_sample_format_type>() {
  return ::rf_phreaker::protobuf::rp_sample_format_type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rf_5fphreaker_2eproto__INCLUDED
