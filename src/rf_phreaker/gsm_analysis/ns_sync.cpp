#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <memory.h>

#include "rf_phreaker/gsm_analysis/netstart.h"
#include "rf_phreaker/gsm_analysis/ns_sync.h"
#include "rf_phreaker/gsm_analysis/ns_bsic.h"
#include "rf_phreaker/gsm_analysis/ns_cgi.h"


extern const DATASTRUCT FCCH_04[] = {
{1.6825400E-03f,-7.2919528E-05f},{1.7824682E-03f,4.4570362E-04f},{1.2412974E-03f,1.1381736E-03f},{6.0577278E-04f,1.5902674E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.1018952E-04f,1.5447759E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5685776E-03f,7.3656856E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5559133E-03f,-5.9152943E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.2897539E-04f,-1.5164321E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.8559458E-04f,-1.5889901E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5212006E-03f,-7.0879427E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5852830E-03f,5.7409228E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5270622E-03f,-7.1148339E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5828907E-03f,5.7670128E-04f},{1.2412974E-03f,1.1381736E-03f},{7.1148339E-04f,1.5270622E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.7670128E-04f,1.5828907E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.5270622E-03f,7.1148339E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.5828907E-03f,-5.7670128E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-7.1148339E-04f,-1.5270622E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{5.7670128E-04f,-1.5828907E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.5296712E-03f,-7.0909114E-04f},
{1.6825400E-03f,-7.2919528E-05f},{1.5768185E-03f,5.7452936E-04f},{1.2412974E-03f,1.1381736E-03f},{7.2087103E-04f,1.5323692E-03f},
{7.2919528E-05f,1.6825400E-03f},{-5.9504736E-04f,1.5738138E-03f},{-1.1381736E-03f,1.2412974E-03f},{-1.4989030E-03f,7.2392198E-04f},
{-1.6825400E-03f,7.2919528E-05f},{-1.6264208E-03f,-5.9810067E-04f},{-1.2412974E-03f,-1.1381736E-03f},{-6.4192349E-04f,-1.4948445E-03f},
{-7.2919528E-05f,-1.6825400E-03f},{4.6591880E-04f,-1.6367134E-03f},{1.1381736E-03f,-1.2412974E-03f},{1.7372246E-03f,-5.9824343E-04f}
};

extern const DATASTRUCT SYNC_04[] = {
{9.9175362e-001f,1.2332744e-001f},{9.6266814e-001f,2.6888139e-001f},{8.8125049e-001f,4.7196693e-001f},{7.3782387e-001f,6.7472013e-001f},
{5.8752292e-001f,8.0907398e-001f},{5.2434682e-001f,8.5131985e-001f},{5.9745579e-001f,8.0150083e-001f},{7.6725568e-001f,6.4049738e-001f},
{9.3251775e-001f,3.5933644e-001f},{9.9942781e-001f,-2.4700376e-004f},{9.3263741e-001f,-3.5979508e-001f},{7.6746844e-001f,-6.4084391e-001f},
{5.9800265e-001f,-8.0151682e-001f},{5.2690608e-001f,-8.5003121e-001f},{5.9802364e-001f,-8.0155771e-001f},{7.6750664e-001f,-6.4094315e-001f},
{9.3270353e-001f,-3.5996889e-001f},{9.9953959e-001f,-4.8765336e-004f},{9.3267031e-001f,3.5906481e-001f},{7.6737487e-001f,6.4026032e-001f},
{5.9718048e-001f,8.0153847e-001f},{5.2193413e-001f,8.5264155e-001f},{5.7698954e-001f,8.1654968e-001f},{7.0668338e-001f,7.0733692e-001f},
{8.1647862e-001f,5.7715167e-001f},{8.5520807e-001f,5.1803734e-001f},{8.1656528e-001f,5.7718887e-001f},{7.0689354e-001f,7.0738525e-001f},
{5.7735669e-001f,8.1658864e-001f},{5.2244890e-001f,8.5268293e-001f},{5.9779460e-001f,8.0162630e-001f},{7.6808025e-001f,6.4037050e-001f},
{9.3359049e-001f,3.5849835e-001f},{9.9998149e-001f,-5.7957972e-003f},{9.2341841e-001f,-3.8351033e-001f},{7.0698971e-001f,-7.0698971e-001f},
{3.8351033e-001f,-9.2341841e-001f},{5.7957972e-003f,-9.9998149e-001f},{-3.5849835e-001f,-9.3359049e-001f},{-6.4037050e-001f,-7.6808025e-001f},
{-8.0162630e-001f,-5.9779460e-001f},{-8.5268293e-001f,-5.2244890e-001f},{-8.1658864e-001f,-5.7735669e-001f},{-7.0738525e-001f,-7.0689354e-001f},
{-5.7718887e-001f,-8.1656528e-001f},{-5.1803734e-001f,-8.5520807e-001f},{-5.7715167e-001f,-8.1647862e-001f},{-7.0733692e-001f,-7.0668338e-001f},
{-8.1654968e-001f,-5.7698954e-001f},{-8.5264155e-001f,-5.2193413e-001f},{-8.0153847e-001f,-5.9718048e-001f},{-6.4026032e-001f,-7.6737487e-001f},
{-3.5906481e-001f,-9.3267031e-001f},{4.8763464e-004f,-9.9953958e-001f},{3.5996877e-001f,-9.3270338e-001f},{6.4094256e-001f,-7.6750565e-001f},
{8.0155471e-001f,-5.9801926e-001f},{8.5001724e-001f,-5.2689352e-001f},{8.0146951e-001f,-5.9798225e-001f},{6.4073318e-001f,-7.6745890e-001f},
{3.5960081e-001f,-9.3267393e-001f},{-2.7836560e-005f,-9.9955121e-001f},{-3.5965828e-001f,-9.3276062e-001f},{-6.4078515e-001f,-7.6766942e-001f},
{-8.0149948e-001f,-5.9835079e-001f},{-8.5000558e-001f,-5.2741056e-001f},{-8.0146130e-001f,-5.9863505e-001f},{-6.4063413e-001f,-7.6821205e-001f},
{-3.5867589e-001f,-9.3361974e-001f},{5.8252718e-003f,-9.9995615e-001f},{3.8376945e-001f,-9.2329453e-001f},{7.0749630e-001f,-7.0664283e-001f},
{9.2427159e-001f,-3.8219154e-001f},{1.0004300e+000f,5.1482515e-004f},{9.2432306e-001f,3.8317394e-001f},{7.0756562e-001f,7.0756562e-001f},
{3.8317394e-001f,9.2432306e-001f},{5.1482515e-004f,1.0004300e+000f},{-3.8219154e-001f,9.2427159e-001f},{-7.0664283e-001f,7.0749630e-001f},
{-9.2329453e-001f,3.8376945e-001f},{-9.9995615e-001f,5.8252718e-003f},{-9.3361974e-001f,-3.5867589e-001f},{-7.6821205e-001f,-6.4063413e-001f},
{-5.9863505e-001f,-8.0146129e-001f},{-5.2741053e-001f,-8.5000555e-001f},{-5.9835063e-001f,-8.0149914e-001f},{-7.6766929e-001f,-6.4078281e-001f},
{-9.3276436e-001f,-3.5964812e-001f},{-9.9957694e-001f,4.3126270e-015f},{-9.3276436e-001f,3.5964812e-001f},{-7.6766929e-001f,6.4078281e-001f},
{-5.9835063e-001f,8.0149914e-001f},{-5.2741053e-001f,8.5000555e-001f},{-5.9863505e-001f,8.0146129e-001f},{-7.6821205e-001f,6.4063413e-001f},
{-9.3361974e-001f,3.5867589e-001f},{-9.9995615e-001f,-5.8252718e-003f},{-9.2329453e-001f,-3.8376945e-001f},{-7.0664283e-001f,-7.0749630e-001f},
{-3.8219153e-001f,-9.2427158e-001f},{5.1486259e-004f,-1.0004300e+000f},{3.8317417e-001f,-9.2432276e-001f},{7.0756679e-001f,-7.0756363e-001f},
{9.2432901e-001f,-3.8316516e-001f},{1.0004574e+000f,-4.8923418e-004f},{9.2436269e-001f,3.8223739e-001f},{7.0770651e-001f,7.0669260e-001f},
{3.8413626e-001f,9.2333397e-001f},{6.3385302e-003f,9.9999774e-001f},{-3.5808394e-001f,9.3371162e-001f},{-6.4011022e-001f,7.6834244e-001f},
{-8.0150021e-001f,5.9821888e-001f},{-8.5264186e-001f,5.2301793e-001f},{-8.1658650e-001f,5.7800748e-001f},{-7.0747596e-001f,7.0747816e-001f},
{-5.7799749e-001f,8.1659057e-001f},{-5.2299013e-001f,8.5266762e-001f},{-5.9817158e-001f,8.0159064e-001f},{-7.6829280e-001f,6.4032061e-001f},
{-9.3368195e-001f,3.5845233e-001f},{-1.0000089e+000f,-5.8214209e-003f},{-9.2342435e-001f,-3.8351911e-001f},{-7.0699088e-001f,-7.0699170e-001f},
{-3.8351055e-001f,-9.2341871e-001f},{-5.7958312e-003f,-9.9998152e-001f},{3.5849834e-001f,-9.3359050e-001f},{6.4037050e-001f,-7.6808025e-001f},
{8.0162630e-001f,-5.9779459e-001f},{8.5268296e-001f,-5.2244886e-001f},{8.1658898e-001f,-5.7735653e-001f},{7.0738759e-001f,-7.0689341e-001f},
{5.7719904e-001f,-8.1656901e-001f},{5.1806517e-001f,-8.5523380e-001f},{5.7719904e-001f,-8.1656901e-001f},{7.0738759e-001f,-7.0689341e-001f},
{8.1658898e-001f,-5.7735653e-001f},{8.5268296e-001f,-5.2244886e-001f},{8.0162630e-001f,-5.9779459e-001f},{6.4037050e-001f,-7.6808025e-001f},
{3.5849834e-001f,-9.3359050e-001f},{-5.7958312e-003f,-9.9998152e-001f},{-3.8351055e-001f,-9.2341871e-001f},{-7.0699088e-001f,-7.0699170e-001f},
{-9.2342435e-001f,-3.8351911e-001f},{-1.0000089e+000f,-5.8214209e-003f},{-9.3368195e-001f,3.5845233e-001f},{-7.6829280e-001f,6.4032061e-001f},
{-5.9817158e-001f,8.0159064e-001f},{-5.2299013e-001f,8.5266762e-001f},{-5.7799749e-001f,8.1659057e-001f},{-7.0747596e-001f,7.0747816e-001f},
{-8.1658650e-001f,5.7800748e-001f},{-8.5264186e-001f,5.2301793e-001f},{-8.0150021e-001f,5.9821888e-001f},{-6.4011022e-001f,7.6834244e-001f},
{-3.5808394e-001f,9.3371162e-001f},{6.3385302e-003f,9.9999774e-001f},{3.8413626e-001f,9.2333397e-001f},{7.0770651e-001f,7.0669260e-001f},
{9.2436269e-001f,3.8223739e-001f},{1.0004574e+000f,-4.8923418e-004f},{9.2432901e-001f,-3.8316516e-001f},{7.0756679e-001f,-7.0756363e-001f},
{3.8317417e-001f,-9.2432276e-001f},{5.1486259e-004f,-1.0004300e+000f},{-3.8219153e-001f,-9.2427158e-001f},{-7.0664283e-001f,-7.0749630e-001f},
{-9.2329453e-001f,-3.8376945e-001f},{-9.9995615e-001f,-5.8252718e-003f},{-9.3361974e-001f,3.5867589e-001f},{-7.6821205e-001f,6.4063413e-001f},
{-5.9863505e-001f,8.0146129e-001f},{-5.2741053e-001f,8.5000555e-001f},{-5.9835063e-001f,8.0149914e-001f},{-7.6766929e-001f,6.4078281e-001f},
{-9.3276436e-001f,3.5964812e-001f},{-9.9957694e-001f,4.1928578e-015f},{-9.3276436e-001f,-3.5964812e-001f},{-7.6766929e-001f,-6.4078281e-001f},
{-5.9835063e-001f,-8.0149914e-001f},{-5.2741053e-001f,-8.5000555e-001f},{-5.9863505e-001f,-8.0146129e-001f},{-7.6821205e-001f,-6.4063413e-001f},
{-9.3361974e-001f,-3.5867589e-001f},{-9.9995615e-001f,5.8252718e-003f},{-9.2329453e-001f,3.8376945e-001f},{-7.0664283e-001f,7.0749630e-001f},
{-3.8219154e-001f,9.2427159e-001f},{5.1482515e-004f,1.0004300e+000f},{3.8317394e-001f,9.2432306e-001f},{7.0756562e-001f,7.0756562e-001f},
{9.2432306e-001f,3.8317394e-001f},{1.0004300e+000f,5.1482515e-004f},{9.2427159e-001f,-3.8219154e-001f},{7.0749630e-001f,-7.0664283e-001f},
{3.8376945e-001f,-9.2329453e-001f},{5.8252718e-003f,-9.9995615e-001f},{-3.5867589e-001f,-9.3361974e-001f},{-6.4063413e-001f,-7.6821205e-001f},
{-8.0146130e-001f,-5.9863505e-001f},{-8.5000558e-001f,-5.2741056e-001f},{-8.0149948e-001f,-5.9835079e-001f},{-6.4078515e-001f,-7.6766942e-001f},
{-3.5965828e-001f,-9.3276062e-001f},{-2.7836560e-005f,-9.9955121e-001f},{3.5960081e-001f,-9.3267393e-001f},{6.4073318e-001f,-7.6745890e-001f},
{8.0146951e-001f,-5.9798225e-001f},{8.5001724e-001f,-5.2689352e-001f},{8.0155471e-001f,-5.9801926e-001f},{6.4094256e-001f,-7.6750565e-001f},
{3.5996877e-001f,-9.3270338e-001f},{4.8763464e-004f,-9.9953958e-001f},{-3.5906481e-001f,-9.3267031e-001f},{-6.4026032e-001f,-7.6737487e-001f},
{-8.0153847e-001f,-5.9718048e-001f},{-8.5264155e-001f,-5.2193413e-001f},{-8.1654968e-001f,-5.7698954e-001f},{-7.0733692e-001f,-7.0668338e-001f},
{-5.7715167e-001f,-8.1647862e-001f},{-5.1803734e-001f,-8.5520807e-001f},{-5.7718887e-001f,-8.1656528e-001f},{-7.0738525e-001f,-7.0689354e-001f},
{-8.1658864e-001f,-5.7735669e-001f},{-8.5268293e-001f,-5.2244890e-001f},{-8.0162630e-001f,-5.9779460e-001f},{-6.4037050e-001f,-7.6808025e-001f},
{-3.5849835e-001f,-9.3359049e-001f},{5.7957972e-003f,-9.9998149e-001f},{3.8351033e-001f,-9.2341841e-001f},{7.0698971e-001f,-7.0698971e-001f},
{9.2341841e-001f,-3.8351033e-001f},{9.9998149e-001f,-5.7957972e-003f},{9.3359049e-001f,3.5849835e-001f},{7.6808025e-001f,6.4037050e-001f},
{5.9779460e-001f,8.0162630e-001f},{5.2244890e-001f,8.5268293e-001f},{5.7735669e-001f,8.1658864e-001f},{7.0689354e-001f,7.0738525e-001f},
{8.1656528e-001f,5.7718888e-001f},{8.5520809e-001f,5.1803735e-001f},{8.1647877e-001f,5.7715179e-001f},{7.0668437e-001f,7.0733751e-001f},
{5.7699392e-001f,8.1655268e-001f},{5.2194666e-001f,8.5265549e-001f},{5.9720072e-001f,8.0158543e-001f},{7.6738428e-001f,6.4036871e-001f},
{9.3263753e-001f,3.5924891e-001f},{9.9944194e-001f,-2.4066832e-004f},{9.3255123e-001f,-3.5969447e-001f},{7.6730428e-001f,-6.4070560e-001f},
{5.9750142e-001f,-8.0159164e-001f},{5.2437238e-001f,-8.5134722e-001f},{5.8753170e-001f,-8.0907993e-001f},{7.3782585e-001f,-6.7472131e-001f},
{8.8125079e-001f,-4.7196717e-001f},{9.6266817e-001f,-2.6888143e-001f}
};




extern const unsigned int FCCH_04_Template_Len = sizeof(FCCH_04)/sizeof(FCCH_04[0]);
// extern the SYNC so that the BSIC code can use it
extern const unsigned int SYNC_04_Template_Len = sizeof(SYNC_04)/sizeof(SYNC_04[0]);

/* filtering constants */
#define LPF_LEN  256
#define LPF_FREQ 100000




bool IsCGIFrame(BSICChannelInfoType RFN)
{
	// CGI is in BCCH SystemInformationType3 message
	unsigned int T3, TMod, TC;

	T3 = RFN.T3 * 10 + 1;
	TMod = (T3 + 26 - RFN.T2) % 26;
	TC = (TMod + 26 * RFN.T1) % 8;

	return ( (T3 == 1) && ((TC == 2) || (TC == 6)) );
}



/*****************************************************************************/
static const DATATYPE FcchCorrScale = 0.69f;
static const DATATYPE SyncCorrScale = 0.31f;


//GsmSyncProcessor::GsmSyncProcessor(
//	const TemplateStruct& t,
//	unsigned int sampling_freq_hz,
//	unsigned int upsample_factor,
//	unsigned int downsample_factor,
//	unsigned int blocksize, unsigned int step_size,
//	unsigned int num_windows
//) :
GsmSyncProcessor::GsmSyncProcessor(const SyncStruct *s,
	unsigned int upsample_factor,
	unsigned int downsample_factor
) :
downfac_(downsample_factor), upfac_(upsample_factor),
xcorr_mag_fcch_(NULL), xcorr_mag_sync_(NULL), xcorr_mag_(NULL),
fcch_correlator_(NULL), sync_correlator_(NULL),
BSIC_Decoder_(NULL), CGI_Decoder_(NULL),
ProcessBSIC_(false), ProcessCGI_(false)
{
	memcpy(&s_, s, sizeof(s_));

	if ( !upfac_ || !downfac_ )
		throw -1;

	double norm_freq = ((double)LPF_FREQ/(double)s_.fs);
	norm_freq /= (double)upfac_;

	fcch_correlator_ = new modulated_signal_correlator(
		FCCH_04, FCCH_04_Template_Len,
		0, upsample_factor, downsample_factor,
		norm_freq, LPF_LEN);
	// TODO: create a new sync tmeplate?
	sync_correlator_ = new modulated_signal_correlator(
		SYNC_04, SYNC_04_Template_Len,
		0, upsample_factor, downsample_factor,
		norm_freq, LPF_LEN);

	ProcessBSIC_ = true;
	try
	{
		BSIC_Decoder_ = new GsmBsicDecoder();
	}
	catch (int)
	{
		ProcessBSIC_ = false;
		delete BSIC_Decoder_;
		BSIC_Decoder_ = NULL;
	}

	if ( BSIC_Decoder_ )
	{
		ProcessCGI_ = true;
		try
		{
			CGI_Decoder_ = new GsmCgiDecoder(s->t);
		}
		catch (int)
		{
			ProcessCGI_ = false;
			delete CGI_Decoder_;
			CGI_Decoder_ = NULL;
		}
	}
}

GsmSyncProcessor::~GsmSyncProcessor()
{
	delete BSIC_Decoder_;
	delete CGI_Decoder_;
	delete fcch_correlator_;
	delete sync_correlator_;
	ippsFree(xcorr_mag_fcch_);
	ippsFree(xcorr_mag_sync_);
	ippsFree(xcorr_mag_);
}



int GsmSyncProcessor::sync_analysis(
	const DATASTRUCT *data, unsigned int datasize,
	float bandpow_threshold, float sidepow_threshold,
	gsm_analysis_output_list *head
)
{
	if ( !data || !datasize )
		return GSM_SYNC_UNDEFINED_ERROR;

	s_.data = data;
	s_.datasize = datasize;

	int i;

	gsm_analysis_output_list *current;
	gsm_analysis_output_list *prev_row;

	int num;
	int fwin, numWinSkip;
	int fstart, sstart;

	const DATASTRUCT *data_fcch, *data_sync;

	// calculate max initial sync "error", due to window overlap
	// (this is equal to the size of one full window block)
	unsigned int sync_offset = s_.step_size;
	// pad length of adjacent time window to allow for error
	unsigned int offset_length = (int)( 1.1f * sync_offset + 0.5f );
	// amount of corr shift
	unsigned int shiftlength = 2 * offset_length;
	// decimated corr shift
	unsigned int d_shiftlength = (int)( (float)(shiftlength * upfac_)/ (float)downfac_ );

	// # samples into the time window where the sync sequence is expected
	unsigned int tsstart = (unsigned int)(GSM_SYNCTS_OFFSET * s_.nspb + 0.5f);

	unsigned int length_data_fcch = (unsigned int)(GSM_NUM_FCCH_BITS * s_.nspb + 0.5f) + shiftlength + 1;
	unsigned int length_data_sync = (unsigned int)(GSM_NUM_SYNCTS_BITS * s_.nspb + 0.5f) + shiftlength + 1;

	// NOTE: With Intel IPP, resample iterations is an integer such that
	// numIters * downfactor = numInputSamples and
	// numIters * upfactor = numOutputSamples
	unsigned int FCCH_RESAMPLE_ITERATIONS = length_data_fcch / downfac_;
	unsigned int SYNC_RESAMPLE_ITERATIONS = length_data_sync / downfac_;
	unsigned int d_data_fcch_length = FCCH_RESAMPLE_ITERATIONS * upfac_;
	unsigned int d_data_sync_length = SYNC_RESAMPLE_ITERATIONS * upfac_;

	// for the xcorr
	int lolag = 0;
	int hilag = d_shiftlength;
	int xcorr_length = hilag - lolag + 1;
	if ( xcorr_length < 0 )
		throw GSM_SYNC_UNDEFINED_ERROR;
	if ( !xcorr_mag_fcch_ )
		xcorr_mag_fcch_ = ippsMalloc_32f(xcorr_length);
	if ( !xcorr_mag_sync_ )
		xcorr_mag_sync_ = ippsMalloc_32f(xcorr_length);
	if ( !xcorr_mag_ )
		xcorr_mag_ = ippsMalloc_32f(xcorr_length);


	// Powers of data which we correlate against the templates.
	// Will be returned from the normalization routine
	// Actually these are magnitudes, not powers.
	// If we change to power, need to change the SL algorithm  too.
	Ipp64f norm_factor;
	float FcchAvgRMS, SyncAvgRMS;
	double combinedPwr, corrPwr;

	// Information about the peak of the correlations
	DATATYPE peak;
	int peak_loc;

	unsigned int fcch_to_sync_offset;

	// BSIC and CGI information
	const int BSIC_NumSamplesPad = (int)(s_.nspb*BSIC_BURST_NUM_BITS_PAD);

	fcch_to_sync_offset = (int)(GSM_BITS_PER_FRAME * s_.nspb);
	datasize_ = s_.datasize;

	// visit each output row
	current = head;
	prev_row = NULL;
	num = 1;
	numWinSkip = 0;
	numWinSkip = (int) (s_.blocksize / (DATATYPE)(2*offset_length));

	while( current != NULL )
	{
		current->data.C_I_Ratio = GSM_ANALYSIS_DEFAULT_C2I;

		// only perform SYNC if bandpow_metric > fcch_th2
		if( current->data.BandPow < bandpow_threshold
			|| current->data.SidePow < sidepow_threshold )
		{
			prev_row = current;
			num++;
			current = current->next;
			continue;
		}


		// map fcch and sync back to original data array.
		// If out of bounds, just ignore and go on to next record

		// TODO: consider changing the fcch code to skip
		// windows that we're not going to analyze anyway,
		// instead of skipping here.
		// CHANGE 29 June 2010, Dhaval Dave:
		// It is possible that the first numWinSkip fft windows
		// are relatively strong and pass the fcch thresholds,
		// but if they are too close to the beginning of the windowing,
		// the correlation will not cover the true center of the fcch/sync.
		// In these cases, we will report incorrect timing, maybe off by .05 frames.
		// Thus we should skip the windows where we are possibly not getting
		// a high bandpow value that covers at least 1/2 of the burst.
		fwin = current->data.FCCH_Win;
		unsigned int data_offset = (int)ceil(s_.window_size * 1.5f);
		fstart = s_.window_offset * fwin - offset_length + data_offset;
		sstart = fstart + (int)fcch_to_sync_offset + (int)tsstart;
		if ( ((fstart + (int)length_data_fcch) >= s_.datasize)
			|| ((sstart + (int)length_data_sync) >= s_.datasize)
			|| (fwin < numWinSkip) || (fwin >= (s_.num_windows-numWinSkip))
			)
		{
			current->data.NormSyncCorr = 0;
			current->data.BandPow = 0;
			current->data.ChannelPower = 0;
			prev_row = current;
			num++;
			current = current->next;
			continue;
		}

		// Start should always be > 0
		// If not, something really crazy must have happened,
		// either a code bug or memory corruption.
		if( (fstart < 0) || (sstart < 0) ) {
			throw GSM_SYNC_UNDEFINED_ERROR;
		}

		////////////////////////////////////////////////////////////
		// Do all the FCCH calculations
		////////////////////////////////////////////////////////////
		data_fcch = &(s_.data[fstart]);
		fcch_correlator_->Correlate(data_fcch, length_data_fcch,
			(float)(-current->data.IFFreq) / (float)s_.fs,
			0, xcorr_length);

		// get the normalization of the decimated data
		ippsNorm_L2_32fc64f(fcch_correlator_->Resampled_Data(), d_data_fcch_length, &norm_factor);
		FcchAvgRMS = (float)norm_factor/sqrt((float)d_data_fcch_length);
		// normalize the decimated data
		// TODO:: figure out what to do here and w/Sync if error in normalize()

		// perform fcch correlation
		// Note the template is normalized to a sum of 1,
		// so no additional "length normalization" is needed
		ippsMagnitude_32fc(fcch_correlator_->Correlation_Data(), xcorr_mag_fcch_, xcorr_length);

		////////////////////////////////////////////////////////////
		// Do all the SYNC calculations
		////////////////////////////////////////////////////////////
		data_sync = &(s_.data[sstart]);
		sync_correlator_->Correlate(data_sync, length_data_sync,
			(float)(-current->data.IFFreq) / (float)s_.fs,
			0, xcorr_length);

		// get the normalization of the decimated data
		ippsNorm_L2_32fc64f(sync_correlator_->Resampled_Data(), d_data_sync_length, &norm_factor);
		SyncAvgRMS = (float)norm_factor/sqrt((float)d_data_sync_length);

		// perform correlation.
		// Note the template is normalized to a sum of 1,
		// so no additional "length normalization" is needed
		ippsMagnitude_32fc(sync_correlator_->Correlation_Data(), xcorr_mag_sync_, xcorr_length);


		// Combine the FCCH and SYNC corrs and find the peak
		peak = 0.f;
		peak_loc = 0;
		DATATYPE fcch_scalar = FcchCorrScale / (DATATYPE)FcchAvgRMS;
		DATATYPE sync_scalar = SyncCorrScale / (DATATYPE)SyncAvgRMS;
		for( i = 0; i < xcorr_length; i++ ) {
			// normalize to account for template lengths and avg rms voltages
			// TODO: normalize Sync Template for length.
			xcorr_mag_sync_[i] /= (DATATYPE)SYNC_04_Template_Len;
			xcorr_mag_[i] = (xcorr_mag_fcch_[i] * fcch_scalar)
				+ (xcorr_mag_sync_[i] * sync_scalar);

			// find best peak and store sample number of peak
			if( xcorr_mag_[i] > peak ) {
				peak = xcorr_mag_[i];
				// the peak location must be shifted by lolag
				peak_loc = i + lolag;
			}
		}


		// Store values in output structure
		current->data.NormSyncCorr = peak;
		current->data.SyncSampleNum = (peak_loc * downfac_ / upfac_)
			+ sstart - tsstart;
		current->data.Sync_Win = current->data.SyncSampleNum/s_.window_offset;

		corrPwr = (double)(
			(FcchCorrScale * xcorr_mag_fcch_[peak_loc-lolag]*xcorr_mag_fcch_[peak_loc-lolag]) +
			(SyncCorrScale * xcorr_mag_sync_[peak_loc-lolag]*xcorr_mag_sync_[peak_loc-lolag])
			);

		// 10 Mar 2010:
		// Fix implemented by Dhaval Dave
		// combinedPwr and RMSCorrPower should have the scaling factor applied AFTER squaring
		// combinedPwr is now fixed.  For RMSCorrPwr, the dfference is small (max 0.2 dB), and
		// the change would require perhaps NOT using the scaling factors.
		// Essentially, the RMSCorrPwr should use the lengths of the fcch/sync data as scalars.
		current->data.RMSCorrPower = sqrt(corrPwr);
		combinedPwr = (FcchCorrScale * FcchAvgRMS * FcchAvgRMS) + (SyncCorrScale * SyncAvgRMS * SyncAvgRMS);
		if ( corrPwr >= combinedPwr )
		{
			current->data.C_I_Ratio = GSM_ANALYSIS_MAX_C2I;
		}
		else
		{
			current->data.C_I_Ratio = corrPwr / (combinedPwr - corrPwr);
		}

		current->data.BSIC = 0x99;
		current->data.TDMAFrameNumber = 0;
		current->data.MNC = 0;
		current->data.MCC = 0;
		current->data.LAC = 0;
		current->data.CellID = 0;

		prev_row = current;
		num++;
		current = current->next;
	} // end while()

	return 0;
}

int GsmSyncProcessor::bsic_analysis(const DATASTRUCT *data, unsigned int datasize, rf_phreaker::gsm_measurement &meas) {
	const int BSIC_NumSamplesPad = (int)(s_.nspb*BSIC_BURST_NUM_BITS_PAD);
	BSICChannelInfoType SyncInfo;
	BSICDecoderMsgType BSIC_Error;
	CGIChannelInfoType CGIInfo;
	CGIDecoderMsgType CGI_Error;
	if(((meas.sync_sample_num_ + s_.blocksize + BSIC_NumSamplesPad) < datasize)
		&& ((meas.sync_sample_num_ - BSIC_NumSamplesPad) > 0)) {
		// ensures all bits in the bit-field are 0 (for easier decoding)
		*(unsigned int *)(&SyncInfo) = 0;
		BSIC_Error = BSIC_Decoder_->DecodeBSIC(
			&(data[meas.sync_sample_num_]),
			meas.intermediate_frequency_,
			&SyncInfo, *sync_correlator_);
		if(BSIC_Error == BSIC_NO_ERROR) {
			meas.sync_burst_decoded_ = true;
			meas.bsic_ = (SyncInfo.NCC << 4) + SyncInfo.BCC;
			meas.tdma_frame_number_ = GetTDMAFrameNumber(SyncInfo);
		}
	}

	return 0;
}

int GsmSyncProcessor::bcch_burst_analysis(const DATASTRUCT *data, unsigned int datasize, rf_phreaker::gsm_measurement &meas) {
	CGIChannelInfoType CGIInfo;
	CGIDecoderMsgType CGI_Error;

	if(meas.bsic_ == -1)
		return 0;

	auto str = std::to_string(meas.bsic_);
	auto it = str.begin();
	char tmp[2];
	memset(tmp, 0, sizeof(char)*2);
	char *endptr;
	std::copy(it, it + (str.size() > 2 ? 2 : str.size()), tmp);
	auto bsic = strtol(tmp, &endptr, 16);

	const uint32_t sync_to_cgi_end_offset = (uint32_t)((GSM_SYNC_CGI_FRAMES_OFFSET * GSM_BITS_PER_FRAME) * NETSTART_SAMPLES_PER_GSM_BIT);

	unsigned int rf_phreaker_bcch_end = meas.sync_sample_num_ + sync_to_cgi_end_offset
		+ (unsigned int)(GSM_BURST_LEN_BITS * NETSTART_SAMPLES_PER_GSM_BIT);

	if(meas.tdma_frame_number_ % 51 == 1 && rf_phreaker_bcch_end < datasize) {
		CGI_Error = CGI_Decoder_->DecodeCGI(
			&(data[meas.sync_sample_num_]),
			meas.intermediate_frequency_,
			bsic,
			&CGIInfo, meas.bcch_octets_);
		if(CGI_Error == CGI_NO_ERROR) {
			meas.bcch_burst_decoded_ = true;

			// Attempt to decode extended BCCH if the snapshot has room and TC = 5. 
			// (It's possible that si4quater is broadcast on TC = 5, si7 is TC = 7, si8 is TC = 3;
			const auto tc = (int)(meas.tdma_frame_number_ / 51) % 8;
			if(tc == 5 || tc == 3 || tc == 7) {
				unsigned int rf_phreaker_extended_bcch_end = (unsigned int)meas.sync_sample_num_ + 2 * sync_to_cgi_end_offset
					+ (unsigned int)(GSM_BURST_LEN_BITS * NETSTART_SAMPLES_PER_GSM_BIT);

				if(rf_phreaker_extended_bcch_end <= datasize) {
					CGI_Error = CGI_Decoder_->DecodeCGI(
						&data[meas.sync_sample_num_ + sync_to_cgi_end_offset],
						meas.intermediate_frequency_,
						bsic,
						&CGIInfo, meas.extended_bcch_octets_);
					if(CGI_Error == CGI_NO_ERROR) {
						meas.extended_bcch_burst_decoded_ = true;
					}
				}
			}
		}
	}
	return 0;
}

bool GsmSyncProcessor::ValidBcchData(BSICChannelInfoType RFN, unsigned int sync_location)
{
	// TODO: fix this up to use blocksize and datasize!!!

	// CGI is in the BCCH bursts of the 4 frames after the sync burst
	// so we need to check 4 frames + 1 burst to ensure the full CGI is there

	const unsigned int SYNC_TO_CGI_OFFSET = (unsigned int)
		( (GSM_SYNC_CGI_FRAMES_OFFSET * GSM_BITS_PER_FRAME) * NETSTART_SAMPLES_PER_GSM_BIT );

	unsigned int RF_PHREAKER_CGI_End = sync_location + SYNC_TO_CGI_OFFSET
		+  (unsigned int) (GSM_BURST_LEN_BITS * NETSTART_SAMPLES_PER_GSM_BIT);

	unsigned int T3, TMod, TC;

	if ( RFN.T2 > 25 ) return false;
	if ( RFN.T3 > 4 ) return false;

	T3 = RFN.T3 * 10 + 1;
	TMod = (T3 + 26 - RFN.T2) % 26;
	TC = (TMod + 26 * RFN.T1) % 8;

	if ( T3 == 1 )
	{
		// correct BCCH burst, so need to check if data is OK
		// TODO: do something about datasize - like pass in the SyncStruct?
		return ( RF_PHREAKER_CGI_End <= datasize_ );
	}
	else return false;
}