/*
 * Generated by asn1c-0.9.22 (http://lionet.info/asn1c)
 * From ASN.1 module "InformationElements"
 * 	found in "rcc.txt"
 * 	`asn1c -S/skeletons -fnative-types -fcompound-names`
 */

#ifndef	_MeasurementType_H_
#define	_MeasurementType_H_


#include <rf_phreaker/umts_rrc_asn_library/asn_application.h>

/* Including external dependencies */
#include "rf_phreaker/umts_rrc_asn_library/IntraFrequencyMeasurement.h"
#include "rf_phreaker/umts_rrc_asn_library/InterFrequencyMeasurement.h"
#include "rf_phreaker/umts_rrc_asn_library/InterRATMeasurement.h"
#include "rf_phreaker/umts_rrc_asn_library/UE-Positioning-Measurement.h"
#include "rf_phreaker/umts_rrc_asn_library/TrafficVolumeMeasurement.h"
#include "rf_phreaker/umts_rrc_asn_library/QualityMeasurement.h"
#include "rf_phreaker/umts_rrc_asn_library/UE-InternalMeasurement.h"
#include <rf_phreaker/umts_rrc_asn_library/constr_CHOICE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum MeasurementType_PR {
	MeasurementType_PR_NOTHING,	/* No components present */
	MeasurementType_PR_intraFrequencyMeasurement,
	MeasurementType_PR_interFrequencyMeasurement,
	MeasurementType_PR_interRATMeasurement,
	MeasurementType_PR_ue_positioning_Measurement,
	MeasurementType_PR_trafficVolumeMeasurement,
	MeasurementType_PR_qualityMeasurement,
	MeasurementType_PR_ue_InternalMeasurement
} MeasurementType_PR;

/* MeasurementType */
typedef struct MeasurementType {
	MeasurementType_PR present;
	union MeasurementType_u {
		IntraFrequencyMeasurement_t	 intraFrequencyMeasurement;
		InterFrequencyMeasurement_t	 interFrequencyMeasurement;
		InterRATMeasurement_t	 interRATMeasurement;
		UE_Positioning_Measurement_t	 ue_positioning_Measurement;
		TrafficVolumeMeasurement_t	 trafficVolumeMeasurement;
		QualityMeasurement_t	 qualityMeasurement;
		UE_InternalMeasurement_t	 ue_InternalMeasurement;
	} choice;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} MeasurementType_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_MeasurementType;

#ifdef __cplusplus
}
#endif

#endif	/* _MeasurementType_H_ */
