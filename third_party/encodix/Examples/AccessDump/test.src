declare gsm-0407 message set L3Downlink;
declare gsm-0407 message set L3Uplink;
declare gsm-0407-plen incoming message set PLENDownlink;
declare gsm-0407-xtid message set XTIDUplink;

/*-----------------------------------------------------------------------
    MESSAGE: IMMEDIATE ASSIGNMENT EXTENDED
    CHAPTER: TS 04.18 9.1.19
  DIRECTION: DOWNLINK
-----------------------------------------------------------------------*/
gsm-0407-plen IMMEDIATE_ASSIGNMENT_EXTENDED_UP {
  in message set PLENDownlink;
  ProtocolDiscriminator = 0110;
  MessageType           = 00111001;

     PageMode                             M V   1/2     PageMode            ; # 10.5.2.26
     SpareHalfOctet                       M V   1/2     force void default=0; # 10.5.1.8
     ChannelDescription1                  M V   3       TChDesc             ; # 10.5.2.5
     ReqRef1                              M V   3       RequestReference    ; # 10.5.2.30
     TimingAdvance1                       M V   1       TimingAdvance       ; # 10.5.2.40
     ChannelDescription2                  M V   3       TChDesc             ; # 10.5.2.5
     ReqRef2                              M V   3       RequestReference    ; # 10.5.2.30
     TimingAdvance2                       M V   1       TimingAdvance       ; # 10.5.2.40
     MobileAllocation                     M LV  1-5     MobileAllocation    ; # 10.5.2.21
  7C StartingTime                         O TV  3       StartingTime        ; # 10.5.2.38
  **EndOfL2Length**;
     IaxRestOctets                        M V   0-4     IAXRestOctets       ; # 10.5.2.18
};

/*-----------------------------------------------------------------------
    MESSAGE: ALERTING
    CHAPTER: TSM 24.008 9.3.1.1
  DIRECTION: DOWNLINK
-----------------------------------------------------------------------*/
gsm-0407 ALERTING_DN {
  #SDL in signallist L3Downlink;
  in message set L3Downlink;
  ProtocolDiscriminator = 0011;
  MessageType           = xx000001;

  HandleTransactionIdentifier;

  1C Facility                             O TLV >=2     binary /* See 3GPP TS 24.080 */ ; # 10.5.4.15
  1E ProgrInd                             O TLV 4       ProgrInd            ; # 10.5.4.21
  7E UserUser                             O TLV 3-131   binary              ; # 10.5.4.25
};

/*-----------------------------------------------------------------------
    MESSAGE: CM SERVICE REQUEST
    CHAPTER: TSM 24.008 9.2.9
  DIRECTION: UPLINK
-----------------------------------------------------------------------*/
gsm-0407 CM_SERVICE_REQUEST_UP {
  #SDL in signallist L3Uplink;
  in message set L3Uplink;
  ProtocolDiscriminator = 0101;
  MessageType           = xx100100;

     CmServType                           M V   1/2     integer             ; # 10.5.3.3
     CiphKeySequenceNum                   M V   1/2     integer             ; # 10.5.1.2
     MobileStationClassmark               M LV  4       MobileStationClassmark2; # 10.5.1.6
     MobileId                             M LV  2-9     MobileId            ; # 10.5.1.4
  8- Priority                             O TV  1       integer             ; # 10.5.1.11
};

/*-----------------------------------------------------------------------
    MESSAGE: ACTIVATE PDP CONTEXT REQUEST
    CHAPTER: TSM 24.008 9.5.1
  DIRECTION: UPLINK
-----------------------------------------------------------------------*/
gsm-0407-xtid ACTIVATE_PDP_CONTEXT_REQUEST_UP {
  #SDL in signallist L3Uplink;
  in message set XTIDUplink;
  ProtocolDiscriminator = 1010;
  MessageType           = 01000001;

  HandleTransactionIdentifier;

     ReqNsapi                             M V   1       NetwkServAccessPointId; # 10.5.6.2
     ReqLlcSapi                           M V   1       LlcServAccessPointId; # 10.5.6.9
     ReqQos                               M LV  >=4     QualityOfServ       ; # 10.5.6.5
     ReqPdpAddr                           M LV  3-19    PacketDataProtocolAddr; # 10.5.6.4
  28 AccessPointName                      O TLV 3-102   binary              ; # 10.5.6.1
  27 ProtocolCfgOpt                       O TLV 3-253   ProtocolCfgOpt      ; # 10.5.6.3
};

/*-----------------------------------------------------------------------
    MESSAGE: SYSTEM INFORMATION TYPE 1
    CHAPTER: TS 04.18 9.1.31
  DIRECTION: DOWNLINK
-----------------------------------------------------------------------*/
gsm-0407-plen SYSTEM_INFORMATION_TYPE_1_UP {
  in message set PLENDownlink;
  ProtocolDiscriminator = 0110;
  MessageType           = 00011001;
  L2PseudoLength        = 21;

     CellChannelDescription               M V   16      CellChannel         ; # 10.5.2.1b
     RachControlParam                     M V   3       RACHCtrlParam       ; # 10.5.2.29
     Si1RestOctets                        M V   1       ; # 10.5.2.32
};


/*-----------------------------------------------------------------------
    MESSAGE: SYSTEM INFORMATION TYPE 2
    CHAPTER: TS 04.18 9.1.32
  DIRECTION: DOWNLINK
-----------------------------------------------------------------------*/
gsm-0407-plen SYSTEM_INFORMATION_TYPE_2_UP {
  in message set PLENDownlink;
  ProtocolDiscriminator = 0110;
  MessageType           = 00011010;
  L2PseudoLength        = 22;

     BcchFrequencyList                    M V   16      NeighbourCellDescription; # 10.5.2.22
     NccPermitted                         M V   1       integer             ; # 10.5.2.27
     RachControlParam                     M V   3       RACHCtrlParam       ; # 10.5.2.29
};

/*-----------------------------------------------------------------------
    MESSAGE: SYSTEM INFORMATION TYPE 2TER
    CHAPTER: TS 04.18 9.1.34
  DIRECTION: DOWNLINK
-----------------------------------------------------------------------*/
gsm-0407-plen SYSTEM_INFORMATION_TYPE_2TER_UP {
  in message set PLENDownlink;
  ProtocolDiscriminator = 0110;
  MessageType           = 00000011;
  L2PseudoLength        = 18;

     ExtendedBcchFrequencyList            M V   16      NeighbourCellDescription2; # 10.5.2.22a
     Si2terRestOctets                     M V   >=1     SI2terRestOctets         ; # 10.5.2.33a
};

/*-----------------------------------------------------------------------
    MESSAGE: SYSTEM INFORMATION TYPE 5
    CHAPTER: TS 04.18 9.1.37
  DIRECTION: DOWNLINK
-----------------------------------------------------------------------*/
gsm-0407-plen SYSTEM_INFORMATION_TYPE_5_UP {
  in message set PLENDownlink;
  ProtocolDiscriminator = 0110;
  MessageType           = 00011101;
  L2PseudoLength        = 18;

     BcchFrequencyList                    M V   16      NeighbourCellDescription; # 10.5.2.22
};

/*-----------------------------------------------------------------------
    MESSAGE: CHANNEL RELEASE
    CHAPTER: TS 04.18 9.1.7
  DIRECTION: DOWNLINK
-----------------------------------------------------------------------*/
gsm-0407 CHANNEL_RELEASE_UP {
  in message set L3Downlink;
  ProtocolDiscriminator = 0110;
  MessageType           = 00001101;

     RrCause                              M V   1       integer             ; # 10.5.2.31
  73 BaRange                              O TLV >=3     BaRange             ; # 10.5.2.1a
  74 GroupChannelDescription              O TLV 4-13    GrpChannelDesc      ; # 10.5.2.14b
  8- GroupCipherKeyNum                    C TV  1       integer             ; # 10.5.1.10
  C- GprsResumption                       O TV  1       GPRSResumption      ; # 10.5.2.14c
  75 BaListPref                           O TLV >=3     BA_List_Pref        ; # 10.5.2.1c
  76 UTRANFreqList                        O TLV >=3     UTRANFreqList       ; # 10.5.2.1d
};

#=================================================================
# BASIC CSN.1 LIBRARY - Needed by most ETSI CSN.1 declarations
#=================================================================
csn.1 {
	<bit> ::= 0|1;
	<bit string> ::= bit**;
	<spare L> ::= L;
	<spare bits> ::= L|H;
	<spare bit> ::= <bit>;
	<octet> ::= bit*(8);
	<no string> ::= null;
	-- <spare padding>::= L* ENCODE_EXPR: %{(8 - (CURPOS & 7)) & 7}% DECODE_INFINITE;
	-- Relaxed version of the spare padding:
	<spare padding>::= {bit = L} * ENCODE_EXPR: %{(8 - (CURPOS & 7)) & 7}% DECODE_INFINITE;
	<padding bits> ::= <bit>**;

	slave <A5 bits> ::= <A5/7: bit> <A5/6: bit> <A5/5: bit> <A5/4: bit>;
}

#------------------------------------
# ETSI 24.008, 10.5.1.6
#------------------------------------
bit-field MobileStationClassmark2 {
	size: 3 octets;
	octet 1 {
		bit 8: spare1 void default = 0;
		bits 6-7: RevisionLevel integer;
		bit 5: EsInd boolean;
		bit 4: A5_1 boolean;
		bits 1-3: RFPowerCapability integer;
	};
	octet 2 {
		bit 8: spare2 void default = 0;
		bit 7: PSCapability boolean;
		bits 5-6: SSScreenIndicator integer;
		bit 4: SMCapability boolean;
		bit 3: VBS boolean;
		bit 2: VGCS boolean;
		bit 1: FC boolean;
	};
	octet 3 {
		bit 8: CM3 boolean;
		bit 7: spare3 void default = 0;
		bit 6: LCSVA_CAP boolean;
		bit 5: UCS2 boolean;
		bit 4: SoLSA boolean;
		bit 3: CMSP boolean;
		bit 2: A5_3 boolean;
		bit 1: A5_2 boolean;
	};
}

dcl-type TChType {
	size 5 bits;
	type struct {
		ChType: integer enum {
			b00001 = "TCH/F + ACCHs"
			b00010 = "TCH/H + ACCHs"
			b00100 = "SDCCH/4 + SACCH/C4 or CBCH (SDCCH/4)"
			b01000 = "SDCCH/8 + SACCH/C8 or CBCH (SDCCH/8)"
		};
		Subchannel: integer;
	}

  encode %{
  	int Value = 0;
		switch (Source->ChType) {
			case 1: Value = 1; break;
			case 2: Value = 2 | (Source->Subchannel & 0x01); break;
			case 4: Value = 4 | (Source->Subchannel & 0x03); break;
			case 8: Value = 8 | (Source->Subchannel & 0x07); break;
		}
		PUSH_INT (Value, 5);
		return 5;
  }%

  decode %{
  	int Value = SHIFT_INT (5);
  	if (Value == 1) {
  		Destin->Subchannel = 0;
  		Destin->ChType = 1;
  	}
  	else if ((Value & 0x08) == 0x08) {
  		Destin->Subchannel = Value & 0x07;
  		Destin->ChType = 8;
  	}
  	else if ((Value & 0x04) == 0x04) {
  		Destin->Subchannel = Value & 0x03;
  		Destin->ChType = 4;
  	}
  	else if ((Value & 0x02) == 0x02) {
  		Destin->Subchannel = Value & 0x01;
  		Destin->ChType = 2;
  	}
		return 5;
  }%
}

bit-field TChDesc {
	size: 3 octets;
	octet 1 bits 4-8: ChType TChType;
	octet 1 bits 1-3: TN integer;
	octet 2 bits 6-8: TSC integer;
	octet 2 bit  5  : H boolean;

	octet 3 conditional %{DATA.H}% {
		bits 7-12: MAIO integer;
		bits 1-6: HSN integer;
	};
	octet 3 conditional %{!DATA.H}% {
		bit 11-12: spare void default=0;
		bits 1-10: ARFCN integer;
	};
}

#------------------------------------
# TS 04.18, 10.5.2.1a
#------------------------------------
dcl-type BaRange {
	size 1 octets ... 256 octets;
	type sequence [32] struct {
		Lower: integer;
		Higher: integer;
	}

  encode %{
  	int i;

  	PUSH_INT (Source->items, 8);

  	/* Write the 10-bits fields */
  	for (i=0; i<Source->items; i++) {
  		PUSH_INT (VAR_c_BaRange_data (Source->data [i]).Lower, 10);
  		PUSH_INT (VAR_c_BaRange_data (Source->data [i]).Higher, 10);
  	}

  	/* Calculate how many bits are left to complete an octet */
  	i = 8 - (CURPOS & 7);
  	if (i != 8) PUSH_INT (0, i);

		return CURPOS-BitOffset;
  }%

  decode %{
  	int i;

  	SETITEMS_c_BaRange (Destin, SHIFT_INT (8));
  	/* Make sure we don't go out of range */
  	if (Destin->items > sizeof (Destin->data)/sizeof (Destin->data[0])) {
  		return ED_SYNTAX_ERROR;
  	}
  	/* Read the 10-bits fields */
  	for (i=0; i<Destin->items; i++) {
  		VAR_c_BaRange_data (Destin->data [i]).Lower = SHIFT_INT (10);
  		VAR_c_BaRange_data (Destin->data [i]).Higher = SHIFT_INT (10);
  	}

  	/* Calculate how many bits are left to complete an octet */
  	i = 8 - (CURPOS & 7);

  	if (i != 8) CURPOS += i;

		return CURPOS-BitOffset;
  }%
}
#------------------------------------
# TS 04.18, 10.5.2.1c
#------------------------------------
csn.1 {
	<BA List Pref>::=
		{1 <Range: RANGE LIMITS >}**0
		{1 <BA FREQ : bit (10)>}**0
		<spare padding>;

	slave <RANGE LIMITS>::=
		<RANGE LOWER : bit (10)>
		<RANGE UPPER : bit (10)>;
}

#------------------------------------
# TS 04.18, 10.5.2.1d
#------------------------------------
csn.1 {
	<UTRANFreqList>::=
		{ 1 < FDD_ARFCN : bit (14)> } ** 0 		-- FDD frequencies
		{ 1 < TDD_ARFCN : bit (14)> } ** 0 		-- TDD frequencies
		<spare padding>;
}

#------------------------------------
# TS 04.18, 10.5.2.14b
#------------------------------------
sequence GrpChannelMA [72] boolean size 1 bit;

bit-field GrpChannelDesc {
	size: 3 octets;
	max size: 12 octets;
	octet 1 bits 4-8: ChType integer;
	octet 1 bits 1-3: TN integer;
	octet 2 bits 6-8: TSC integer;
	octet 2 bit  5  : H boolean;

	octet 3 conditional %{DATA.H}% {
		bits 7-12: MAIO integer;
		bits 1-6: HSN integer;
	};
	octet 3 conditional %{!DATA.H}% {
		bit 11-12: spare void default=0;
		bits 1-10: ARFCN integer;
	};
	remainder: MA GrpChannelMA;
}

#------------------------------------
# TS 04.18, 10.5.2.14c
#------------------------------------
bit-field GPRSResumption {
	size: 4 bits;
	bit 1: ACK boolean;
	bits 2-4: spare void default=0;
}
#------------------------------------
# TS 04.18, 10.5.2.18
#------------------------------------
csn.1 {
	<IAXRestOctets> ::= <dummy{void}:null><spare padding>;
}

#------------------------------------
# TS 04.18, 10.5.2.21
#------------------------------------
sequence MobileAllocation [64] boolean size 1 bit;

#NAME NeighbourCellDescription
#------------------------------------
# TS 04.18, 10.5.2.22
#------------------------------------
dcl-type NeighbourCellDescription {
	size 16 octets
	type struct {
		# If TMSI/P-TMSI it is coded using 4 digits of IdentityDigit
		CellDescription: CellChannel;
		ExtInd: boolean;
		BAInd: boolean;
	}

  encode %{
  	int ret = ENCODE_c_CellChannel (Buffer, BitOffset, PTR_c_NeighbourCellDescription_CellDescription (THIS->CellDescription));
  	EDIntToBits (Buffer, 2, (THIS->ExtInd? 1 : 0), 1);
  	EDIntToBits (Buffer, 3, (THIS->BAInd? 1 : 0), 1);
  	return ret;
  }%

  decode %{
  	int ret = DECODE_c_CellChannel (Buffer, BitOffset, PTR_c_NeighbourCellDescription_CellDescription (THIS->CellDescription), Length);
  	THIS->ExtInd = (EDBitsToInt (Buffer, 2, 1) ? ED_TRUE : ED_FALSE);
  	THIS->BAInd = (EDBitsToInt (Buffer, 3, 1) ? ED_TRUE : ED_FALSE);
  	return ret;
  }%
}

#NAME NeighbourCellDescription2
#------------------------------------
# TS 04.18, 10.5.2.22a
#------------------------------------
dcl-type NeighbourCellDescription2 {
	size 16 octets
	type struct {
		# If TMSI/P-TMSI it is coded using 4 digits of IdentityDigit
		CellDescription: CellChannel;
		MultibandReporting: octet enum {
			b00 = "Report of the six strongest cells"
			b01 = "Report of the strongest cell"
			b10 = "Report of the two strongest cells"
			b11 = "Report of the three strongest cells"
		};
		BAInd: boolean;
	}

  encode %{
  	int ret = ENCODE_c_CellChannel (Buffer, BitOffset, PTR_c_NeighbourCellDescription_CellDescription (THIS->CellDescription));
  	EDIntToBits (Buffer, BitOffset+1, THIS->MultibandReporting, 2);
  	EDIntToBits (Buffer, BitOffset+3, (THIS->BAInd? 1 : 0), 1);
  	return ret;
  }%

  decode %{
  	int ret = DECODE_c_CellChannel (Buffer, BitOffset, PTR_c_NeighbourCellDescription_CellDescription (THIS->CellDescription), Length);
  	THIS->MultibandReporting = EDBitsToInt (Buffer, BitOffset+1, 2);
  	THIS->BAInd = (EDBitsToInt (Buffer, BitOffset+3, 1) ? ED_TRUE : ED_FALSE);
  	return ret;
  }%
}

#------------------------------------
# TS 04.18, 10.5.2.30
#------------------------------------
bit-field RequestReference {
	size: 3 octets;
	bits 17-24: RA integer;
	bits 12-16: T1 integer;
	bits  8-11: T3 integer;
	bits  1-5:  T2 integer;
}

#------------------------------------
# TS 04.18, 10.5.2.38
#------------------------------------
bit-field StartingTime {
	size: 2 octets;
	bits 12-16: T1 integer;
	bits  6-11: T3 integer;
	bits  1-5:  T2 integer;
}

#------------------------------------
# TS 04.18, 10.5.2.40
#------------------------------------
bit-field TimingAdvance {
	size: 1 octet;
	bits 7-8: spare void default=0;
	bits 1-6: value integer;
}

#------------------------------------
# ETSI 24.008, 10.5.4.21
#------------------------------------
bit-field ProgrInd {
	size: 2 octets;
	octet 1 {
		bit 8: ext1 void default = 1;
		bits 6-7: CodingStandard integer enum {
			b00 = "Standardized coding, as described in ITU-T Rec. Q.931"
			b01 = "Reserved for other international standards"
			b10 = "National standard"
			b11 = "Standard defined for the GSM/PLMNS"
		};
		bit 5: spare void default = 0;
		bits 1-4: location integer enum {
			b0000	= "User"
			b0001	= "Private network serving the local user"
			b0010	= "Public network serving the local user"
			b0100	= "Public network serving the remote user"
			b0101	= "Private network serving the remote user"
			b1010	= "Network beyond interworking point"
		};
	};
	octet 2 {
		bit 8: ext2 void default = 1;
		bit 1-7: ProgressDescription integer enum {
			b0000001 = "Call is not end-to-end PLMN/ISDN, further call progress information may be available in-band"
			b0000010 = "Destination address in non-PLMN/ISDN"
			b0000011 = "Origination address in non-PLMN/ISDN"
			b0000100 = "Call has returned to the PLMN/ISDN"
			b0001000 = "In-band information or appropriate pattern now available"
			b0100000 = "Call is end-to-end PLMN/ISDN"
			b1000000 = "Queueing"
			default = "Unspecific"
		};
	};
}


#------------------------------------
# ETSI 24.008, 10.5.1.4
#------------------------------------
dcl-type MobileId {
	size 1 octet ... 9 octets;
	type struct {
		# If TMSI/P-TMSI it is coded using 4 digits of IdentityDigit
		IdentityDigit: sequence [15] integer;
		IdentityType:  integer enum {
			b001 = "IMSI"
			b010 = "IMEI"
			b011 = "IMEISV"
			b100 = "TMSI/P-TMSI"
			b000 = "No Identity"
		};
	}

  encode %{
  	int i;
		
		if (Source->IdentityType == 4) {
	  	/* Push digit 1 */
 			PUSH_INT (0xf4, 8);
 			
 			/* Push the values */
 			for (i=0; i<Source->IdentityDigit.items; i++) {
 				PUSH_INT (Source->IdentityDigit.data [i], 8);
 			}
			return (Source->IdentityDigit.items + 1) << 3;
		} else {
			
	  	/* Push digit 1 */
	 		PUSH_INT (Source->IdentityDigit.items == 0? 15 : Source->IdentityDigit.data [0], 4);
	
	 		/* Push odd/even indicator */
	  	PUSH_INT ((Source->IdentityDigit.items & 1) ? 1 : 0, 1);
	
	  	/* Push identity type */
	  	PUSH_INT (Source->IdentityType, 3);
			
	  	/* Push remaining digits */
	  	for (i=1; i<Source->IdentityDigit.items; i+=2) {
	  		PUSH_INT (i+1 >= Source->IdentityDigit.items? 15 : Source->IdentityDigit.data [i+1], 4);
	  		PUSH_INT (Source->IdentityDigit.data [i], 4);
	  	}
			return ((Source->IdentityDigit.items >> 1) << 3) + 8;
	  }
  }%

  decode %{
  	int i, odd;

  	/* Shift digit 1 (we don't know yet whether it is valid or not) */
  	i = SHIFT_INT (4);

  	/* Shift odd indicator */
  	odd = SHIFT_INT (1);

		/* Now we know exactly how many items to expect */
  	SETITEMS_c_MobileId_IdentityDigit (&Destin->IdentityDigit, (Length >> 2) - (odd ? 1 : 2));

  	/* Now we know whether digit 1 is valid or not */
  	if (Destin->IdentityDigit.items > 0) Destin->IdentityDigit.data [0] = i;

		/* Extract identity type */
		Destin->IdentityType = SHIFT_INT (3);
	
		/* If decoding a TMSI/P-TMSI, just get the following bytes */
		if (Destin->IdentityType == 4) {
			SETITEMS_c_MobileId_IdentityDigit (&(Destin->IdentityDigit), (Length>>3) - 1);
			for (i=0; i < Destin->IdentityDigit.items; i++) {
				Destin->IdentityDigit.data [i] = SHIFT_INT (8);
			}
		}
		else {
	  	/* Get the remaining digits */
	  	for (i=1; i < Destin->IdentityDigit.items; i+=2) {
	  		if (i+1 >= Destin->IdentityDigit.items) {
	  			SHIFT_INT (4); /* Discard it! */
	  		}
	  		else {
	  			Destin->IdentityDigit.data [i+1] = SHIFT_INT (4);
	  		}
	 			Destin->IdentityDigit.data [i] = SHIFT_INT (4);
	  	}
		}
		return Length;
  }%
}


#------------------------------------
# TS 04.18, 10.5.2.1b
#
# WARNING
# The sizes given to the arrays are not the theorical maximum.
# Change them to the right compromise of data size vs. elements required.
#------------------------------------
dcl-type CellChannel {
	size 2 octets ... 130 octets;
	type union {
		BitMap0: sequence [124] boolean;
		Range1024: struct {
			W: sequence [64] integer;
			F0: boolean;
		}
		Range512: struct {
			W: sequence [64] integer;
			OrigARFCN: integer;
		}
		Range256: struct {
			W: sequence [64] integer;
			OrigARFCN: integer;
		}
		Range128: struct {
			W: sequence [64] integer;
			OrigARFCN: integer;
		}
		Variable: struct {
			RRFCN: sequence [111] boolean;
			OrigARFCN: integer;
		}
	}

  encode %{
  	int i, len;
  	switch (GETPRESENT_c_CellChannel (Source)) {
	   	/*---------------------------------------------------------
	  		DETECT BITMAP 0 FORMAT (signature 00XXX)
	  	---------------------------------------------------------*/
	  	case U_c_CellChannel_BitMap0: {
	  		PUSH_INT (0, 4); // Signature
	  		for (i=0; i<VAR_c_CellChannel_BitMap0 (Source->u.BitMap0).items; i++) {
	  			PUSH_INT ((VAR_c_CellChannel_BitMap0 (Source->u.BitMap0).data [i]? 1 : 0), 1);
	  		}
	  		break;
	  	}
	  	/*---------------------------------------------------------
	  		DETECT BITMAP 1024 RANGE (signature 10000XX)
	  	---------------------------------------------------------*/
	  	case U_c_CellChannel_Range1024: {
	  		PUSH_INT (0x10, 5); // Signature

	  		PUSH_INT ((VAR_c_CellChannel_Range1024 (Source->u.Range1024).F0? 1 : 0), 1);

	  		for (i=0; i < VAR_c_CellChannel_Range1024 (Source->u.Range1024).W.items; i++) {
	  			if (i==0) len = 10;
	  			else if (i>=1 && i<=2) len = 9;
	  			else if (i>=3 && i<=6) len = 8;
	  			else if (i>=7 && i<=14) len = 7;
	  			else if (i>=15 && i<=30) len = 6;
	  			else if (i>=31 && i<=62) len = 5;
	  			else if (i>=63 && i<=126) len = 4;
	  			else len = 3;
	  			PUSH_INT (VAR_c_CellChannel_Range1024 (Source->u.Range1024).W.data [i], len);
	  		}
	  		break;
	  	}
	  	/*---------------------------------------------------------
	  		DETECT BITMAP 512 RANGE (signature 1000100)
	  	---------------------------------------------------------*/
	  	case U_c_CellChannel_Range512: {
	  		PUSH_INT (0x44, 7); // Signature

	  		PUSH_INT (VAR_c_CellChannel_Range512 (Source->u.Range512).OrigARFCN, 10);

	  		for (i=0; i < VAR_c_CellChannel_Range512 (Source->u.Range512).W.items; i++) {
	  			if (i==0) len = 9;
	  			else if (i>=1 && i<=2) len = 8;
	  			else if (i>=3 && i<=6) len = 7;
	  			else if (i>=7 && i<=14) len = 6;
	  			else if (i>=15 && i<=30) len = 5;
	  			else if (i>=31 && i<=62) len = 4;
	  			else if (i>=63 && i<=126) len = 3;
	  			else len = 2;
	  			PUSH_INT (VAR_c_CellChannel_Range512 (Source->u.Range512).W.data [i], len);
	  		}

	  		break;
	  	}
	  	/*---------------------------------------------------------
	  		DETECT BITMAP 256 RANGE (signature 1000101)
	  	---------------------------------------------------------*/
	  	case U_c_CellChannel_Range256: {
	  		PUSH_INT (0x45, 7); // Signature

	  		PUSH_INT (VAR_c_CellChannel_Range256 (Source->u.Range256).OrigARFCN, 10);

	  		for (i=0; i<VAR_c_CellChannel_Range256 (Source->u.Range256).W.items; i++) {
	  			if (i==0) len = 8;
	  			else if (i>=1 && i<=2) len = 7;
	  			else if (i>=3 && i<=6) len = 6;
	  			else if (i>=7 && i<=14) len = 5;
	  			else if (i>=15 && i<=30) len = 4;
	  			else if (i>=31 && i<=62) len = 3;
	  			else if (i>=63 && i<=126) len = 2;
	  			else len = 1;
	  			PUSH_INT (VAR_c_CellChannel_Range256 (Source->u.Range256).W.data [i], len);
	  		}

	  		break;
	  	}
	  	/*---------------------------------------------------------
	  		DETECT BITMAP 128 RANGE (signature 1000110)
	  	---------------------------------------------------------*/
	  	case U_c_CellChannel_Range128: {
	  		PUSH_INT (0x46, 7); // Signature

	  		PUSH_INT (VAR_c_CellChannel_Range128 (Source->u.Range128).OrigARFCN, 10);

	  		for (i=0; i<VAR_c_CellChannel_Range128 (Source->u.Range128).W.items; i++) {
	  			if (i==0) len = 7;
	  			else if (i>=1 && i<=2) len = 6;
	  			else if (i>=3 && i<=6) len = 5;
	  			else if (i>=7 && i<=14) len = 4;
	  			else if (i>=15 && i<=30) len = 3;
	  			else if (i>=31 && i<=62) len = 2;
	  			else len = 1;

	  			PUSH_INT (VAR_c_CellChannel_Range128 (Source->u.Range128).W.data [i], len);
	  		}

	  		break;
	  	}
	  	/*---------------------------------------------------------
	  		DETECT BITMAP VARIABLE (signature 1000111)
	  	---------------------------------------------------------*/
	  	case U_c_CellChannel_Variable: {
	  		PUSH_INT (0x47, 7); // Signature

	  		PUSH_INT (VAR_c_CellChannel_Variable (Source->u.Variable).OrigARFCN, 10);

	  		for (i=0; i<VAR_c_CellChannel_Variable (Source->u.Variable).RRFCN.items; i++) {
	  			PUSH_INT (VAR_c_CellChannel_Variable (Source->u.Variable).RRFCN.data [i], 1);
	  		}

	  		break;
	  	}
	  	/*---------------------------------------------------------
	  		UNKNOWN CODING!
	  	---------------------------------------------------------*/
	  	default: return ED_SYNTAX_ERROR;
	  }

		// Pad with zeroes
		len = (8 - (CURPOS & 7)) & 7;
		if (len > 0) PUSH_INT (0, len);

		return CURPOS-BitOffset;
  }%

  decode %{
  	int i, len;

  	/* Determine which type of encoding we have */
  	int Signature = EDBitsToInt (Buffer, CURPOS, 7);

  	/* Make sure spare bits are set to 0 */
  	Signature &= 0x47;

  	/*---------------------------------------------------------
  		DETECT BITMAP 0 FORMAT (signature 00XXX)
  	---------------------------------------------------------*/
  	if ((Signature & 0x60) == 0x00) {
  		SETPRESENT_c_CellChannel_BitMap0 (Destin);
  		CURPOS += 4;
  		for (i=0; i<Length-4 && i < 124; i++) {
  			VAR_c_CellChannel_BitMap0 (Destin->u.BitMap0).data [i] = SHIFT_INT (1);
  		}
 			VAR_c_CellChannel_BitMap0 (Destin->u.BitMap0).items = i;
  	}
  	/*---------------------------------------------------------
  		DETECT BITMAP 1024 RANGE (signature 10000XX)
  	---------------------------------------------------------*/
  	else if ((Signature & 0x64) == 0x40) {
  		SETPRESENT_c_CellChannel_Range1024 (Destin);
  		CURPOS += 5;
  		VAR_c_CellChannel_Range1024 (Destin->u.Range1024).F0 = SHIFT_INT (1);

  		for (i=0; i<64; i++) {
  			if (i==0) len = 10;
  			else if (i>=1 && i<=2) len = 9;
  			else if (i>=3 && i<=6) len = 8;
  			else if (i>=7 && i<=14) len = 7;
  			else if (i>=15 && i<=30) len = 6;
  			else if (i>=31 && i<=62) len = 5;
  			else if (i>=63 && i<=126) len = 4;
  			else len = 3;
  			if (CURPOS - BitOffset + len > Length) break;
  			VAR_c_CellChannel_Range1024 (Destin->u.Range1024).W.data [i] = SHIFT_INT (len);
  		}
 			VAR_c_CellChannel_Range1024 (Destin->u.Range1024).W.items = i;
  	}
  	/*---------------------------------------------------------
  		DETECT BITMAP 512 RANGE (signature 1000100)
  	---------------------------------------------------------*/
  	else if ((Signature & 0x67) == 0x44) {
  		SETPRESENT_c_CellChannel_Range512 (Destin);
  		CURPOS += 7;
  		VAR_c_CellChannel_Range512 (Destin->u.Range512).OrigARFCN = SHIFT_INT (10);

  		for (i=0; i<64; i++) {
  			if (i==0) len = 9;
  			else if (i>=1 && i<=2) len = 8;
  			else if (i>=3 && i<=6) len = 7;
  			else if (i>=7 && i<=14) len = 6;
  			else if (i>=15 && i<=30) len = 5;
  			else if (i>=31 && i<=62) len = 4;
  			else if (i>=63 && i<=126) len = 3;
  			else len = 2;
  			if (CURPOS - BitOffset + len > Length) break;
  			VAR_c_CellChannel_Range512 (Destin->u.Range512).W.data [i] = SHIFT_INT (len);
  		}
 			VAR_c_CellChannel_Range512 (Destin->u.Range512).W.items = i;
  	}
  	/*---------------------------------------------------------
  		DETECT BITMAP 256 RANGE (signature 1000101)
  	---------------------------------------------------------*/
  	else if ((Signature & 0x67) == 0x45) {
  		SETPRESENT_c_CellChannel_Range256 (Destin);
  		CURPOS += 7;
  		VAR_c_CellChannel_Range256 (Destin->u.Range256).OrigARFCN = SHIFT_INT (10);

  		for (i=0; i<64; i++) {
  			if (i==0) len = 8;
  			else if (i>=1 && i<=2) len = 7;
  			else if (i>=3 && i<=6) len = 6;
  			else if (i>=7 && i<=14) len = 5;
  			else if (i>=15 && i<=30) len = 4;
  			else if (i>=31 && i<=62) len = 3;
  			else if (i>=63 && i<=126) len = 2;
  			else len = 1;
  			if (CURPOS - BitOffset + len > Length) break;
  			VAR_c_CellChannel_Range256 (Destin->u.Range256).W.data [i] = SHIFT_INT (len);
  		}
 			VAR_c_CellChannel_Range256 (Destin->u.Range256).W.items = i;
  	}
  	/*---------------------------------------------------------
  		DETECT BITMAP 128 RANGE (signature 1000110)
  	---------------------------------------------------------*/
  	else if ((Signature & 0x67) == 0x46) {
  		SETPRESENT_c_CellChannel_Range128 (Destin);
  		CURPOS += 7;

  		VAR_c_CellChannel_Range128 (Destin->u.Range128).OrigARFCN = SHIFT_INT (10);

  		for (i=0; i<64; i++) {
  			if (i==0) len = 7;
  			else if (i>=1 && i<=2) len = 6;
  			else if (i>=3 && i<=6) len = 5;
  			else if (i>=7 && i<=14) len = 4;
  			else if (i>=15 && i<=30) len = 3;
  			else if (i>=31 && i<=62) len = 2;
  			else len = 1;
  			if (CURPOS - BitOffset + len > Length) break;
  			VAR_c_CellChannel_Range128 (Destin->u.Range128).W.data [i] = SHIFT_INT (len);
  		}
 			VAR_c_CellChannel_Range128 (Destin->u.Range128).W.items = i;
  	}
  	/*---------------------------------------------------------
  		DETECT BITMAP VARIABLE (signature 1000111)
  	---------------------------------------------------------*/
  	else if ((Signature & 0x67) == 0x47) {
  		SETPRESENT_c_CellChannel_Variable (Destin);
  		CURPOS += 7;

  		VAR_c_CellChannel_Variable (Destin->u.Variable).OrigARFCN = SHIFT_INT (10);
  		for (i=0; (CURPOS - BitOffset < Length) && i<111; i++) {
  			VAR_c_CellChannel_Variable (Destin->u.Variable).RRFCN.data [i] = SHIFT_INT (1);
  		}
  		VAR_c_CellChannel_Variable (Destin->u.Variable).RRFCN.items = i;
  	}
  	/*---------------------------------------------------------
  		UNKNOWN CODING!
  	---------------------------------------------------------*/
  	else {
  		return ED_SYNTAX_ERROR;
  	}

		return CURPOS - BitOffset + ((8 - (CURPOS & 7)) & 7);
  }%
}

#------------------------------------
# TS 04.18, 10.5.2.26
#------------------------------------
bit-field PageMode {
	size: 4 bits;
	bits 1-2: PM integer enum {
		b00 = "Normal paging"
		b01 = "Extended paging"
		b10 = "Paging reorganization"
		b11 = "Same as before"
	};
	bits 3-4: spare void default = 0;
}

#------------------------------------
# TS 04.18, 10.5.2.29
#------------------------------------
bit-field RACHCtrlParam {
	size: 3 octets;
	octet 1 {
		bits 7-8: MaxRetrans integer enum {
			b00 = "Maximum 1 retransmission"
			b01 = "Maximum 2 retransmissions"
			b10 = "Maximum 4 retransmissions"
			b11 = "Maximum 7 retransmissions"
		};
		bits 3-6: Tx integer enum {
			b0000 = "3 slots used to spread transmission"
			b0001 = "4 slots used to spread transmission"
			b0010 = "5 slots used to spread transmission"
			b0011 = "6 slots used to spread transmission"
			b0100 = "7 slots used to spread transmission"
			b0101 = "8 slots used to spread transmission"
			b0110 = "9 slots used to spread transmission"
			b0111 = "10 slots used to spread transmission"
			b1000 = "11 slots used to spread transmission"
			b1001 = "12 slots used to spread transmission"
			b1010 = "14 slots used to spread transmission"
			b1011 = "16 slots used to spread transmission"
			b1100 = "20 slots used to spread transmission"
			b1101 = "25 slots used to spread transmission"
			b1110 = "32 slots used to spread transmission"
			b1111 = "50 slots used to spread transmission"
		};
		bit 2: CellBarrAccess boolean;
		bit 1: RE boolean;
	};
	octet 3 {
		bit 16: AC_C15 boolean;
		bit 15: AC_C14 boolean;
		bit 14: AC_C13 boolean;
		bit 13: AC_C12 boolean;
		bit 12: AC_C11 boolean;
		bit 11: EC_C10 boolean;
		bit 10: AC_C09 boolean;
		bit  9: AC_C08 boolean;
		bit  8: AC_C07 boolean;
		bit  7: AC_C06 boolean;
		bit  6: AC_C05 boolean;
		bit  5: AC_C04 boolean;
		bit  4: AC_C03 boolean;
		bit  3: AC_C02 boolean;
		bit  2: AC_C01 boolean;
		bit  1: AC_C00 boolean;
	};
}

#NAME SI2terRestOctets
#------------------------------------
# TS 04.18, 10.5.2.33a
#------------------------------------
csn.1 {
	<SI2terRestOctets> ::=
		{ L | H
		< SI2ter_MP_CHANGE_MARK : bit(1) >
		< SI2ter_3G_CHANGE_MARK : bit(1) >
		< SI2ter_INDEX : bit(3) >
		< SI2ter_COUNT : bit(3) >
		{ 0 | 1 < UTRAN FDD Description : < SI2 UTRAN FDD Description struct > > }
		{ 0 | 1 < UTRAN TDD Description : < SI2 UTRAN TDD Description struct > > }
		{ 0 | 1 < 3G MEASUREMENT Parameters Description :< SI2 3G MEASUREMENT Parameters Description struct >
	> }
		}
	<spare padding> ;

	slave < SI2 UTRAN FDD Description struct >::=								-- 21 bits are available if this structure is present on its own
		01	< FDD-ARFCN : bit (14) >							-- requires 2+14=16 bits

				-- The values '00', '10' and '11' were used in an earlier version

				-- of the protocol and shall not be used.
		{ 0 | 1 < Bandwidth_FDD : bit (3) > } ;

	slave < SI2 UTRAN TDD Description struct >::=								-- 21 bits are available if this structure is present on its own

		01	< TDD-ARFCN : bit (14) >							-- requires 2+14=16 bits

				-- The values '00', '10' and '11' were used in an earlier version

				-- of the protocol and shall not be used.
		{ 0 | 1 < Bandwidth_TDD : bit (3) > } ;

	slave < SI2 3G MEASUREMENT Parameters Description struct >::=
		< Qsearch_I : bit (4) >
		{ 0 | 1	< FDD_Qoffset : bit (4) >						-- FDD Parameters
				< FDD_Qmin : bit (3) > }
		{ 0 | 1	< TDD_Qoffset : bit (4) > } ; 				 	-- TDD Parameters

}


#------------------------------------
# ETSI 24.008, 10.5.6.2
#------------------------------------
bit-field NetwkServAccessPointId {
	size: 1 octets;
	bits 5-8: spare void default = 0;
	bits 1-4: NSAPIValue integer;
}


#------------------------------------
# ETSI 24.008, 10.5.6.3
#------------------------------------
dcl-type ProtocolCfg {
	# Define the minimum size of the object
	size 3 octets;
	type struct {
		ProtocolId: integer;
		Contents: binary 64 octets;
	}
	encode %{
		PUSH_INT (Source->ProtocolId, 16);
		PUSH_INT (Source->Contents.usedBits >> 3, 8);
		PUSH_BIN (Source->Contents.value, Source->Contents.usedBits);
		return Source->Contents.usedBits + 24;
	}%
	decode %{
		Destin->ProtocolId = SHIFT_INT (16);
		ALLOC_c_ProtocolCfg_Contents (&(Destin->Contents), SHIFT_INT (8) << 3);
		SHIFT_BIN (Destin->Contents.value, Destin->Contents.usedBits);
		return Destin->Contents.usedBits + 24;
	}%
}

sequence ProtocolCfgList [6] ProtocolCfg;

0/1ext-field ProtocolCfgOpt {
	size: 1 octets;
  max size: 251 octets;
  1ext octet 1 {
  	bits 4-7: spare void default = 0;
  	bits 1-3: ConfigurationProtocol integer;
  };
 	remainder: ProtocolCfgs ProtocolCfgList;
}

#------------------------------------
# ETSI 24.008, 10.5.6.4
#------------------------------------
bit-field PacketDataProtocolAddr {
	size: 2 octets;
  max size: 18 octets;
  octet 1 {
  	bits 5-8: spare void default = 0;
  	bits 1-4: PDPTypeOrganisation integer;
  };
  octet 2 bits 1-8 PDPTypeNumber integer;
  remainder: AddressInformation binary;
}

#------------------------------------
# ETSI 24.008, 10.5.6.5
#------------------------------------
bit-field truncable QualityOfServ {
	size: 11 octets;
	octet 1 {
		bits 7-8: spare1 void default = 0;
		bits 4-6: DelayClass integer;
		bits 1-3: ReliabilityClass integer;
	};
	octet 2 {
		bits 5-8: PeakThroughput integer;
		bit 4: spare2 void default = 0;
		bits 1-3: PrecedenceClass integer;
	};
	octet 3 {
		bits 6-8: spare3 void default = 0;
		bits 1-5: MeanThroughput integer;
	};
	octet 4 {
		bits 6-8: TrafficClass integer;
		bits 4-5: DeliveryOrder integer;
		bits 1-3: DeliveryOfErroneusSDU integer;
	};
	octet 5 bits 1-8: MaximumSDUSize integer;
	octet 6 bits 1-8: MaximumBitRateForUplink integer;
	octet 7 bits 1-8: MaximumBitRateForDownlink integer;
	octet 8 {
		bits 5-8: ResidualBER integer;
		bits 1-4: SDUErrorRatio integer;
	};
	octet 9 {
		bits 3-8: TransderDelay integer;
		bits 1-2: TrafficHandlingPriority integer;
	};
	octet 10 bits 1-8: GuaranteedBitRateForUplink integer;
	octet 11 bits 1-8: GuaranteedBitRateForDownlink integer;
}


#------------------------------------
# ETSI 24.008, 10.5.6.9
#------------------------------------
bit-field LlcServAccessPointId {
	size: 1 octets;
	bits 5-8: spare void default = 0;
	bits 1-4: LLCSAPIValue integer;
}


